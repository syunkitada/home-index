{"Entry":0,"TokenDocumentIndexMap":null,"IdTextMap":[{"Text":"# Linux Commands\n\n## Basic Contents\n\n| Link              | Description            |\n| ----------------- | ---------------------- |\n| [apt](apt.md)     | apt                    |\n| [yum](yum.md)     | yum                    |\n| [grep](grep.md)   | grep, grep して sed    |\n| [find](find.md)   | find, find して rename |\n| [rsync](rsync.md) | rsync                  |\n| [git](git.md)     | git                    |\n| [patch](patch.md) | patch                  |\n\n## Observation\n\n| Link                                                                  | Description                              |\n| --------------------------------------------------------------------- | ---------------------------------------- |\n| [observation](observation.md)                                         | パフォーマンスの観測について             |\n| [latency](observation_latency.md)                                     | Latency の参考                           |\n| [observation tools](observation_tools_basic.md)                       | 観測ツールについて                       |\n| [observation tools (intermediate)](observation_tools_intermediate.md) | 観測ツールについて(中級)                 |\n| [network tools](network_tools.md)                                     | ネットワーク観測ツールについて           |\n| [network tcpdump \u0026 tshark](network_tcpdump_tshark.md)                 | ネットワークパケットの観測ツールについて |\n","UpdatedAt":"2021-05-30T22:01:59.6215699+09:00"},{"Text":"# apt\n\n## パッケージ検索\n\n```\n$ apt-cache search libibver\n```\n\n## インストール済みのパッケージ検索\n\n```\n$ dpkg -l\n```\n\n- ii: インストール済み\n- iU: インストール済み\n- rc: 設定ファイルだけ残ってる状態\n  - 以下で設定ファイルも含めてすべて削除できる\n  - sudo apt remove --purge packagename\n\n## History\n\n```\n$ less /var/log/apt/history.log\n/usr/bin/unattended-upgrade\n```\n\n## Disable downloading translations\n\n```\n$ cat \u003c\u003cEOF | dd of=/etc/apt/apt.conf.d/99translations\nAcquire::Languages \"none\";\nEOF\n```\n\n## Auto upgrades\n\n- 自動更新の除外設定\n\n```\n$ vim /etc/apt/apt.conf.d/50unattended-upgrades\n// List of packages to not update (regexp are supported)\nUnattended-Upgrade::Package-Blacklist {\n    \"vim\";\n//\u003e_\"libc6\";\n//\u003e_\"libc6-dev\";\n//\u003e_\"libc6-i686\";\n};\n```\n\n## Add repository\n\n```\n$ cat \u003c\u003cEOF | dd of=/etc/apt/sources.list.d/syunkitada-aptrepo.list\ndeb [trusted=yes] http://hogepiyo/hoge/amd64/ ./\nEOF\n```\n","UpdatedAt":"2021-05-30T22:01:59.6225691+09:00"},{"Text":"# find\n\n## find して rename する\n\n```\n$ find ./ -iname '*hoge*' | xargs rename 's/hoge/piyo/g'\n```\n\n## 全ファイルの tab を space に置換する\n\n```\n$ find ./ -type f | xargs sed -i 's/\\t/        /g'\n```\n","UpdatedAt":"2021-05-30T22:01:59.6235703+09:00"},{"Text":"# git\n\n## あるリポジトリの修正を別のリポジトリに適用する\n\n- リポジトリ A とリポジトリ B を並行運用するときに、リポジトリ A に適用したコミットをリポジトリ B にも適用する場合を想定\n\n```\n# patchを作成する\n$ cd ~/repository1\n\n$ mkdir /tmp/patches\n# 特定コミットからパッチを作成する\n$ git format-patch -o /tmp/patches 34ece0dbc9bca5b028e677bfe17e157359047b30\n/tmp/patches/0001-update.patch\n/tmp/patches/0002-update.patch\n\n\n# 別のリポジトリに適用する\n$ cd ~/repository2\n$ git am -3 patches/*.patch\n```\n","UpdatedAt":"2021-05-30T22:01:59.6245721+09:00"},{"Text":"# grep\n\n\n## grepしてsedする\n```\n$ grep -l hoge * -r | xargs sed -i 's/hoge/piyo/g'\n```\n","UpdatedAt":"2021-05-30T22:01:59.6255676+09:00"},{"Text":"# iostat\n\n- iostat は、指定されたインターバルごとに/proc/diskstats を読んで、 統計情報の計算を行って出力する\n- https://www.kernel.org/doc/Documentation/iostats.txt\n- ソースコード\n  - https://github.com/sysstat/sysstat/blob/master/iostat.c\n\n```\n752 void read_diskstats_stat_work(int curr, char *diskstats)\n753 {\n...\n772         /* major minor name rio rmerge rsect ruse wio wmerge wsect wuse running use aveq dcio dcmerge dcsect dcuse flio fltm */\n773         i = sscanf(line, \"%u %u %s %lu %lu %lu %lu %lu %lu %lu %u %u %u %u %lu %lu %lu %u %lu %u\",\n774                \u0026major, \u0026minor, dev_name,\n775                \u0026rd_ios, \u0026rd_merges_or_rd_sec, \u0026rd_sec_or_wr_ios, \u0026rd_ticks_or_wr_sec,\n776                \u0026wr_ios, \u0026wr_merges, \u0026wr_sec, \u0026wr_ticks, \u0026ios_pgr, \u0026tot_ticks, \u0026rq_ticks,\n777                \u0026dc_ios, \u0026dc_merges, \u0026dc_sec, \u0026dc_ticks,\n778                \u0026fl_ios, \u0026fl_ticks);\n779\n780         if (i \u003e= 14) {\n781             sdev.rd_ios     = rd_ios;\n782             sdev.rd_merges  = rd_merges_or_rd_sec;\n783             sdev.rd_sectors = rd_sec_or_wr_ios;\n784             sdev.rd_ticks   = (unsigned int) rd_ticks_or_wr_sec;\n785             sdev.wr_ios     = wr_ios;\n786             sdev.wr_merges  = wr_merges;\n787             sdev.wr_sectors = wr_sec;\n788             sdev.wr_ticks   = wr_ticks;\n789             sdev.ios_pgr    = ios_pgr;\n790             sdev.tot_ticks  = tot_ticks;\n791             sdev.rq_ticks   = rq_ticks;\n792\n793             if (i \u003e= 18) {\n794                 /* Discard I/O */\n795                 sdev.dc_ios     = dc_ios;\n796                 sdev.dc_merges  = dc_merges;\n797                 sdev.dc_sectors = dc_sec;\n798                 sdev.dc_ticks   = dc_ticks;\n799             }\n800\n801             if (i \u003e= 20) {\n802                 /* Flush I/O */\n803                 sdev.fl_ios     = fl_ios;\n804                 sdev.fl_ticks   = fl_ticks;\n805             }\n806         }\n```\n\n## References\n\n- [iostat -x の出力を Linux Kernel ソースコードから理解する](https://blog.etsukata.com/2013/10/iostat-x-linux-kernel.html)\n- [iostat の値はどこから来るのか](https://qiita.com/sato4557/items/b2e966d0777796778dfe)\n","UpdatedAt":"2021-05-30T22:01:59.6265673+09:00"},{"Text":"# ip\n\n## ip addr add\n\n```\n$ sudo ip addr add 192.168.10.2/24 dev eth0\n```\n\n## ip link set\n\n```\n$ sudo ip link set eth0 up\n\n# if following error occured, you should flush ip address\n$ sudo ip link set eth0 up\nRTNETLINK answers: File exists\n\n$ sudo ip addr flush dev eth0\n```\n","UpdatedAt":"2021-05-30T22:01:59.6281516+09:00"},{"Text":"# jq\n","UpdatedAt":"2021-05-30T22:01:59.6291571+09:00"},{"Text":"# man/tldr\n\n## man\n\n```\n$ man curl\n```\n\n## tldr\n\n```bash\n$ tldr curl\ncurl\nTransfers data from or to a server.\nSupports most protocols, including HTTP, FTP, and POP3.\nMore information:\nhttps://curl.haxx.se\n.\n\n - Download the contents of an URL to a file:\n    curl {{http://example.com}} -o {{filename}}\n\n - Download a file, saving the output under the filename indicated by the URL:\n    curl -O {{http://example.com/filename}}\n\n - Download a file, following [L]ocation redirects, and automatically [C]ontinuing (resuming) a previous file transfer:\n    curl -O -L -C - {{http://example.com/filename}}\n```\n","UpdatedAt":"2021-05-30T22:01:59.6301585+09:00"},{"Text":"# tcpdump \u0026 tshark\n\n## tcpdump\n\n- L2 レイヤでパケットを取得するためのツール\n- 基本的に L2 や L3 のレイヤでの問題を切り分けや、ネットワークの挙動の確認に利用される\n- ある程度目的のパケットが分ってる場合は、オプションを付けて特定のプロトコルや宛先やポートを指定して、標準出力にキャプチャ結果を出力するとよい\n\n```\n# 利用可能なインターフェイス一覧を表示\n$ tcpdump -D\n\n# デバイスでフィルタリング\n$ sudo tcpdump -i [device]\n\n# ホスト名でフィルタリング\n$ sudo tcpdump host [hostname]\n\n# SrcIP, DstIP, Portを指定してのフィルタリング\n$ sudo tcpdump -i [device] src [ip1] and dst [ip2] and dst port [port]\n\n# ネットワークアドレスでフィルタリング\n$ sudo tcpdump net [network addres: eg.192.168.1.0/24]\n\n# 特定のPortを含まないフィルタリング\n$ sudo tcpdump not port [port]\n\n# プロトコルでフィルタリング\n$ sudo tcpdump [protocol]\n# ex.\n# $ sudo tcpdump icmp\n# tcpdump: verbose output suppressed, use -v or -vv for full protocol decode\n# listening on enp31s0, link-type EN10MB (Ethernet), capture size 262144 bytes\n# 14:51:31.521513 IP 192.168.10.101 \u003e owner-desktop: ICMP echo request, id 4809, seq 122, length 64\n# 14:51:31.521563 IP owner-desktop \u003e 192.168.10.101: ICMP echo reply, id 4809, seq 122, length 64\n```\n\n### tcpdump の表示形式を変更する\n\n```\n# キャプチャ結果のVerbose表示\n$ sudo tcpdump -v port 80\n\n# キャプチャ結果のAscii表示\n# HTMLなどの中身を見たい場合はこれが便利\n$ sudo tcpdump -A port 80\n\n# キャプチャ結果のHexとAscii表示\n$ sudo tcpdump -X port 80\n\n# キャプチャ結果をL2モードで表示\n$ sudo tcpdump -e port 80\n```\n\n### tcpdump をファイルに保存して後で解析する\n\n- ネットワークでなんらかの問題がある場合に、問題をの切り分けを行いたい場合には、ファイルにパケットをキャプチャしておいて後で解析することがよくある\n- 簡単な解析であれば tcpdump でやる場合が多いが、後述する tshark を使うとより解析がしやすい\n\n```\n# 愚直にやるなら以下だが、ある程度目的のパケットが絞れてる場合は、-iなどでフィルタリングするとよい\n$ sudo tcpdump -w [filepath]\n\n# 本番環境で実行する場合はcountを指定してディスク容量を使いつぶさないように気を付ける\n# パケット数で制限を掛ける\n$ sudo tcpdump -w /tmp/testdump -c 10\n# ファイルサイズ(MB)で制限を掛ける\n$ sudo tcpdump -w /tmp/testdump -C 1\n# 時間で制限を掛ける\n$ sudo tcpdump -w /tmp/testdump -G 1\n\n# tcpdumpで読み込んで、解析する\n$ sudo tcpdump -r [filepath]\n```\n\n## tshark\n\n```\n$ sudo apt-get install tshark\n```\n\n```\n# パケットをファイルキャプチャする\n$ sudo tcpdump -i enp31s0 -w /tmp/tcpdump.out\n```\n\n```\n# 基本的な使い方はフィルタリングして目的の(不正な、怪しい)パケットを見つける\n# -n を付けると名前解決してくれる\n$ tshark -nr /tmp/tcpdump.out 'tcp.srcport==80'\n4   3.976424 192.168.10.121 → 192.168.10.101 TCP 66 80 → 50627 [SYN, ACK] Seq=0 Ack=1 Win=64240 Len=0 MSS=1460 SACK_PERM=1 WS=128\n7   3.983913 192.168.10.121 → 192.168.10.101 TCP 54 80 → 50627 [ACK] Seq=1 Ack=79 Win=64256 Len=0\n8   3.984941 192.168.10.121 → 192.168.10.101 TCP 208 HTTP/1.0 200 OK  [TCP segment of a reassembled PDU]\n9   3.985013 192.168.10.121 → 192.168.10.101 HTTP 938 HTTP/1.0 200 OK  (text/html)\n```\n\n### TCP 関連の絞り込み\n\n```\n# srcportで絞り込む\n$ tshark -r /tmp/tcpdump.out 'tcp.srcport==80'\n\n# dstportで絞り込む\n$ tshark -r /tmp/tcpdump.out 'tcp.dstport==80'\n\n\n# synパケットで絞り込む\n$ tshark -r /tmp/tcpdump.out 'tcp.flags.syn==1'\n\n# TCPZeroWindowで絞り込む\n# ZeroWindowは、受信側のTCPバッファが詰まっていている場合に、送信側にこれ以上送らないように教えるために、このフラグを立てて送信側に送信される\n$ tshark -r /tmp/tcpdump.out 'tcp.window_size==0'\n\n# resetフラグが出てる場合は、以下のパターンがある\n# 受信側が受信できないポートへ通信を受信したときに送信側にこのフラグを立てて返す\n# 受信側に自身のIPアドレス宛でないパケットを受信したときに送信側にこのフラグを立てて返す\n# 送信側が受信側からTCPZeroWindowを何度か受け取って、これ以上送信できないと判断したときにこのフラグを立てて受信側に送信する\n$ tshark -r /tmp/tcpdump.out 'tcp.flags.reset==1'\n```\n\n### IP 関連の絞り込み\n\n```\n# srcipで絞り込む\n$ tshark -r /tmp/tcpdump.out 'ip.srcip=192.168.1.1'\n\n# dstipで絞り込む\n$ tshark -r /tmp/tcpdump.out 'ip.srcip=192.168.1.2'\n\n# パケットサイズで絞り込む\n$ tshark -r /tmp/tcpdump.out 'ip.len\u003e100'\n\n# パケットサイズで絞り込む\n$ tshark -r /tmp/tcpdump.out 'ip.len==1500'\n```\n\n### ARP 関連の絞り込み\n\n```\n# arp要求\n$ tshark -r /tmp/tcpdump.out 'arp.opcode==1'\n\n# arp応答\n$ tshark -r /tmp/tcpdump.out 'arp.opcode==2'\n```\n\n### ICMP\n\n```\n# icmp request\n$ tshark -r /tmp/tcpdump.out 'icmp.type==8'\n\n# icmp reply\n$ tshark -r /tmp/tcpdump.out 'icmp.type==0'\n\n# icmp host unreachable\n$ tshark -r /tmp/tcpdump.out 'icmp.type==3' and 'icmp.code==1'\n\n# icmp port unreachable\n$ tshark -r /tmp/tcpdump.out 'icmp.type==3' and 'icmp.code==3'\n```\n\n### Frame\n\n```\n# frameの時間で絞り込む\n$ tshark -r /tmp/tcpdump.out 'frame.time \u003e= \"2020-09-22 12:00:00\"'\n\n# frameの番号で絞り込む\n$ tshark -r /tmp/tcpdump.out 'frame.number \u003e= 10 and frame.number \u003c 20'\n```\n\n```\n# 時間の表示\n$ tshark -r /tmp/tcpdump.out -ta [options]\n\n# Frame間の時間を差分にして表示\n$ tshark -r /tmp/tcpdump.out -td\n\n# 表示するフィールドを指定する\n$ tshark -r /tmp/tcpdump.out -td -T fields -e frame.number -e ip.src -e tcp.flags.syn -e tcp.flags.ack\n```\n\n### 統計情報\n\n```\n# 全プロトコルの統計情報を表示\n$ tshark -qr /tmp/tcpdump.out -z io,phs\n\n===================================================================\nProtocol Hierarchy Statistics\nFilter:\n\neth                                      frames:26 bytes:4062\n  ip                                     frames:26 bytes:4062\n    tcp                                  frames:26 bytes:4062\n      ssh                                frames:3 bytes:486\n      http                               frames:4 bytes:2140\n        data-text-lines                  frames:2 bytes:1876\n          tcp.segments                   frames:2 bytes:1876\n===================================================================\n\n\n# httpのみに限定して統計情報を表示\n$ tshark -qr /tmp/tcpdump.out -z io,phs,http\n\n===================================================================\nProtocol Hierarchy Statistics\nFilter: http\n\neth                                      frames:4 bytes:2140\n  ip                                     frames:4 bytes:2140\n    tcp                                  frames:4 bytes:2140\n      http                               frames:4 bytes:2140\n        data-text-lines                  frames:2 bytes:1876\n          tcp.segments                   frames:2 bytes:1876\n===================================================================\n\n\n# IPアドレスのconversionの表示\n$ tshark -qr /tmp/tcpdump.out -z conv,ip\n================================================================================\nIPv4 Conversations\nFilter:\u003cNo Filter\u003e\n                                               |       \u003c-      | |       -\u003e      | |     Total     |    Relative    |   Duration   |\n                                               | Frames  Bytes | | Frames  Bytes | | Frames  Bytes |      Start     |              |\n192.168.10.101       \u003c-\u003e 192.168.10.121            13      3126      13       936      26      4062     0.000000000         6.8361\n================================================================================\n\n\n# TCPのconversion表示\n$ tshark -qr /tmp/tcpdump.out -z conv,tcp\n================================================================================\nTCP Conversations\nFilter:\u003cNo Filter\u003e\n                                                           |       \u003c-      | |       -\u003e      | |     Total     |    Relative    |   Duration   |\n                                                           | Frames  Bytes | | Frames  Bytes | | Frames  Bytes |      Start     |              |\n192.168.10.101:50627       \u003c-\u003e 192.168.10.121:80                5      1320       5       378      10      1698     3.976361000         0.0231\n192.168.10.101:50628       \u003c-\u003e 192.168.10.121:80                5      1320       5       378      10      1698     6.789281000         0.0111\n192.168.10.101:49254       \u003c-\u003e 192.168.10.121:22                2       308       2       120       4       428     3.985103000         2.8510\n192.168.10.101:49249       \u003c-\u003e 192.168.10.121:22                1       178       1        60       2       238     0.000000000         0.0417\n================================================================================\n\n\n# TCPのconcersion表示(portでフィルタリング, ipなどでもフィルタリングできる)\n$ tshark -qr /tmp/tcpdump.out -z conv,tcp,tcp.port==80\n================================================================================\nTCP Conversations\nFilter:tcp.port==80\n                                                           |       \u003c-      | |       -\u003e      | |     Total     |    Relative    |   Duration   |\n                                                           | Frames  Bytes | | Frames  Bytes | | Frames  Bytes |      Start     |              |\n192.168.10.101:50627       \u003c-\u003e 192.168.10.121:80                5      1320       5       378      10      1698     3.976361000         0.0231\n192.168.10.101:50628       \u003c-\u003e 192.168.10.121:80                5      1320       5       378      10      1698     6.789281000         0.0111\n================================================================================\n\n\n# HTTPの統計表示\n$ tshark -qr /tmp/tcpdump.out -z http,stat\n===================================================================\nHTTP Statistics\n* HTTP Status Codes in reply packets\n    HTTP 200 OK\n* List of HTTP Request methods\n          GET 2\n===================================================================\n\n\n# ICMPの統計情報表示\n$ tshark -qr /tmp/tcpdump.out -z icmp,srt\n==========================================================================\nICMP Service Response Time (SRT) Statistics (all times in ms):\nFilter: \u003cnone\u003e\n\nRequests  Replies   Lost      % Loss\n0         0         0           0.0%\n\nMinimum   Maximum   Mean      Median    SDeviation     Min Frame Max Frame\n0.000     0.000     0.000     0.000     0.000          0         0\n==========================================================================\n```\n\n### tshark を tcpdump のように使う\n\n```\n# リアルタイムにフィルタリングして表示する\n$ sudo tshark -i enp31s0 -Y 'tcp.dstport==80'\nRunning as user \"root\" and group \"root\". This could be dangerous.\nCapturing on 'enp31s0'\n\n\n# ファイルに書き込む\n$ sudo tshark -i enp31s0 -w /tmp/tshark.cap\n```\n","UpdatedAt":"2021-05-30T22:01:59.6311527+09:00"},{"Text":"# Network tools\n\n## ping\n\n- レイテンシを確認する\n\n```\n$ ping google.co.jp\nPING google.co.jp (216.58.197.195) 56(84) bytes of data.\n64 bytes from nrt13s48-in-f195.1e100.net (216.58.197.195): icmp_seq=1 ttl=54 time=3.73 ms\n64 bytes from nrt13s48-in-f195.1e100.net (216.58.197.195): icmp_seq=2 ttl=54 time=4.13 ms\n```\n\n## traceroute\n\n- 通信経路を確認する\n- レイテンシを確認する\n\n```\n$ traceroute google.co.jp\n```\n\n## mtr\n\n- mtr は連続で traceroute し、その結果を描画し続けます\n- 通信経路のレイテンシや Loss 率を見たい場合に利用します\n\n```\n# loss率などがわかる\n$ mtr  192.168.122.102\n                                                                                                                                                                                                    Packets               Pings\n Host                                                                                                                                                                                             Loss%   Snt   Last   Avg  Best  Wrst StDev\n 1. 192.168.122.102                                                                                                                                                                                0.0%     2    0.6   0.5   0.4   0.6   0.0\n```\n\n## netstat\n\n```\n# ネットワークコネクションをすべて表示する\n$ netstat -an\n\n# Webサーバなどのコネクションが詰まると、大きめの数値として出てくる\n$ netstat -an | wc\n    1143\n\n# 特定のコネクションステータスだけ抽出\n$ netstat -an | grep ESTABLISHED | wc\n    1028\n\n# 各ネットワークプロトコルのstatisticsを表示する\n$ netstat -s\n...\nTcp:\n    210 active connections openings\n    31 passive connection openings\n    0 failed connection attempts\n    1 connection resets received\n    2 connections established\n    30741 segments received\n    27367 segments send out\n    17 segments retransmited\n    0 bad segments received.\n    2 resets sent\n...\n\n# インターフェイスのエラーやドロップを確認する\n$ netstat -i\nKernel Interface table\nIface      MTU    RX-OK RX-ERR RX-DRP RX-OVR    TX-OK TX-ERR TX-DRP TX-OVR Flg\neth0      1500   149313      0  11707 0        118987      0      0      0 BMRU\nlo       65536        6      0      0 0             6      0      0      0 LRU\n\n# 各プロトコルの詳細を表示する\n$ netstat -p\n```\n\n## ss\n\n- socket statistics\n\n```\n# -m: show socket memory usage\n# -o: show timer information\n# -p: show process using socket\n$ sudo ss -mop\nNetid State      Recv-Q Send-Q                                                                     Local Address:Port                                                                                      Peer Address:Port\n...\ntcp   CLOSE-WAIT 272    0                                                                              127.0.0.1:50595                                                                                        127.0.0.1:http\n         skmem:(r2304,rb1061296,t0,tb2626560,f1792,w0,o0,bl0)\ntcp   ESTAB      0      4432                                                                     192.168.122.101:ssh                                                                                      192.168.122.1:57568                 timer:(on,009ms,0)\n         skmem:(r0,rb369280,t0,tb87040,f15200,w5280,o0,bl0)\ntcp   FIN-WAIT-1 0      1                                                                       ::ffff:127.0.0.1:http                                                                                  ::ffff:127.0.0.1:50594                 timer:(on,198ms,0)\n         skmem:(r0,rb1061488,t0,tb2626560,f2816,w1280,o0,bl0)\ntcp   FIN-WAIT-1 0      1                                                                       ::ffff:127.0.0.1:http                                                                                  ::ffff:127.0.0.1:50595                 timer:(on,198ms,0)\n         skmem:(r0,rb1061488,t0,tb2626560,f2816,w1280,o0,bl0)\n\n# socketのサマリを表示\n$ ss -s\nTotal: 178 (kernel 0)\nTCP:   9 (estab 2, closed 1, orphaned 0, synrecv 0, timewait 0/0), ports 0\n\nTransport Total     IP        IPv6\n*         0         -         -\nRAW       0         0         0\nUDP       2         1         1\nTCP       8         5         3\nINET      10        6         4\nFRAG      0         0         0\n```\n\n## ip -a\n\n```bash\n$ ip a show dev enp31s0\n2: enp31s0: \u003cBROADCAST,MULTICAST,UP,LOWER_UP\u003e mtu 1500 qdisc fq_codel state UP group default qlen 1000\n    link/ether 70:85:c2:b7:a2:b6 brd ff:ff:ff:ff:ff:ff\n    inet 192.168.10.121/24 brd 192.168.10.255 scope global noprefixroute enp31s0\n     valid_lft forever preferred_lft forever\n```\n\n- mtu 1500\n  - 最大の IP パケットサイズ\n  - これにフレームヘッダ(14 bytes)と FCS(4 byte)が加算されてフレームが完成\n- qdisc fq_codel\n  - qdisc は Queueing Discipline の略\n  - fq_codel は、スケジューリング方式の一つ\n    - Fair/Flow Queueing + Codel の略\n    - https://www.bufferbloat.net/projects/codel/wiki/\n  - tc コマンドで変更可能\n- qlen 1000\n  - 送信キューの長さ\n  - 大きくしすぎる bufferbloat などの問題が発生するので注意\n    - bufferbloat とは送信パケットを過剰にバッファリングするとその分パケットが遅延しやすくなる問題\n    - 優先度の高い通信は送信バッファを小さくするという対策もある\n\n## ip -s link\n\n```bash\n$ ip -s link\n1: lo: \u003cLOOPBACK,UP,LOWER_UP\u003e mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000\nlink/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\nRX: bytes  packets  errors  dropped overrun mcast\n1866314030 4034006  0       0       0       0\nTX: bytes  packets  errors  dropped carrier collsns\n1866314030 4034006  0       0       0       0\n2: enp31s0: \u003cBROADCAST,MULTICAST,UP,LOWER_UP\u003e mtu 1500 qdisc fq_codel state UP mode DEFAULT group default qlen 1000\nlink/ether 70:85:c2:b7:a2:b6 brd ff:ff:ff:ff:ff:ff\nRX: bytes  packets  errors  dropped overrun mcast\n2457569    6821     0       0       0       2186\nTX: bytes  packets  errors  dropped carrier collsns\n1049875    4730     0       0       0       0\n```\n\n- errors\n  - Ethernet の CRC エラーなど、NIC 上で処理できなかったパケット数\n  - ケーブルの破損等\n- dropped\n  - 意図的なドロップ\n  - サポートしてないフレーム(IPv6 をを無効化している状態でやってきた IPv6 パケットなど)\n- overrun\n  - RX ring buffer の容量が足りずに破棄されたパケット数\n- mcast\n  - マルチキャスト通信を正常に受信した数\n- carrier\n  - NIC 毎で何らかの問題（ケーブルの接触不良）が生じて送信できなかったパケット数\n- collsns\n  - コリジョンを検知した（ジャム信号を送った）回数\n\n## ip rule\n\n- ポリシールール\n  - RPDB(routing policy database)によって管理され、ルーティングに利用される\n  - ポリシールールは、セレクタとアクションからなる\n    - セレクタ: アクションを実施したいパケットの条件を記述する\n    - アクション: 実行したいことを記述する\n      - 特定の table から経路情報御を lookup したり、NAT を実施することもできる\n  - ルーティングの流れ\n    - 優先度(priority)の小さい順で、RPDB 内のポリシールールを一つづつ見ていく\n    - ルールのセレクタにパケットが合致する場合、アクションを実施する\n    - アクションの実行に成功(例えば経路情報を取得）できれば、RPDB の lookup は終了\n    - セレクタに合致しないか、アクションの実行に失敗すれば、次のポリシールールを見る\n\n```\n$ ip rule\n0:      from all lookup local\n32766:  from all lookup main\n32767:  from all lookup default\n\n```\n\n## ip route\n\n```\n# routingテーブルの確認\n$ ip route show\ndefault via 192.168.10.1 dev enp31s0 proto static metric 100\n169.254.0.0/16 dev enp31s0 scope link metric 1000\n169.254.32.1 dev com-0-ex scope link\n169.254.32.2 dev com-1-ex scope link\n\n\n# 特定ポリシールールのrouteの確認\n$ ip route show table 0\ndefault via 192.168.10.1 dev enp31s0 proto static metric 100\n169.254.0.0/16 dev enp31s0 scope link metric 1000\n\n\n# 全ポリシーのroute を確認\n$ ip route show table 0\ndefault via 192.168.10.1 dev enp31s0 proto static metric 100\n169.254.0.0/16 dev enp31s0 scope link metric 1000\n\n\n# 特定IP宛てのルートを取得する\n$ ip route get 192.168.101.4\n192.168.101.4 dev com-3-ex src 192.168.10.121 uid 1000\n    cache\n\n```\n\n## ip neigh\n\n```\n$ ip neigh\n192.168.10.1 dev enp31s0 lladdr c0:25:a2:dd:db:b8 STALE\n192.168.101.4 dev com-3-ex lladdr 0e:3f:7a:f1:ef:9d STALE\n169.254.32.4 dev com-3-ex lladdr 0e:3f:7a:f1:ef:9d STALE\n192.168.100.2 dev com-0-ex lladdr b6:b6:3e:42:b2:0e STALE\n169.254.32.5 dev com-4-ex lladdr 9a:34:89:fe:f2:03 STALE\n169.254.32.3 dev com-2-ex lladdr 46:b4:3b:3e:d0:f7 STALE\n169.254.32.1 dev com-0-ex lladdr b6:b6:3e:42:b2:0e STALE\n192.168.10.101 dev enp31s0 lladdr 94:65:9c:6e:fd:39 DELAY\n192.168.101.3 dev com-4-ex lladdr 9a:34:89:fe:f2:03 STALE\n192.168.101.2 dev com-2-ex lladdr 46:b4:3b:3e:d0:f7 STALE\nfe80::10ff:fe02:208b dev enp31s0 lladdr 02:00:10:02:20:8b router STALE\n\n```\n\n## arp\n\n- arp テーブルの確認に利用します\n- L2 の通信ができない場合や、L2 に他 IP が存在しないことを確認するために利用します\n\n```\n# arpテーブルのキャッシュ確認\n$ arp\nAddress                  HWtype  HWaddress           Flags Mask            Iface\n192.168.122.101          ether   00:16:3e:09:6e:0d   C                     eth0\ngateway                  ether   fe:16:3e:09:6e:0d   C                     eth0\n\n# 特定IPのキャッシュを確認\n$ arp 192.168.122.101\nAddress                  HWtype  HWaddress           Flags Mask            Iface\n192.168.122.101          ether   00:16:3e:09:6e:0d   C                     eth0\n\n# キャッシュにない場合はno entryが表示される\n$ arp 192.168.122.103\n192.168.122.103 (192.168.122.103) -- no entry\n\n# pingを飛ばすと、arp解決してキャッシュに乗る\n$ ping 192.168.122.103\nPING 192.168.122.103 (192.168.122.103) 56(84) bytes of data.\n64 bytes from 192.168.122.103: icmp_seq=1 ttl=64 time=0.644 ms\n64 bytes from 192.168.122.103: icmp_seq=2 ttl=64 time=0.325 ms\n^C\n--- 192.168.122.103 ping statistics ---\n2 packets transmitted, 2 received, 0% packet loss, time 1000ms\nrtt min/avg/max/mdev = 0.325/0.484/0.644/0.161 ms\n\n$ arp 192.168.122.103\nAddress                  HWtype  HWaddress           Flags Mask            Iface\n192.168.122.103          ether   00:16:3e:25:a0:c6   C                     eth0\n```\n\n## iptraf\n\n- コマンドライン上で GUI みたいなインターフェイスで統計が見れる\n\n```bash\n$ iptraf-ng\n iptraf-ng 1.1.4\nl TCP Connections (Source Host:Port) qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq Packets qqqqqqqqqqqqqqqqqqqqqqqqqq Bytes qqqqqqqqqqq Flag qqqqqqqqq Iface qqqqqqqqqqqqqqqqqqqqqqk\nxl192.168.122.101:22                                                                                                                      \u003e    1751                           377324             -PA-           eth0                        x\nxm192.168.122.1:57568                                                                                                                     \u003e    1751                            91232             --A-           eth0                        x\nxl192.168.122.1:53068                                                                                                                     \u003e      62                             4100             --A-           eth0                        x\n...\n```\n\n## ethtool\n\n- Mostly interface tuning; som stats\n\n```\n$ sudo ethtool eth0\nSettings for eth0:\n        Supported ports: [ TP ]\n        Supported link modes:   10baseT/Half 10baseT/Full\n                                100baseT/Half 100baseT/Full\n                                1000baseT/Full\n        Supported pause frame use: No\n        Supports auto-negotiation: Yes\n        Advertised link modes:  10baseT/Half 10baseT/Full\n                                100baseT/Half 100baseT/Full\n                                1000baseT/Full\n        Advertised pause frame use: No\n        Advertised auto-negotiation: Yes\n        Speed: 1000Mb/s\n        Duplex: Full\n        Port: Twisted Pair\n        PHYAD: 1\n        Transceiver: internal\n        Auto-negotiation: on\n        MDI-X: on (auto)\n        Supports Wake-on: pumbg\n        Wake-on: g\n        Current message level: 0x00000007 (7)\n                               drv probe link\n        Link detected: yes\n```\n\n## lsof -i\n\n- lsof 自体はプロセスが開いているファイル情報を収集するためのツール\n- -i オプションでソケットの情報を表示することができる\n\n```\n$ sudo lsof -i\n[sudo] password for owner:\nCOMMAND     PID            USER   FD   TYPE  DEVICE SIZE/OFF NODE NAME\nsystemd-r   490 systemd-resolve   12u  IPv4   18977      0t0  UDP localhost:domain\nsystemd-r   490 systemd-resolve   13u  IPv4   18978      0t0  TCP localhost:domain (LISTEN)\ncupsd       740            root    6u  IPv6   27913      0t0  TCP ip6-localhost:ipp (LISTEN)\ncupsd       740            root    7u  IPv4   27914      0t0  TCP localhost:ipp (LISTEN)\n```\n","UpdatedAt":"2021-05-30T22:01:59.6321556+09:00"},{"Text":"## Observation Performance\n\n## Problem Statement Method\n\n- パフォーマンスに問題があると思うか？\n- このシステムはこれまでうまく機能していたか？\n- 最近の変更は何か？（ソフトウェア? ハードウェア?)\n- パフォーマンスの低下をレイテンシや実行時間で表現できるか？\n- 問題が他の人やアプリケーションに影響するか？（またはあたただけか？）\n- 環境は？ソフトウェア、ハードウェア、インスタンスタイプは？バージョンは？設定は？\n\n## Workload Characterizaon Method\n\n- 誰がその負荷を引き起こしているか？PID、UID、IP アドレス、etc\n- なぜその負荷が呼び出されたか？コードパス、スタックトレース、etc\n- その負荷は何か？IOPS、tput、type、r/w\n- その負荷は時間とともにどのように変化するか？\n\n## The USE Method\n\n- 参考 1: [The USE Method](http://www.brendangregg.com/usemethod.html)\n- 参考 2: [USE Method: Linux Performance Checklist](http://www.brendangregg.com/USEmethod/use-linux.html)\n  各リソース(CPU, disks, busses, ...)の以下の項目についてチェックする\n- utilization: リソースがビジー状態になった平均時間\n- saturation(さちる、飽和): キューに積まれてる長さ、キューイングされてる時間\n- errors: エラーイベントの数\n\n## Hardware\n\n```\n-- CPU Interconnect -- |CPU| -- Memory Bus -- |DRAM|\n\n-- I/O Bus -- |I/O Bridge| -- |I/O Controller| -- |Disk|\n                                               -- |Disk|\n                                               -- |Swap|\n                           -- |Network Controller|| -- |Port|\n                                                    -- |Port|\n```\n\nUSE Method: Checklist\n\n## Off-CPU Analysis\n\n- 参考 1: [Off-CPU Analysis](http://www.brendangregg.com/offcpuanalysis.html)\n- Off-CPU の状態にフォーカスして解析を行うこと\n- スレッドは、ファイルシステム、ネットワーク IO、同期ロック、ページング/スワッピング、明示的なタイマーやシグナル、などを理由に CPU を離れる(Off-CPU)\n\n```\n(Runnable) -- schedule                                -\u003e (Executing) -- anon. major fault -\u003e (Anon. Paging)\n           \u003c- preempted or time quantum expired       --             \u003c- page in           --\n           \u003c- wakeup -- (Sleep) \u003c- I/O wait           --\n           \u003c- acquire -- (Lock) \u003c- block              --\n           \u003c- work arrives -- (Idle) \u003c- wait for work --\n\nCPU Sampling -----------------------------------------------\u003e\n     |  |  |  |  |  |  |                      |  |  |  |  |\n     A  A  A  A  B  B  B                      B  A  A  A  A\n    A(---------.                                .----------)\n               |                                |\n               B(--------.                   .--)\n                         |                   |         user-land\n   - - - - - - - - - - syscall - - - - - - - - - - - - - - - - -\n                         |                   |         kernel\n                         X     Off-CPU       |\n                       block . . . . . interrupt\n```\n\n## CPU Profile Method\n\n- 参考: [Flame Graphs](http://www.brendangregg.com/flamegraphs.html)\n- CPU のプロファイルを取得する\n- すべてのソフトウェアの CPU 使用率から 1%以上のものを把握する\n- それらの CPU 使用率からパフォーマンス問題が広いものを発見する\n\n```\nOS\n| Applications            |\n|      | System libraries |\n -------------------------\n| System Call Interface   |\n -------------------------\n| Linux Kernel                                       |\n| VFS                    | Sockets  | Scheduler      |\n| File Systems           | TCP/UDP  | Virtual Memory |\n| Volume Manager         | IP       |                |\n| Block Device Interface | Ethernet |                |\n| ------------------------\n| Device Drivvers         |\n -------------------------\n| Firmware                |\n -------------------------\n\nHardware\n|CPU| -- Memory Bus -- |DRAM|\n|   | -- I/O Bus -- |I/O Bridge| -- |I/O Controller| -- |Disk|\n                    |          |                     -- |Disk|\n                    |          |                     -- |Swap|\n                    |          | -- |Network Controller|| -- |Port|\n                    |          |                          -- |Port|\n```\n\n- http://cdn.oreillystatic.com/en/assets/1/event/122/Linux%20perf%20tools%20Presentation.pdf\n","UpdatedAt":"2021-05-30T22:01:59.6331672+09:00"},{"Text":"# Latency\n\n## Operation Costs in CPU Clock Cycles\n\n- 参考: [Infographics: Operation Costs in CPU Clock Cycles - IT Hare on Soft.ware](http://ithare.com/infographics-operation-costs-in-cpu-clock-cycles/)\n\n| Operation                                                         | Cycles         | Memo                                                                                                                                                         |\n| ----------------------------------------------------------------- | -------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| \"Simple\" register-register op (ADD,OR,etc)                        | \u003c1             |                                                                                                                                                              |\n| Memory write                                                      | -1             | メモリの書き込みは完了する前に次の命令へすすめるので 1 クロックで済む                                                                                        |\n| Bypass delay: switch between integer and floating-point units     | 0-3            |                                                                                                                                                              |\n| \"Right\" branch of \"if\"                                            | 1-2            |                                                                                                                                                              |\n| Floating-point/vector addition                                    | 1-3            |                                                                                                                                                              |\n| Multiplication (integer/float/vector)                             | 1-7            |                                                                                                                                                              |\n| L1 read                                                           | 4              |                                                                                                                                                              |\n| L2 read                                                           | 10-12          |                                                                                                                                                              |\n| \"Wrong\" branch of \"if\" (branch misprediction)                     | 10-20          | 分岐予測失敗のペナルティは意外と少ない                                                                                                                       |\n| Integer division                                                  | 15-40          | 整数の割り算は遅い                                                                                                                                           |\n| 128-bit vector division                                           | 10-70          |                                                                                                                                                              |\n| C function direct call                                            | 25-70          |                                                                                                                                                              |\n| Floating-point division                                           | 30-40          |                                                                                                                                                              |\n| L3 read                                                           | 30-70          |                                                                                                                                                              |\n| C function indirect call                                          | 30-100         |                                                                                                                                                              |\n| C++ virtual function call                                         | 50-120         |                                                                                                                                                              |\n| Main RAM read                                                     | 100-150        | キャッシュに比べやはり遅い、cache の hit は重要                                                                                                              |\n| NUNA: different-socket L3 read                                    | 100-300        |                                                                                                                                                              |\n| Allocation + deallocation pair (small objects)                    | 200-500        |                                                                                                                                                              |\n| NUMA: different-socket main RAM read                              | 300-500        |                                                                                                                                                              |\n| Kernel call                                                       | 1000-1500      | システムコールは、CPU を kernel モードに切り替えての処理になるなので、コストが高い                                                                           |\n| Thread context switch (direct costs)                              | 2000           | コンテキストスイッチは、CPU のレジスタ切り替えるのでコストが大きい                                                                                           |\n| C++ Exception thrown+caught                                       | 5000-10000     | C++に限らず例外のコストは大きい、しかし例外が発生しなければ(try を書いてる分には)コストはない。また、if 文でチェックを大量にするほうがコストが高い場合もある |\n| Thread context switch (total costs, including cache invalidation) | 10000-1million |                                                                                                                                                              |\n\n## Latency\n\n- 参考: [Latency Numbers Every Programmer Should Know](https://gist.github.com/jboner/2841832)\n\n| Operation                          | Latency(ns) | Latency(us) | Latency(ms) | Latency(relative)           |\n| ---------------------------------- | ----------- | ----------- | ----------- | --------------------------- |\n| L1 cache reference                 | 0.5         |             |             |                             |\n| Branch mispredict                  | 5           |             |             |                             |\n| L2 cache reference                 | 7           |             |             | 14x L1 cache                |\n| Mutex lock/unlock                  | 25          |             |             |                             |\n| Main memory reference              | 100         |             |             | 20x L2 cache, 200x L1 cache |\n| Compress 1K bytes with Zippy       | 3,000       | 3           |             |                             |\n| Send 1K bytes over 1 Gbps network  | 10,000      | 10          |             |                             |\n| Read 4K randomly from SSD\\*        | 150,000     | 150         |             | ~1GB/sec SSD                |\n| Read 1 MB sequentially from memory | 250,000     | 250         |             |                             |\n| Round trip within same datacenter  | 500,000     | 500         |             |                             |\n| Read 1 MB sequentially from SSD\\*  | 1,000,000   | 1,000       | 1           | ~1GB/sec SSD, 4X memory     |\n| Disk seek                          | 10,000,000  | 10,000      | 10          | 20x datacenter roundtrip    |\n| Read 1 MB sequentially from disk   | 20,000,000  | 20,000      | 20          | 80x memory, 20X SSD         |\n| Send packet CA-\u003eNetherlands-\u003eCA    | 150,000,000 | 150,000     | 150         |                             |\n","UpdatedAt":"2021-05-30T22:01:59.6341534+09:00"},{"Text":"# Observability tools basic\n\nPC のリソースの利用状況や正常性、エラーをチェックするためのコマンド集です。\n\n## sysstat のインストール\n\n```bash\n$ sudo yum install sysstat\n```\n\n## uptime\n\n```bash\n# 現在の時刻 up 起動時間, ログインユーザ数 user, load avelage: 1分, 5分, 30分\n$ uptime\n23:51:26 up 21:31,  1 user,  load average: 30.02, 26.43, 19.02\n```\n\n- 現在の時刻がずれている場合\n  date でタイムゾーンをチェック\n\n```bash\n$ date\n2016年  2月 28日 日曜日 11:55:54 JST\n```\n\nntp で時刻同期をチェック\n\n```bash\n$ ntpq -p\n     remote           refid      st t when poll reach   delay   offset  jitter\n==============================================================================\n ntp.kiba.net    189.130.221.188  2 u   31   64    1   24.292   -0.229   0.000\n ec2-54-64-6-78. 133.243.238.164  2 u   31   64    1   17.889    0.627   0.000\n```\n\nntp の設定をチェック\n\n```bash\n$ vim -R /etc/ntp.conf\n```\n\n- 起動時間が短い場合\n  リブートした覚えがないのに、これが短い場合 PC が何かの原因でリブートした可能性がある\n\n- load avelage\n  load avelage とは、現在 CPU が実行しているタスク数のこと。\n  つまり、CPU のスレッド数よりも大きい場合は、処理が間に合っていないことになる。\n\nこれには、割り込み不可能な IO でブロックされているプロセスも含まれているので、ディスク IO が間に合っていない場合などによくこの値が高くなる。\n\nまた、load avelage が、1 分間、5 分間、15 分間の指数移動平均で表示されるので、負荷が時間経過とともにどのように変化したかがわかる。\n\n15 分間の load average より、5, 1 分間の load average が非常に大きい場合、今現在なにかが起きている可能性がある。\nまた、5, 1 分間の load average が非常に少ない場合、今現在はなにも起きていないが、5 ～ 15 分前になにか起きていた可能性がある。\n\n## dmesg | less\n\n```bash\n$ dmesg | less\n\n[1880957.563150] perl invoked oom-killer: gfp_mask=0x280da, order=0, oom_score_adj=0\n[...]\n[1880957.563400] Out of memory: Kill process 18694 (perl) score 246 or sacrifice child\n[1880957.563408] Killed process 18694 (perl) total-vm:1972392kB, anon-rss:1953348kB, file-rss:0kB\n[2320864.954447] TCP: Possible SYN flooding on port 7001. Dropping request.  Check SNMP counters.\n```\n\noom-killer と TCP のリクエストのドロップなど、エラーを含むシステムの情報を得ることができます。\nなにか起きてると思ったらすぐにチェックすべき項目です。\n\n## vmstat 1 -t\n\n```bash\n$ vmstat 1 -t\nprocs -----------memory---------- ---swap-- -----io---- -system-- ------cpu----- -----timestamp-----\n r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st                 UTC\n 2  0      0 259516    888 1476192    0    0    84  1514 1191 2660 10  4 83  1  2 2017-03-04 03:35:53\n 5  0      0 259032    888 1476224    0    0     0    19 1015 2444  7  3 90  0  0 2017-03-04 03:35:54\n 0  0      0 259268    888 1476228    0    0     0    25 1253 2774 16  8 69  0  6 2017-03-04 03:35:55\n 0  0      0 259236    888 1476236    0    0     0    46  993 2469  6  1 93  0  0 2017-03-04 03:35:56\n 0  0      0 259004    888 1476252    0    0     0    27 1168 2941  5  5 88  0  2 2017-03-04 03:35:57\n^C\n```\n\n1 秒間ごとに仮想メモリの統計を表示します。\n一行目はシステム起動時からの平均。\n\nr : CPU で実行中および順番を待っているプロセスの数。これは I/O を含んでいないので、CPU の飽和状態を見るのに、ロードアベレージよりも良いシグナルになります。言い換えると、\"r\"の値が CPU 数よりも多ければ飽和状態ということです。\n\nfree : キロバイトでの空きメモリー量。数えられないぐらいの桁数が表示されていたら、十分なメモリーがあります。7 番目に出てくる free -m コマンドは、空きメモリのより詳しい説明を表示してくれます。\n\nsi, so : スワップインとスワップアウト。ゼロでない値があれば、メモリ不足。\n\nus, sy, id, wa, st : CPU 時間の内訳で、すべての CPU に対する平均値。それぞれ、ユーザ時間、システム(カーネル)時間、アイドル時間、I/O 待ち時間、steal された時間(他のゲストマシンや、Xen の場合ゲストの分離されたドライバードメインによる steal)。\n\nCPU 時間の内訳で、user と system 時間を足すことで CPU がビジーかどうか確認できるでしょう。I/O 待ちが一定の数値を示しているならディスクがボトルネックです。この時、タスクはディスク I/O 待ちでブロックされてしまうため、CPU はアイドル状態になってしまっています。従って、I/O 待ちは CPU アイドル時間の別の形と考えられ、なぜアイドルなのかを調べる手がかりになり得ます。\n\nシステム時間は、I/O 処理に必要です。20%を超えるような高いシステム時間は、詳しく調べる必要があると言えるでしょう。おそらくカーネルが I/O を効率よく処理できていない状態です。\n\n上の例では、CPU 時間はほとんどユーザレベルになっており、つまりアプリケーションレベルが使用していることを示しています。CPU は平均 90%以上使用されています。これは必ずしも問題とは言えず、「r」列で飽和状態の程度を調べましょう。\n\n## mpstat -P ALL 1\n\n```bash\n$ mpstat -P ALL 1\nLinux 3.13.0-49-generic (titanclusters-xxxxx)  07/14/2015  _x86_64_ (32 CPU)\n\n07:38:49 PM  CPU   %usr  %nice   %sys %iowait   %irq  %soft  %steal  %guest  %gnice  %idle\n07:38:50 PM  all  98.47   0.00   0.75    0.00   0.00   0.00    0.00    0.00    0.00   0.78\n07:38:50 PM    0  96.04   0.00   2.97    0.00   0.00   0.00    0.00    0.00    0.00   0.99\n07:38:50 PM    1  97.00   0.00   1.00    0.00   0.00   0.00    0.00    0.00    0.00   2.00\n07:38:50 PM    2  98.00   0.00   1.00    0.00   0.00   0.00    0.00    0.00    0.00   1.00\n07:38:50 PM    3  96.97   0.00   0.00    0.00   0.00   0.00    0.00    0.00    0.00   3.03\n[...]\n```\n\nCPU ごとの CPU 時間の内訳を表示します。\n\ntop 中に 1 でも見れる。\n\n## pidstat 1\n\n```bash\n$ pidstat 1\nLinux 3.13.0-49-generic (titanclusters-xxxxx)  07/14/2015    _x86_64_    (32 CPU)\n\n07:41:02 PM   UID       PID    %usr %system  %guest    %CPU   CPU  Command\n07:41:03 PM     0         9    0.00    0.94    0.00    0.94     1  rcuos/0\n07:41:03 PM     0      4214    5.66    5.66    0.00   11.32    15  mesos-slave\n07:41:03 PM     0      4354    0.94    0.94    0.00    1.89     8  java\n07:41:03 PM     0      6521 1596.23    1.89    0.00 1598.11    27  java\n07:41:03 PM     0      6564 1571.70    7.55    0.00 1579.25    28  java\n07:41:03 PM 60004     60154    0.94    4.72    0.00    5.66     9  pidstat\n\n07:41:03 PM   UID       PID    %usr %system  %guest    %CPU   CPU  Command\n07:41:04 PM     0      4214    6.00    2.00    0.00    8.00    15  mesos-slave\n07:41:04 PM     0      6521 1590.00    1.00    0.00 1591.00    27  java\n07:41:04 PM     0      6564 1573.00   10.00    0.00 1583.00    28  java\n07:41:04 PM   108      6718    1.00    0.00    0.00    1.00     0  snmp-pass\n07:41:04 PM 60004     60154    1.00    4.00    0.00    5.00     9  pidstat\n^C\n```\n\npidstat は、top のプロセスごとの概要とも言えるものですが、スクリーンをクリアする代わりに連続して概要を表示します。これは、時系列でのパターンを見るのに便利で、見たものを調査の記録にとっておく(コピペ)のにもよいでしょう。\n\n上の例では、2 つの java プロセスが CPU を消費している原因だとわかります。%CPU 列は全 CPU に対する使用率ですが、1591%という表示から java プロセスがほぼ 16CPU 分を使用していると分かります。\n\n## iostat -xz 1\n\n```bash\n$ iostat -xz 1\nLinux 3.13.0-49-generic (titanclusters-xxxxx)  07/14/2015  _x86_64_ (32 CPU)\n\navg-cpu:  %user   %nice %system %iowait  %steal   %idle\n          73.96    0.00    3.73    0.03    0.06   22.21\n\nDevice:   rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util\nxvda        0.00     0.23    0.21    0.18     4.52     2.08    34.37     0.00    9.98   13.80    5.42   2.44   0.09\nxvdb        0.01     0.00    1.02    8.94   127.97   598.53   145.79     0.00    0.43    1.78    0.28   0.25   0.25\nxvdc        0.01     0.00    1.02    8.86   127.79   595.94   146.50     0.00    0.45    1.82    0.30   0.27   0.26\ndm-0        0.00     0.00    0.69    2.32    10.47    31.69    28.01     0.01    3.23    0.71    3.98   0.13   0.04\ndm-1        0.00     0.00    0.00    0.94     0.01     3.78     8.00     0.33  345.84    0.04  346.81   0.01   0.00\ndm-2        0.00     0.00    0.09    0.07     1.35     0.36    22.50     0.00    2.55    0.23    5.62   1.78   0.03\n[...]\n^C\n```\n\nブロックデバイス(ディスク)に適用されるワークロードと、その結果のパフォーマンスの両方を理解出来る素晴らしいツールです。見方は以下の通り。\n\nr/s, w/s, rkB/s, wkB/s : 秒間にデバイスに送られた読み出し回数、書き込み回数、読み出しキロバイト、書き込みキロバイトを表します。ワークロードの特徴をつかむのに使いましょう。パフォーマンスの問題はたいていの場合、単に過剰な負荷がかけられていることが原因です。\nawait : I/O の平均時間のミリ秒表示。これは、アプリケーションが待たされた時間で、キューに入っていた時間と実際のサービス時間の両方を含んでいます。期待した平均時間より長い場合、デバイスが飽和状態か、デバイス自体に問題がある可能性があります。\n\navgqu-sz : デバイスに対して発行されたリクエストの平均数。(複数のバックエンドディスクの前に立つ仮想デバイスは特に、デバイスはリクエストを通常は並行に処理しますが)1 より大きい値は、飽和状態を表します。\n\n%util : デバイスの使用率。これは、実際にはビジーな割合で、デバイスが仕事をした時間を秒ごとに出したものです。デバイスにもよりますが、一般的に 60%より大きい値はパフォーマンスの劣化(await にも表れます)につながります。100％に近い値は通常、飽和状態を意味します。\n\nストレージデバイスがたくさんのバックエンドディスクを持つ論理ディスクデバイスの場合、使用率が 100%ということは、なんらかの I/O が 100%の時間処理され続けているということである一方で、バックエンドディスクは飽和状態からは程遠い可能性が高く、もっと多くの処理が可能なはずです。\n\n頭にとどめておきたいのは、ディスク I/O のパフォーマンスが悪いことは、必ずしもアプリケーションの問題になるわけではないということです。I/O を非同期に実行するために、多くのテクニックがよく使われるので、アプリケーションはブロックされず、レイテンシも直接は影響してこないのです(例、読み出しには先読み、書き込みにはバッファリング)。\n\n## sar -n DEV 1\n\n```bash\n$ sar -n DEV 1\nLinux 3.13.0-49-generic (titanclusters-xxxxx)  07/14/2015     _x86_64_    (32 CPU)\n\n12:16:48 AM     IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s   %ifutil\n12:16:49 AM      eth0  18763.00   5032.00  20686.42    478.30      0.00      0.00      0.00      0.00\n12:16:49 AM        lo     14.00     14.00      1.36      1.36      0.00      0.00      0.00      0.00\n12:16:49 AM   docker0      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\n\n12:16:49 AM     IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s   %ifutil\n12:16:50 AM      eth0  19763.00   5101.00  21999.10    482.56      0.00      0.00      0.00      0.00\n12:16:50 AM        lo     20.00     20.00      3.25      3.25      0.00      0.00      0.00      0.00\n12:16:50 AM   docker0      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\n^C\n```\n\nこのツールで、ワークロードの目安になるネットワークインターフェースのスループットである rxkB/s と txkB/s を調べましょう。また、なんらかの制限に達していないかどうかも確認しましょう。上の例では、eth0 が 22Mbytes/s、つまり 176Mbits/sec を受信しています(つまり 1Gbit/sec の制限にひっかかっています)。\n\nこのバージョンでは、デバイスの使用率(全二重での上り下り両方での最大値)として%ifutil も表示されていて、これは Brendan の nicstat ツールでの計測のためにも使います。ただし、nicstat と同じく、なかなか正しい値を示してはくれず、上の例(0.00)のようにちゃんと動いていないように見える場合が多いようです。\n\n## sar -n TCP,ETCP 1\n\n```bash\n$ sar -n TCP,ETCP 1\nLinux 3.13.0-49-generic (titanclusters-xxxxx)  07/14/2015    _x86_64_    (32 CPU)\n\n12:17:19 AM  active/s passive/s    iseg/s    oseg/s\n12:17:20 AM      1.00      0.00  10233.00  18846.00\n\n12:17:19 AM  atmptf/s  estres/s retrans/s isegerr/s   orsts/s\n12:17:20 AM      0.00      0.00      0.00      0.00      0.00\n\n12:17:20 AM  active/s passive/s    iseg/s    oseg/s\n12:17:21 AM      1.00      0.00   8359.00   6039.00\n\n12:17:20 AM  atmptf/s  estres/s retrans/s isegerr/s   orsts/s\n12:17:21 AM      0.00      0.00      0.00      0.00      0.00\n^C\n```\n\nこれは、いくつかの重要な TCP 関連メトリクスの概要です。以下を含んでいます。\n\nactive/s : 1 秒あたりのローカルから接続を開始した TCP コネクション数(例、connect()による接続)\npassive/s : 1 秒あたりのリモートから接続を開始した TCP コネクション数(例、accept()による接続)\nretrans/s : 1 秒あたりの TCP 再送数\nactive/s と passive/s の数は、それぞれ新しく受け入れたコネクション数と新しく下流に向けて張ったコネクション数で、サーバーの負荷をおおまかに把握するのに便利です。active を外向き、passive を内向きと考えるのに便利ですが、厳密に正しいとは言えません(ローカルホストからローカルホストへのコネクションなどを考慮する必要があるなど)。\n\n再送はネットワークあるいはサーバーの問題のサインです。ネットワークの信頼性が低い(例、パブリックなインターネット)か、サーバーが過負荷でパケットをドロップしているかでしょう。上の例では、1 秒に 1 TCP コネクションしか生成されていません。\n\n## top\n\n```bash\n$ top\ntop - 00:15:40 up 21:56,  1 user,  load average: 31.09, 29.87, 29.92\nTasks: 871 total,   1 running, 868 sleeping,   0 stopped,   2 zombie\n%Cpu(s): 96.8 us,  0.4 sy,  0.0 ni,  2.7 id,  0.1 wa,  0.0 hi,  0.0 si,  0.0 st\nKiB Mem:  25190241+total, 24921688 used, 22698073+free,    60448 buffers\nKiB Swap:        0 total,        0 used,        0 free.   554208 cached Mem\n\n   PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\n 20248 root      20   0  0.227t 0.012t  18748 S  3090  5.2  29812:58 java\n  4213 root      20   0 2722544  64640  44232 S  23.5  0.0 233:35.37 mesos-slave\n 66128 titancl+  20   0   24344   2332   1172 R   1.0  0.0   0:00.07 top\n  5235 root      20   0 38.227g 547004  49996 S   0.7  0.2   2:02.74 java\n  4299 root      20   0 20.015g 2.682g  16836 S   0.3  1.1  33:14.42 java\n     1 root      20   0   33620   2920   1496 S   0.0  0.0   0:03.82 init\n     2 root      20   0       0      0      0 S   0.0  0.0   0:00.02 kthreadd\n     3 root      20   0       0      0      0 S   0.0  0.0   0:05.35 ksoftirqd/0\n     5 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 kworker/0:0H\n     6 root      20   0       0      0      0 S   0.0  0.0   0:06.94 kworker/u256:0\n     8 root      20   0       0      0      0 S   0.0  0.0   2:38.05 rcu_sched\n\n```\n\ntop コマンドには、これより前に見てきたメトリクスの多くが含まれています。負荷が変わりやすいことを示してくれるここまで見てきたコマンドと違って、ざっくりと確認したいときには便利でしょう。\n\ntop の良くないところとしては、時間を追って表れるパターンをつかみにくいことで、これらは連続して出力を出してくれる vmstat や pidstat などの方がよりはっきりと分かります。間欠的に現れる現象についても、出力を素早く停止(Ctrl-S で一時停止、Ctrl-S で再開)できないとスクリーンがクリアされて消えてしまいます。\n\n## ps\n\n### ps -eF f\n\n```bash\n$ ps -eF f\nUID        PID  PPID  C    SZ   RSS PSR STIME TTY      STAT   TIME CMD\nroot         2     0  0     0     0   0 08:46 ?        S      0:00 [kthreadd]\nroot         3     2  0     0     0   0 08:46 ?        S      0:00  \\_ [ksoftirqd/0]\nroot         6     2  0     0     0   0 08:46 ?        S      0:00  \\_ [kworker/u2:0]\nroot         7     2  0     0     0   0 08:46 ?        S      0:00  \\_ [migration/0]\nroot         8     2  0     0     0   0 08:46 ?        S      0:00  \\_ [rcu_bh]\n...\nroot     12009     1  0 56550  5152   0 08:48 ?        Ss     0:00 /usr/sbin/httpd -DFOREGROUND\napache   12010 12009  0 56550  3000   0 08:48 ?        S      0:00  \\_ /usr/sbin/httpd -DFOREGROUND\napache   12011 12009  0 56550  3000   0 08:48 ?        S      0:00  \\_ /usr/sbin/httpd -DFOREGROUND\napache   12012 12009  0 56550  3000   0 08:48 ?        S      0:00  \\_ /usr/sbin/httpd -DFOREGROUND\napache   12013 12009  0 56550  3000   0 08:48 ?        S      0:00  \\_ /usr/sbin/httpd -DFOREGROUND\n```\n\n### watch -n 1 -d \"ps auxw | grep ' R' | grep -v grep\"\n\n```bash\n$ watch -n 1 -d \"ps auxw | grep ' R' | grep -v grep\"\nroot        10  0.0  0.0      0     0 ?        R    01:56   0:02 [rcu_sched]\nroot       276  0.0  0.0      0     0 ?        R    01:56   0:01 [xfsaild/sda1]\n...\n\n$ watch -n 1 -d \"ps auxw | grep ' D' | grep -v grep\"\n...\n```\n\ntop コマンドでもある程度のプロセス状態を見ることは可能であるが、より正確にプロセスの状態を見たい場合は ps を利用するとよい。\n例えば、実行キューが詰まっている場合は R で grep したり、IO が詰まっている場合は D で grep したりすると、どのプロセスが悪さをしているかがわかる。\n\nステータス\n\n- R Run TASK_RUNNING 実行可能な状態。CPU が空きさえすれば、いつでも実行可能な状態。\n- S Sleep TASK_INTERRUPTIBLE 割り込み可能な待ち状態。おもに復帰時間が予測不能な長時間の待ち状態。スリープやユーザからの入力待ちなど。\n- D Disk Sleep TASK_UNINTERRUPTIBLE 割り込み不可能な待ち状態。おもに短時間で復帰する場合の待ち状態。ディスクの入出力待ち。\n- T Stopped TASK_STOPPED サスペンドシグナルを送られて実行中断になった状態。リジュームされるまでスケジューリングされない。\n- Z Zombie TASK_ZOMBIE ゾンビ状態。子プロセスが exit して親プロセスにリープされるまでの状態。\n\n### ps -eo [fields]\n\n- 表示フィールドをカスタマイズする\n\n```bash\n$ ps -eo user,sz,rss,minflt,majflt,pcpu,args\n```\n\n## /proc/interrupts\n\n```\n$ cat /proc/interrupts\n\n$ watch -n 1 -d \"cat /proc/interrupts | egrep 'RES|CAL|TLB'\"\n```\n\n- /proc/interrupts で割り込みを表示できる\n- 割り込みを少なくするようにチューニングすることはパフォーマンス向上につながる\n- 逆に、割り込みが多すぎるとパケットや、プロセスのつまりの原因になる\n\n## 参考\n\n- [6 万ミリ秒でできる Linux パフォーマンス分析]: https://yakst.com/ja/posts/3601?platform=hootsuite\n  [原文]: http://techblog.netflix.com/2015/11/linux-performance-analysis-in-60s.html\n- [Linux Performance Tools]: http://techblog.netflix.com/2015/08/netflix-at-velocity-2015-linux.html\n","UpdatedAt":"2021-05-30T22:01:59.636153+09:00"},{"Text":"# Observability tools intermediate\n\n## strace\n\n- システムコールをトレースする\n\n```\n$ sudo strace -tttT -p 12010\nProcess 12010 attached\n1490533750.045816 accept4(4, {sa_family=AF_INET6, sin6_port=htons(37074), inet_pton(AF_INET6, \"::1\", \u0026sin6_addr), sin6_flowinfo=0, sin6_scope_id=0}, [28], SOCK_CLOEXEC) = 9 \u003c5.685130\u003e\n1490533755.731239 getsockname(9, {sa_family=AF_INET6, sin6_port=htons(80), inet_pton(AF_INET6, \"::1\", \u0026sin6_addr), sin6_flowinfo=0, sin6_scope_id=0}, [28]) = 0 \u003c0.000075\u003e\n1490533755.731445 fcntl(9, F_GETFL)     = 0x2 (flags O_RDWR) \u003c0.000059\u003e\n1490533755.731619 fcntl(9, F_SETFL, O_RDWR|O_NONBLOCK) = 0 \u003c0.000098\u003e\n1490533755.731898 read(9, \"GET / HTTP/1.1\\r\\nUser-Agent: curl\"..., 8000) = 73 \u003c0.000061\u003e\n1490533755.732162 stat(\"/var/www/html/\", {st_mode=S_IFDIR|0755, st_size=23, ...}) = 0 \u003c0.000068\u003e\n1490533755.732467 stat(\"/var/www/html/index.html\", {st_mode=S_IFREG|0644, st_size=12, ...}) = 0 \u003c0.000059\u003e\n1490533755.732663 open(\"/var/www/html/index.html\", O_RDONLY|O_CLOEXEC) = 10 \u003c0.000084\u003e\n1490533755.732874 read(9, 0x7fa371536278, 8000) = -1 EAGAIN (Resource temporarily unavailable) \u003c0.000053\u003e\n1490533755.733033 mmap(NULL, 12, PROT_READ, MAP_SHARED, 10, 0) = 0x7fa36f7a4000 \u003c0.000052\u003e\n1490533755.733168 writev(9, [{\"HTTP/1.1 200 OK\\r\\nDate: Sun, 26 M\"..., 240}, {\"hello world\\n\", 12}], 2) = 252 \u003c0.001855\u003e\n1490533755.735228 munmap(0x7fa36f7a4000, 12) = 0 \u003c0.000064\u003e\n1490533755.735395 write(7, \"::1 - - [26/Mar/2017:13:09:15 +0\"..., 79) = 79 \u003c0.000075\u003e\n1490533755.735559 times({tms_utime=0, tms_stime=0, tms_cutime=0, tms_cstime=0}) = 431041330 \u003c0.000058\u003e\n1490533755.735809 close(10)             = 0 \u003c0.000056\u003e\n1490533755.735956 poll([{fd=9, events=POLLIN}], 1, 5000) = 1 ([{fd=9, revents=POLLIN}]) \u003c0.000051\u003e\n1490533755.736094 read(9, \"\", 8000)     = 0 \u003c0.000048\u003e\n1490533755.736223 shutdown(9, SHUT_WR)  = 0 \u003c0.000118\u003e\n1490533755.736412 poll([{fd=9, events=POLLIN}], 1, 2000) = 1 ([{fd=9, revents=POLLIN|POLLHUP}]) \u003c0.000049\u003e\n1490533755.736557 read(9, \"\", 512)      = 0 \u003c0.000045\u003e\n1490533755.736664 close(9)              = 0 \u003c0.000155\u003e\n1490533755.736885 read(5, 0x7ffc8fdf43ff, 1) = -1 EAGAIN (Resource temporarily unavailable) \u003c0.000040\u003e\n1490533755.736998 accept4(4,\n\n\n# ファイルに出力する\n$ sudo strace -tttT -p 12010 -o test.log\n\n# 統計情報を表示する\n$ sudo strace -p 21479 -c\nstrace: Process 21479 attached\n^Cstrace: Process 21479 detached\n% time     seconds  usecs/call     calls    errors syscall\n------ ----------- ----------- --------- --------- ----------------\n  0.00    0.000000           0         8           futex\n  0.00    0.000000           0         1           epoll_wait\n------ ----------- ----------- --------- --------- ----------------\n100.00    0.000000                     9           total\n```\n\nプロセスが呼び出すシステムコールをトレースする。\nこのときシステムコールがエラーになる箇所を探すと、不具合の手掛かりになる。\n\n## ltrace\n\n- 共有ライブラリの関数呼び出しをトレースする\n- 仕組み\n  - 環境変数 PATH をたどって実行バイナリの絶対パスを調べる\n  - バイナリと依存しているすべての共有ライブラリを elfutils を用いて読み込み、関数のシンボル名とその PLT 内のアドレスのリストを取得する\n  - fork して子プロセス内で ptrace(PTRACE_TRACEME, ...) をセットし、それからバイナリを実行する\n    - ptrace は、実行中のプロセスに対して、レジスタの書き換えやメモリ上のデータの書き換えといった操作ができるシステムコール\n  - wait() で待っている親プロセスに SIGTRAP が伝わる\n  - 親プロセスでは先ほど作っておいたリストを元に、各関数の PLT の該当アドレスにブレークポイント命令 (i386 では 0xcc) を書き込む 。このとき、書き換える前の値を保存しておく\n  - これにより子プロセスが共有ライブラリの関数を呼び出すたびに SIGTRAP が発生するので、親プロセスはループ内で wait で SIGTRAP を待って適宜ブレークポイントしつつ、子プロセスが終了するまでループを回す\n  - PLT (Procedure Linkage Table) には ELF の共有ライブラリの関数を呼び出すときに必ず経由するコードが各関数ごとに用意されています。\n    - ltrace はこの PLT にブレークポイントを書き込むことによって、共有ライブラリの関数呼び出しをフックしています。\n\n```bash\n# コマンドをトレースする\n$ sudo ltrace wget http://127.0.0.1/\n\n# ファイルに出力する\n$ sudo ltrace -o log.txt wget http://127.0.0.1/\n```\n\n## lsof\n\nファイルディスクリプタを使っているプロセスを調べる\n\n```\n$ sudo lsof -i:80\nCOMMAND   PID   USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\nhttpd   12009   root    4u  IPv6  31227      0t0  TCP *:http (LISTEN)\nhttpd   12010 apache    4u  IPv6  31227      0t0  TCP *:http (LISTEN)\nhttpd   12011 apache    4u  IPv6  31227      0t0  TCP *:http (LISTEN)\nhttpd   12012 apache    4u  IPv6  31227      0t0  TCP *:http (LISTEN)\nhttpd   12013 apache    4u  IPv6  31227      0t0  TCP *:http (LISTEN)\nhttpd   12014 apache    4u  IPv6  31227      0t0  TCP *:http (LISTEN)\n\n```\n\n## sar\n\nSystem Activity Reporter\n\n```bash\n$ sar -n TCP,ETCP,DEV 1\n```\n\n## iotop\n\n```bash\n$ sudo iotop\nTotal DISK READ :       0.00 B/s | Total DISK WRITE :       0.00 B/s\nActual DISK READ:       0.00 B/s | Actual DISK WRITE:       0.00 B/s\n  TID  PRIO  USER     DISK READ  DISK WRITE  SWAPIN     IO\u003e    COMMAND\n24094 be/4 root        0.00 B/s    0.00 B/s  0.00 %  0.03 % [kworker/0:2]\n23552 be/4 apache      0.00 B/s    0.00 B/s  0.00 %  0.00 % httpd -DFOREGROUND\n    1 be/4 root        0.00 B/s    0.00 B/s  0.00 %  0.00 % systemd --system --deserialize 41\n    2 be/4 root        0.00 B/s    0.00 B/s  0.00 %  0.00 % [kthreadd]\n    3 be/4 root        0.00 B/s    0.00 B/s  0.00 %  0.00 % [ksoftirqd/0]\n```\n\n## slabtop\n\n- スラブアロケータのメモリ利用量\n- https://www.ibm.com/developerworks/jp/linux/library/l-linux-slab-allocator/\n\n```bash\n$ slabtop\nActive / Total Objects (% used)    : 772062 / 781600 (98.8%)\n Active / Total Slabs (% used)      : 15524 / 15524 (100.0%)\n Active / Total Caches (% used)     : 65 / 97 (67.0%)\n Active / Total Size (% used)       : 83137.34K / 84572.69K (98.3%)\n Minimum / Average / Maximum Object : 0.01K / 0.11K / 15.88K\n\n  OBJS ACTIVE  USE OBJ SIZE  SLABS OBJ/SLAB CACHE SIZE NAME\n128860 127969  99%    0.02K    758      170      3032K fsnotify_event_holder\n125440 124298  99%    0.03K    980      128      3920K kmalloc-32\n 98304  97251  98%    0.01K    192      512       768K kmalloc-8\n 86751  86751 100%    0.19K   4131       21     16524K dentry\n 75387  75387 100%    0.10K   1933       39      7732K buffer_head\n 73984  72910  98%    0.06K   1156       64      4624K kmalloc-64\n 57856  56381  97%    0.02K    226      256       904K kmalloc-16\n 31977  31977 100%    0.08K    627       51      2508K selinux_inode_security\n 16980  16980 100%    1.06K   1132       15     18112K xfs_inode\n 13962  13962 100%    0.15K    537       26      2148K xfs_ili\n 12077  11813  97%    0.58K    929       13      7432K inode_cache\n 11700  11700 100%    0.11K    325       36      1300K sysfs_dir_cache\n  8892   8650  97%    0.21K    494       18      1976K vm_area_struct\n  7462   7462 100%    0.57K    533       14      4264K radix_tree_node\n```\n\n## pcstat\n\n- https://github.com/tobert/pcstat\n- ページキャッシュ統計を表示する\n- データベースなどのパフォーマンス分析で使える\n\n```bash\ncurl -L -o pcstat https://github.com/tobert/pcstat/raw/2014-05-02-01/pcstat.x86_64\nchmod 755 pcstat\n$ ~/pcstat data*\n|-----------+----------------+------------+-----------+---------|\n| Name      | Size           | Pages      | Cached    | Percent |\n|-----------+----------------+------------+-----------+---------|\n| data00    | 6682           | 2          | 2         | 100.000 |\n| data01    | 12127          | 3          | 3         | 100.000 |\n| data02    | 11876          | 3          | 3         | 100.000 |\n|-----------+----------------+------------+-----------+---------|\n```\n\n## tiptop\n\n- VM では利用できない（PMCs が enabled である必要がある)\n- Mcycle: CPU cycles\n- Minst: Instructions\n- IPC(Instructions Per Clock cycle): Executed instructions per cycle\n- %MISS: Cache miss per instructions (in %)\n- %BMIS: Branch misprediction per instruction (in %)\n\n```\n$ tiptop\ntiptop -                                                        [root]\nTasks: 241 total,   2 displayed                                                                     screen  0: default\n\n  PID [ %CPU] %SYS    P   Mcycle   Minstr   IPC  %MISS  %BMIS  %BUS COMMAND\n 3092+   0.5   0.0    0     1.84     1.35  0.73   0.97   0.95   0.1 beam.smp\n 2386+   0.5   0.0    0     0.24     0.09  0.38   8.95   1.11   0.3 mysqld\n```\n\n## atop\n\n- top ライクなツールだが、top よりも細かいシステム情報がわかる\n- cpu の irq や memory, disk, network の利用量まで見れる\n\n```\n$ atop\nATOP - benchmark-1-hostname                                                        2017/03/27  03:32:38                                                        -----------                                                        10s elapsed\nPRC | sys    0.01s |  user   0.01s |              |               | #proc     82 |  #trun      2 |              | #tslpi    98  | #tslpu     0 |               | #zombie    0 | clones     0  |              |               | no  procacct |\nCPU | sys       0% |  user      0% |              |  irq       0% |              |  idle    100% |              | wait      0%  |              |               | steal     0% | guest     0%  | curf 3.20GHz |               | curscal   ?% |\nCPL | avg1    0.00 |               | avg5    0.02 |               | avg15   0.05 |               |              | csw      139  |              | intr      96  |              |               |              | numcpu     1  |              |\nMEM | tot     3.5G |  free    2.9G | cache 478.9M |  dirty   0.0M | buff    0.9M |  slab   87.3M | slrec  60.1M | shmem  16.4M  | shrss   0.0M | shswp   0.0M  |              | vmbal   0.0M  |              | hptot   0.0M  | hpuse   0.0M |\nSWP | tot     0.0M |  free    0.0M |              |               |              |               |              |               |              |               |              |               | vmcom 244.9M | vmlim   1.8G  |              |\nNET | transport    |  tcpi       1 | tcpo       1 |               | udpi       0 |  udpo       0 | tcpao      0 | tcppo      0  |              | tcprs      0  | tcpie      0 | tcpor      0  | udpnp      0 |               | udpie      0 |\nNET | network      |  ipi        1 |              |  ipo        1 | ipfrw      0 |               | deliv      1 |               |              |               |              |               | icmpi      0 | icmpo      0  |              |\nNET | eth0    ---- |  pcki       6 |              |  pcko       1 | si    0 Kbps |  so    1 Kbps |              | coll       0  | mlti       0 |               | erri       0 | erro       0  | drpi       5 |               | drpo       0 |\n\n  PID              TID            SYSCPU            USRCPU             VGROW              RGROW            RUID                EUID                 THR             ST            EXC            S             CPU            CMD         1/1\n  817                -             0.00s             0.01s                0K                 0K            root                root                   5             --              -            S              0%            tuned\n22222                -             0.01s             0.00s                0K                 4K            fabric              fabric                 1             --              -            R              0%            atop\n    1                -             0.00s             0.00s                0K                 0K            root                root                   1             --              -            S              0%            systemd\n```\n\n## dstat\n\n- dstat は python で書かれており、python でプラグインも組み込むことができる\n\n```\n# 表示オプション\n# -t: タイムスタンプ\n# -a: よく使う基本オプション詰め合わせ(cdngy)\n# -c: CPU使用率を表示する\n# -d: DiskIOを表示する\n# -g: ページIN/OUTを表示する(sと一緒に使用する）\n# -s: swapのused/freeを表示する\n# -m: メモリ使用量を表示する\n# -i: 割り込みを表示\n# -p: run, blk, new のプロセス数を表示する\n# -y: 割り込み回数とコンテキストスイッチの回数を表示する\n\n# フィルタリングオプション\n# -C: 特定のコアだけ見る(e.g. -C 0,1,total)\n# -D: 特定のディスクデバイスだけ見る(e.g. -D sda)\n# -N: 特定のネットワークインターフェイスだけ見る(e.g. -N eth0)\n# -I: 特定の割り込みだけ見る(e.g. -I 25)\n\n# その他オプション\n# --output dstat.csv: csvでファイルに書き込む\n\n$ sudo dstat -tai\n\n# -f: 各CPU、インターフェースごとにすべて表示\n$ sudo dstat -taf\n\n# cpuを使ってるプロセスを見る\n$ sudo dstat -ta --top-cpu\n# プロセスのpid, read, writeも表示する\n$ sudo dstat -ta --top-cpu-adv\n\n# ioを使ってるプロセスを見る\n$ sudo dstat -ta --top-io --top-bio\n# プロセスのpid, cpu使用率も表示する\n$ sudo dstat -ta --top-io-adv --top-bio-adv\n\n# vmstat like\n$ sudo dstat -tv\n\n# システム情報や、プラグイン情報を表示\n$ dstat -V\nDstat 0.7.2\nWritten by Dag Wieers \u003cdag@wieers.com\u003e\nHomepage at http://dag.wieers.com/home-made/dstat/\n\nPlatform posix/linux2\nKernel 3.10.0-327.el7.x86_64\nPython 2.7.5 (default, Nov 20 2015, 02:00:19)\n[GCC 4.8.5 20150623 (Red Hat 4.8.5-4)]\n\nTerminal type: xterm-256color (color support)\nTerminal size: 32 lines, 237 columns\n\nProcessors: 1\nPagesize: 4096\nClock ticks per secs: 100\n\ninternal:\n        aio, cpu, cpu24, disk, disk24, disk24old, epoch, fs, int, int24, io, ipc, load, lock, mem, net, page, page24, proc, raw, socket, swap, swapold, sys, tcp, time, udp, unix, vm\n/usr/share/dstat:\n        battery, battery-remain, cpufreq, dbus, disk-tps, disk-util, dstat, dstat-cpu, dstat-ctxt, dstat-mem, fan, freespace, gpfs, gpfs-ops, helloworld, innodb-buffer, innodb-io, innodb-ops, lustre, memcache-hits, mysql-io,\n        mysql-keys, mysql5-cmds, mysql5-conn, mysql5-io, mysql5-keys, net-packets, nfs3, nfs3-ops, nfsd3, nfsd3-ops, ntp, postfix, power, proc-count, qmail, rpc, rpcd, sendmail, snooze, squid, test, thermal, top-bio, top-bio-adv,\n        top-childwait, top-cpu, top-cpu-adv, top-cputime, top-cputime-avg, top-int, top-io, top-io-adv, top-latency, top-latency-avg, top-mem, top-oom, utmp, vm-memctl, vmk-hba, vmk-int, vmk-nic, vz-cpu, vz-io, vz-ubc, wifi\n```\n\n## blktrace\n\n- blktrace はブロック I/O レイヤの入口と出口, そして内部での I/O リクエストの状態をトレースすることができる\n- I/O リクエストは以下のようなパスを通りデバイスへたどり着きます\n  - アプリケーション -\u003e [ファイルシステム -\u003e ページキャッシュ -\u003e ブロック I/O レイヤ -\u003e デバイスドライバ] -\u003e デバイス\n- I/O スケジューラにより I/O リクエストの並び換えや連接ブロックへの I/O リクエストのマージ等が行われているため、ブロック I/O レイヤの入口と出口では I/O リクエストの順番が異なります\n\n```bash\n# デバイスをトレースする\n$ sudo blktrace -d /dev/sda -o test\n\n# トレースした結果を見る\n$ blkparse -i test.blktrace.0\n```\n\n## /proc\n\nMany raw kernel counters\n\n```bash\n\n```\n\n## perf\n\n- 参考: [perf Examples](http://www.brendangregg.com/perf.html)\n- 様々なイベントをトレースできる\n\n```\n# システムのプロファイル\n$ perf top\nSamples: 544  of event 'cpu-clock', Event count (approx.): 39421099\nOverhead  Shared Object                       Symbol\n   9.44%  [kernel]                            [k] _raw_spin_unlock_irqrestore\n   4.81%  perf                                [.] perf_evsel__parse_sample\n   4.50%  libslang.so.2.2.4                   [.] SLsmg_write_chars\n   3.30%  perf                                [.] symbols__insert\n   3.24%  [kernel]                            [k] __do_softirq\n   3.00%  [kernel]                            [k] finish_task_switch\n\n# トレースできるイベント一覧を表示\n$ perf list\n\n# イベントを記録する(ローカルにperf.dataというバイナリで保存される)\n$ perf record -e block:block_rq_issue -ag\n$ ls -l perf.data\n-rw-------. 1 root root 316332  4譛・ 2 12:50 perf.data\n\n# 記録した結果を表示する\n$ perf report\n\n# パフォーマンスカウンタを記録し、表示する\n$ sudo perf stat -a\n^C\n Performance counter stats for 'system wide':\n\n       2277.468427      task-clock (msec)         #    1.000 CPUs utilized\n               119      context-switches          #    0.052 K/sec\n                 0      cpu-migrations            #    0.000 K/sec\n                 4      page-faults               #    0.002 K/sec\n   \u003cnot supported\u003e      cycles\n   \u003cnot supported\u003e      instructions\n   \u003cnot supported\u003e      branches\n   \u003cnot supported\u003e      branch-misses\n\n       2.277409566 seconds time elapsed\n```\n\n## numastat\n\n- 参考: [numastat](https://access.redhat.com/documentation/ja-JP/Red_Hat_Enterprise_Linux/7/html/Performance_Tuning_Guide/sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference-numastat.html)\n- NUMA ノードベースでオペレーティングシステムとプロセッサーのメモリー統計情報 (割り当てヒットとミスなど) を表示する\n- numactl で管理者は指定したスケジュールまたはメモリー配置ポリシーでプロセスを実行することができる。\n- numactl は共有メモリーセグメントやファイルに永続的なポリシーを設定したり、プロセスのプロセッサー親和性やメモリー親和性を設定することもできる。\n\n## CPU の周波数を確認\n\n```\n$ cat /proc/cpuinfo | egrep \"processor|cpu MHz\"\nprocessor       : 0\ncpu MHz         : 1375.675\nprocessor       : 1\ncpu MHz         : 1379.284\nprocessor       : 2\ncpu MHz         : 1443.587\nprocessor       : 3\ncpu MHz         : 1454.012\nprocessor       : 4\ncpu MHz         : 1545.231\nprocessor       : 5\ncpu MHz         : 1438.988\nprocessor       : 6\ncpu MHz         : 1546.319\nprocessor       : 7\ncpu MHz         : 1450.727\nprocessor       : 8\ncpu MHz         : 1544.963\nprocessor       : 9\ncpu MHz         : 1523.568\nprocessor       : 10\ncpu MHz         : 1545.989\nprocessor       : 11\ncpu MHz         : 1546.597\n```\n\n## SystemTap\n\n- SystemTap は、実行している Linux カーネルで簡易情報を取得できるようにするツール\n- パフォーマンスまたは機能（バグ）の問題に関する情報を取得するために使用する\n","UpdatedAt":"2021-05-30T22:01:59.637444+09:00"},{"Text":"# patch\n\n- テキストファイルに patch ファイル(差分ファイル)適用するためのコマンド\n- patch ファイルは diff, git diff, git format-patch などで出力したものをそのまま利用できる\n\n```\n# dir配下全て対象にpatchを適用する\n$ cd [dir]\n$ patch -p 1 \u003c [patchfile]\n\n\n# 特定のファイルにpatchを適用する\n$ patch [targetfile] [patchfile]\n```\n","UpdatedAt":"2021-05-30T22:01:59.6384486+09:00"},{"Text":"# rsync\n\n\n## How\n\n```\n$ rsync [options] [src] [dest]\n```\n\n* basic options\n  * -n: dryrun\n  * -r: recuresive\n  * -v: verbose\n  * --delete: delete file\n  * --exclude [pattern]: exclude file pattern\n\n* options for file attributes\n  * -t: timestamp\n  * -p: permission\n  * -g: group\n  * -o: owner\n\n\n## Examples\n\n```\n$ rsync -r --delete --exclude *node_modules* hoge/ hoge.com:hoge/\n```\n","UpdatedAt":"2021-05-30T22:01:59.6394463+09:00"},{"Text":"# sar\n\n## sar のデータ収集\n\n```\n# sar -o [file] [収集間隔]\n$ sar -o /tmp/sar.data 1\nLinux 5.3.0-59-generic (owner-desktop)  06/27/20        _x86_64_        (12 CPU)\n\n18:04:36        CPU     %user     %nice   %system   %iowait    %steal     %idle\n18:04:37        all      0.58      0.00      0.17      0.08      0.00     99.17\n18:04:38        all      0.08      0.00      0.08      0.08      0.00     99.75\n^C\n\nAverage:        all      0.33      0.00      0.13      0.08      0.00     99.46\n```\n\n## Processor の統計を表示\n\n```\n$ sar -P ALL -f /tmp/sar.data\n18:04:37        CPU     %user     %nice   %system   %iowait    %steal     %idle\n18:04:38        all      0.08      0.00      0.08      0.08      0.00     99.75\n18:04:38          0      1.01      0.00      0.00      0.00      0.00     98.99\n18:04:38          1      0.00      0.00      0.00      0.00      0.00    100.00\n18:04:38          2      0.00      0.00      0.00      0.00      0.00    100.00\n18:04:38          3      0.00      0.00      0.00      0.00      0.00    100.00\n18:04:38          4      0.00      0.00      0.00      0.00      0.00    100.00\n18:04:38          5      0.00      0.00      0.00      0.00      0.00    100.00\n18:04:38          6      0.00      0.00      0.00      0.00      0.00    100.00\n18:04:38          7      0.00      0.00      0.00      0.00      0.00     99.01\n18:04:38          8      0.00      0.00      0.00      0.00      0.00    100.00\n18:04:38          9      0.00      0.00      0.00      0.00      0.00    100.00\n18:04:38         10      0.00      0.00      0.00      0.00      0.00    100.00\n18:04:38         11      0.00      0.00      0.00      0.00      0.00    100.00\n\nAverage:        CPU     %user     %nice   %system   %iowait    %steal     %idle\nAverage:        all      1.34      0.00      1.09      0.06      0.00     97.52\nAverage:          0      1.54      0.00      1.48      0.07      0.00     96.91\nAverage:          1      1.03      0.00      1.16      0.02      0.00     97.79\nAverage:          2      1.41      0.00      1.16      0.08      0.00     97.35\nAverage:          3      0.98      0.00      1.01      0.02      0.00     97.99\nAverage:          4      1.42      0.00      1.11      0.08      0.00     97.39\nAverage:          5      1.10      0.00      1.08      0.02      0.00     97.80\nAverage:          6      1.86      0.00      1.19      0.09      0.00     96.86\nAverage:          7      1.06      0.00      0.93      0.03      0.00     97.99\nAverage:          8      1.69      0.00      1.06      0.09      0.00     97.16\nAverage:          9      1.26      0.00      0.94      0.04      0.00     97.77\nAverage:         10      1.64      0.00      1.09      0.10      0.00     97.16\nAverage:         11      1.03      0.00      0.87      0.03      0.00     98.06\n\n\n$ sar -P 1 -f /tmp/sar.data\nLinux 5.3.0-59-generic (owner-desktop)  06/27/20        _x86_64_        (12 CPU)\n\n17:49:59        CPU     %user     %nice   %system   %iowait    %steal     %idle\n17:50:00          1      0.00      0.00      0.00      0.00      0.00    100.00\n17:50:01          1      0.00      0.00      3.96      0.00      0.00     96.04\n17:50:02          1      0.00      0.00      1.01      0.00      0.00     98.99\n17:50:03          1      0.00      0.00      0.00      0.00      0.00    100.00\n17:50:04          1      0.99      0.00      0.99      0.00      0.00     98.02\n18:02:54          1      1.04      0.00      1.18      0.02      0.00     97.76\n18:02:55          1      1.00      0.00      1.00      0.00      0.00     98.00\n18:02:56          1      0.00      0.00      0.99      0.00      0.00     99.01\n18:02:57          1      0.00      0.00      0.00      0.00      0.00    100.00\n18:04:12          1      1.14      0.00      1.10      0.04      0.00     97.72\n18:04:13          1      0.99      0.00      0.99      0.00      0.00     98.02\n18:04:14          1      0.00      0.00      0.00      0.00      0.00    100.00\n18:04:36          1      0.49      0.00      1.12      0.00      0.00     98.39\n18:04:37          1      0.00      0.00      1.00      0.00      0.00     99.00\n18:04:38          1      0.00      0.00      0.00      0.00      0.00    100.00\nAverage:          1      1.03      0.00      1.16      0.02      0.00     97.79\n```\n\n```\n# CPU utilization の統計表示\n# 各CPUごとの統計は表示できない\n$ sar -u ALL -f /tmp/sar.data\n17:49:59        CPU      %usr     %nice      %sys   %iowait    %steal      %irq     %soft    %guest    %gnice     %idle\n17:50:00        all      0.50      0.00      0.42      0.08      0.00      0.00      0.00      0.00      0.00     99.00\n17:50:01        all      3.36      0.00      3.02      0.08      0.00      0.00      0.50      0.00      0.00     93.04\n17:50:02        all      1.50      0.00      1.83      0.00      0.00      0.00      0.33      0.08      0.00     96.25\n17:50:03        all      0.08      0.00      0.08      0.08      0.00      0.00      0.00      0.00      0.00     99.75\n17:50:04        all      0.75      0.00      0.34      0.00      0.00      0.00      0.00      0.00      0.00     98.91\n```\n\n```\n# run queue, load, blockedの表示\n$ sar -q -f /tmp/sar.data\nLinux 5.3.0-59-generic (owner-desktop)  06/27/20        _x86_64_        (12 CPU)\n\n17:49:59      runq-sz  plist-sz   ldavg-1   ldavg-5  ldavg-15   blocked\n17:50:00            0      1208      0.69      0.90      0.85         0\n17:50:01            1      1211      0.69      0.90      0.85         0\n17:50:02            0      1208      0.69      0.90      0.85         0\n17:50:03            0      1207      0.69      0.90      0.85         0\n```\n\n```\n# 新規プロセス、コンテキストスイッチ数の統計\n$ sar -w -f /tmp/sar.data\nLinux 5.3.0-59-generic (owner-desktop)  06/27/20        _x86_64_        (12 CPU)\n\n17:49:59       proc/s   cswch/s\n17:50:00         0.00   4185.00\n17:50:01        80.00  14469.00\n17:50:02        42.00   5804.00\n17:50:03         0.00   2970.00\n17:50:04         0.00   4581.00\n18:02:54        22.54   5556.08\n```\n\n## Intterupt の統計を表示\n\n```\n$ sar -I SUM -f /tmp/sar.data\nLinux 5.3.0-59-generic (owner-desktop)  06/27/20        _x86_64_        (12 CPU)\n\n17:49:59         INTR    intr/s\n18:04:36          sum   2835.24\n18:04:37          sum   2142.57\n18:04:38          sum   1267.00\nAverage:          sum   2786.64\n```\n\n## Ram の統計を表示\n\n```\n$ sar -r -f /tmp/sar.data\nLinux 5.3.0-59-generic (owner-desktop)  06/27/20        _x86_64_        (12 CPU)\n\n17:49:59    kbmemfree   kbavail kbmemused  %memused kbbuffers  kbcached  kbcommit   %commit  kbactive   kbinact   kbdirty\n17:50:00      6272068  13265084  26611600     80.93   1569972   4888756  15236556     43.56   4948240   3887872      1292\n17:50:01      6269248  13262356  26614420     80.94   1569992   4889024  15228380     43.53   4949268   3888120      1424\n17:50:02      6268852  13262132  26614816     80.94   1569996   4888980  15226268     43.53   4948312   3888112      1508\n17:50:03      6268852  13262132  26614816     80.94   1570004   4888972  15226268     43.53   4948312   3888112      1528\n17:50:04      6268820  13262160  26614848     80.94   1570008   4889068  15226268     43.53   4948324   3888160       596\n18:02:54      6250076  13278444  26633592     80.99   1575604   4917732  15216468     43.50   4939084   3916632       880\n18:02:55      6251572  13280080  26632096     80.99   1575604   4917900  15215952     43.50   4937044   3916764       784\n18:02:56      6251472  13279988  26632196     80.99   1575624   4917940  15215952     43.50   4936844   3916768       980\n18:02:57      6251472  13280048  26632196     80.99   1575624   4917976  15215952     43.50   4936844   3916828      1188\n18:04:12      6247672  13280116  26635996     81.00   1576124   4921188  15225500     43.53   4938660   3918024      1196\n18:04:13      6248200  13280660  26635468     81.00   1576136   4921212  15225500     43.53   4939004   3918032      1236\n18:04:14      6248160  13280728  26635508     81.00   1576140   4921340  15225500     43.53   4939724   3918124      1364\n18:04:36      6248076  13281644  26635592     81.00   1576288   4922088  15224396     43.52   4939700   3918932       788\n18:04:37      6247816  13281440  26635852     81.00   1576300   4922148  15224396     43.52   4939836   3918984       832\n18:04:38      6247816  13281508  26635852     81.00   1576300   4922236  15224396     43.52   4939840   3919052       912\nAverage:      6256011  13274568  26627657     80.98   1573981   4909771  15223850     43.52   4941936   3907901      1101\n\n$ sar -r ALL -f /tmp/sar.data\nLinux 5.3.0-59-generic (owner-desktop)  06/27/20        _x86_64_        (12 CPU)\n\n17:49:59    kbmemfree   kbavail kbmemused  %memused kbbuffers  kbcached  kbcommit   %commit  kbactive   kbinact   kbdirty  kbanonpg    kbslab  kbkstack   kbpgtbl  kbvmused\n17:50:00      6272068  13265084  26611600     80.93   1569972   4888756  15236556     43.56   4948240   3887872      1292   2377444    786148     19568     41176     41236\n17:50:01      6269248  13262356  26614420     80.94   1569992   4889024  15228380     43.53   4949268   3888120      1424   2378452    786112     19568     41576     41364\n```\n\n```\n$ sar -B -f /tmp/sar.data\nLinux 5.3.0-59-generic (owner-desktop)  06/27/20        _x86_64_        (12 CPU)\n\n17:49:59     pgpgin/s pgpgout/s   fault/s  majflt/s  pgfree/s pgscank/s pgscand/s pgsteal/s    %vmeff\n17:50:00         0.00    988.00      3.00      0.00     12.00      0.00      0.00      0.00      0.00\n17:50:01         0.00   2080.00  24595.00      0.00  19305.00      0.00      0.00      0.00      0.00\n17:50:02         0.00    776.00  13042.00      0.00  11286.00      0.00      0.00      0.00      0.00\n17:50:03         0.00   3160.00      0.00      0.00      7.00      0.00      0.00      0.00      0.00\n```\n\n```\n# Swapの統計\n$ sar -S -f /tmp/sar.data\n17:49:59    kbswpfree kbswpused  %swpused  kbswpcad   %swpcad\n17:50:00      2097148         0      0.00         0      0.00\n17:50:01      2097148         0      0.00         0      0.00\n17:50:02      2097148         0      0.00         0      0.00\n```\n\n```\n# Hugepageの使用量を表示\n$ sar -H -f /tmp/sar.data\nLinux 5.3.0-59-generic (owner-desktop)  06/27/20        _x86_64_        (12 CPU)\n\n17:49:59    kbhugfree kbhugused  %hugused\n17:50:00      9437184   7340032     43.75\n17:50:01      9437184   7340032     43.75\n17:50:02      9437184   7340032     43.75\n```\n\n## Device の統計を表示\n\n```\n# deviceのIO統計\n$ sar -d -f /tmp/sar.data\n18:04:37          DEV       tps     rkB/s     wkB/s   areq-sz    aqu-sz     await     svctm     %util\n18:04:38       dev7-0      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\n18:04:38       dev7-1      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\n```\n\n```\n# blockのIO統計\n$ sar -b -f /tmp/sar.data\nLinux 5.3.0-59-generic (owner-desktop)  06/27/20        _x86_64_        (12 CPU)\n\n17:49:59          tps      rtps      wtps   bread/s   bwrtn/s\n17:50:00        86.00      0.00     86.00      0.00   1976.00\n17:50:01        71.00      0.00     71.00      0.00   4160.00\n17:50:02        20.00      0.00     20.00      0.00   1552.00\n```\n\n```\n# FileSystemの使用量\n$ sar -F -f /tmp/sar.data\n18:04:37     MBfsfree  MBfsused   %fsused  %ufsused     Ifree     Iused    %Iused FILESYSTEM\n18:04:38       133273     73879     35.66     40.78  12187951   1353425      9.99 /dev/nvme0n1p1\n18:04:38            0         0    100.00    100.00         0       230    100.00 /dev/loop0\n\nSummary:       133273     73879     35.66     40.78  12187951   1353425      9.99 /dev/nvme0n1p1\nSummary:            0         0    100.00    100.00         0       230    100.00 /dev/loop0\nSummary:            0       162    100.00    100.00         0     27798    100.00 /dev/loop2\n```\n\n## Network の統計を表示\n\n```\n# -n { \u003ckeyword\u003e [,...] | ALL }\n#  DEV     Network interfaces\n#  EDEV    Network interfaces (errors)\n#  NFS     NFS client\n#  NFSD    NFS server\n#  SOCK    Sockets (v4)\n#  IP      IP traffic      (v4)\n#  EIP     IP traffic      (v4) (errors)\n#  ICMP    ICMP traffic    (v4)\n#  EICMP   ICMP traffic    (v4) (errors)\n#  TCP     TCP traffic     (v4)\n#  ETCP    TCP traffic     (v4) (errors)\n#  UDP     UDP traffic     (v4)\n#  SOCK6   Sockets (v6)\n#  IP6     IP traffic      (v6)\n#  EIP6    IP traffic      (v6) (errors)\n#  ICMP6   ICMP traffic    (v6)\n#  EICMP6  ICMP traffic    (v6) (errors)\n#  UDP6    UDP traffic     (v6)\n#  FC      Fibre channel HBAs\n#  SOFT    Software-based network processing\n\n# Deviceの統計\n$ sar -n DEV -f /tmp/sar.data\n18:04:12        IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s   %ifutil\n18:04:13      enp31s0      2.00      3.00      0.12      0.37      0.00      0.00      0.00      0.00\n18:04:13     com-1-ex      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\n18:04:13     com-2-ex      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\n18:04:13           lo     93.00     93.00    208.85    208.85      0.00      0.00      0.00      0.00\n18:04:13     com-4-ex      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\n18:04:13      docker0      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\n18:04:13     com-0-ex      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\n\nAverage:        IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s   %ifutil\nAverage:      enp31s0      2.14      4.01      0.15      1.61      0.00      0.00      0.06      0.00\nAverage:     com-1-ex      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\nAverage:     com-2-ex      0.01      0.01      0.00      0.00      0.00      0.00      0.00      0.00\nAverage:           lo    187.55    187.55     73.62     73.62      0.00      0.00      0.00      0.00\nAverage:     com-4-ex      0.01      0.01      0.00      0.00      0.00      0.00      0.00      0.00\nAverage:      docker0      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\nAverage:     com-0-ex      0.02      0.02      0.00      0.00      0.00      0.00      0.00      0.00\n\n# DeviceのError統計\n$ sar -n EDEV -f /tmp/sar.data\n18:04:38      enp31s0      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\n18:04:38     com-1-ex      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\n18:04:38     com-2-ex      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\n18:04:38           lo      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\n18:04:38     com-4-ex      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\n18:04:38      docker0      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\n18:04:38     com-0-ex      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\n\nAverage:        IFACE   rxerr/s   txerr/s    coll/s  rxdrop/s  txdrop/s  txcarr/s  rxfram/s  rxfifo/s  txfifo/s\nAverage:      enp31s0      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\nAverage:     com-1-ex      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\nAverage:     com-2-ex      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\nAverage:           lo      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\nAverage:     com-4-ex      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\nAverage:      docker0      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\nAverage:     com-0-ex      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\n\n\n# TCPの統計\n$ sar -n TCP,ETCP -f /tmp/sar.data\nLinux 5.3.0-59-generic (owner-desktop)  06/27/20        _x86_64_        (12 CPU)\n\n17:49:59     active/s passive/s    iseg/s    oseg/s\n18:04:12         0.40      0.40    191.28    191.70\n18:04:13         0.00      0.00     95.00     96.00\n18:04:14         1.00      1.00    155.00    178.00\n18:04:36         0.45      0.45    193.76    194.83\n18:04:37         0.00      0.00    251.49    250.50\n18:04:38         0.00      0.00    107.00    107.00\nAverage:         0.41      0.41    189.54    191.48\n\n17:49:59     atmptf/s  estres/s retrans/s isegerr/s   orsts/s\n18:04:12         0.00      0.40      0.00      0.00      0.40\n18:04:13         0.00      0.00      0.00      0.00      0.00\n18:04:14         0.00      0.00      0.00      0.00      0.00\n18:04:36         0.00      0.45      0.00      0.00      0.45\n18:04:37         0.00      0.00      0.00      0.00      0.00\n18:04:38         0.00      0.00      0.00      0.00      0.00\nAverage:         0.00      0.40      0.01      0.00      0.40\n\n\n# SOCKの統計\n$ sar -n SOCK -f /tmp/sar.data\nLinux 5.3.0-59-generic (owner-desktop)  06/27/20        _x86_64_        (12 CPU)\n\n17:49:59       totsck    tcpsck    udpsck    rawsck   ip-frag    tcp-tw\n17:50:00         1101       274         4         0         0         0\n17:50:01         1103       274         4         0         0         0\n17:50:02         1101       274         4         0         0         0\n17:50:03         1101       274         4         0         0         0\n```\n\n## Power Management の統計\n\n```\n# -m { \u003ckeyword\u003e [,...] | ALL }\n#                 Power management statistics\n#                 Keywords are:\n#                 CPU     CPU instantaneous clock frequency\n#                 FAN     Fans speed\n#                 FREQ    CPU average clock frequency\n#                 IN      Voltage inputs\n#                 TEMP    Devices temperature\n#                 USB     USB devices plugged into the system\n```\n\n```\n# CPUの周波数\n$ sar -m CPU -f /tmp/sar.data\n17:49:59        CPU       MHz\n17:50:00        all   1509.11\n17:50:01        all   1788.33\n17:50:02        all   1882.69\n17:50:03        all   1475.06\n```\n\n```\n# FANの速度\n$ sar -m FAN -f /tmp/sar.data\n17:49:59          FAN       rpm      drpm DEVICE\n17:50:00            1    603.00    603.00 nouveau-pci-2300\n17:50:01            1    573.00    573.00 nouveau-pci-2300\n17:50:02            1    554.00    554.00 nouveau-pci-2300\n17:50:03            1    530.00    530.00 nouveau-pci-2300\n```\n\n```\n# Deviceの温度\n$ sar -m TEMP -f /tmp/sar.data\n17:49:59         TEMP      degC     %temp DEVICE\n17:50:00            1     35.75     51.07 k10temp-pci-00c3\n17:50:00            2     35.75      0.00 k10temp-pci-00c3\n17:50:00            3     44.00     46.32 nouveau-pci-2300\n17:50:01            1     44.75     63.93 k10temp-pci-00c3\n17:50:01            2     44.75      0.00 k10temp-pci-00c3\n17:50:01            3     44.00     46.32 nouveau-pci-2300\n\nAverage:            1     38.46     54.94 k10temp-pci-00c3\nAverage:            2     38.46      0.00 k10temp-pci-00c3\nAverage:            3     44.00     46.32 nouveau-pci-2300\n```\n\n## sar の定期実行\n\n- sa1 というワンショットのコマンドを cron によって実行する\n\n```\n# 設定ファイルを有効化しておく\n$ sudo sed -i 's/ENABLED=\"false\"/ENABLED=\"true\"/g' /etc/default/sysstat\n```\n\n```\n# sarのログファイルは以下に保存される\n$ ls /var/log/sysstat\nsa27\n```\n\n```\n# devian用のsa1みると、上記の設定ファイルをenableにしない限り、devian-sa1を実行してもなにも起こらない\n$ cat /usr/lib/sysstat/debian-sa1\n#!/bin/sh\n# vim:ts=2:et\n# Debian sa1 helper which is run from cron.d job, not to needlessly\n# fill logs (see Bug#499461).\n\nset -e\n\n# Global variables:\n#\n#  our configuration file\nDEFAULT=/etc/default/sysstat\n#  default setting, overriden in the above file\nENABLED=false\n\n# Read defaults file\nif [ -r \"$DEFAULT\" ]; then\n  . \"$DEFAULT\"\nfi\n\nif [ \"true\" = \"$ENABLED\" ]; then\n  exec /usr/lib/sysstat/sa1 \"$@\"\nfi\n\nexit 0\n```\n\n- sysstat をインストールすると cron によって定期的に debian-sa1 を実行するよう設定される\n\n```\n$ cat /etc/cron.d/sysstat\n# The first element of the path is a directory where the debian-sa1\n# script is located\nPATH=/usr/lib/sysstat:/usr/sbin:/usr/sbin:/usr/bin:/sbin:/bin\n\n# Activity reports every 10 minutes everyday\n5-55/10 * * * * root command -v debian-sa1 \u003e /dev/null \u0026\u0026 debian-sa1 1 1\n\n# Additional run at 23:59 to rotate the statistics file\n59 23 * * * root command -v debian-sa1 \u003e /dev/null \u0026\u0026 debian-sa1 60 2\n```\n\n- 起動時に sysstat が実行されるように設定する\n- これは、起動時の統計を集計するためのワンショット\n\n```\n$ sudo systemctl enable sysstat\n\n# これをrestartすると、sysstatとしてはサーバがリスタートしたと記録するため、むやみに実行してはいけない\n# $ sudo systemctl restart sysstat\n```\n\n```\n$ sudo cat /lib/systemd/system/sysstat.service\n# /lib/systemd/system/sysstat.service\n# (C) 2012 Peter Schiffer (pschiffe \u003cat\u003e redhat.com)\n# (C) 2017 Robert Luberda \u003crobert@debian.org\u003e\n#\n# sysstat systemd unit file:\n#        Insert a dummy record in current daily data file.\n#        This indicates that the counters have restarted from 0.\n\n[Unit]\nDescription=Resets System Activity Data Collector\nDocumentation=man:sa1(8) man:sadc(8) man:sar(1)\n\n[Service]\nType=oneshot\nRemainAfterExit=yes\nUser=root\nExecStart=/usr/lib/sysstat/debian-sa1 --boot\n\n[Install]\nWantedBy=multi-user.target\n```\n\n## Json で出力する\n\n```\n$ sadf -t -s 19:00 -e 20:00 -j -- -A 2\u003e\u00261\n\n# ファイルを指定する\n$ sadf /tmp/sar.data -t -j -- -A 2\u003e\u00261\n```\n","UpdatedAt":"2021-05-30T22:01:59.6404485+09:00"},{"Text":"# shutdown, reboot\n\n## shutdown\n\n```\n$ shutdown [ -t sec ] [-arkhcfF ] time [ message ] [now]\n\n# システムを停止する\n$ sudo shutdown -h now\n\n# リブートする\n$ sudo shutdown -r now\n\n# 実行中のシャットダウンをキャンセルする\n$ sudo shutdown -c\n```\n\n## reboot\n\n```\n# 通常リブート\n$ sudo reboot\n\n# shutdownを起動せずに、強制的にhaltまたはrebootする\n$ sudo reboot -f\n\n# システムを停止する時に、電源を切る\n$ sudo reboot -p\n```\n","UpdatedAt":"2021-05-30T22:01:59.642444+09:00"},{"Text":"# yum\n\n\n* versionを固定する\n```\n$ yum versionlock docker*\n```\n","UpdatedAt":"2021-05-30T22:01:59.6434469+09:00"}],"IdPathMap":["README.md","apt.md","find.md","git.md","grep.md","iostat.md","ip.md","jq.md","man_tldr.md","network_tcpdump_tshark.md","network_tools.md","observation.md","observation_latency.md","observation_tools_basic.md","observation_tools_intermediate.md","patch.md","rsync.md","sar.md","shutdown_reboot.md","yum.md"],"PathMap":{"README.md":0,"apt.md":1,"find.md":2,"git.md":3,"grep.md":4,"iostat.md":5,"ip.md":6,"jq.md":7,"man_tldr.md":8,"network_tcpdump_tshark.md":9,"network_tools.md":10,"observation.md":11,"observation_latency.md":12,"observation_tools_basic.md":13,"observation_tools_intermediate.md":14,"patch.md":15,"rsync.md":16,"sar.md":17,"shutdown_reboot.md":18,"yum.md":19}}