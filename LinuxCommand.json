{"Entry":0,"TokenDocumentIndexMap":null,"IdTextMap":[{"Text":"# Linux Commands\n\n- Linux で利用できるコマンドや、ツール類についてまとめる\n\n## Contents\n\n| Link                                   | Description                          |\n| -------------------------------------- | ------------------------------------ |\n| [Basic](basic/README.md)               | 基本的なコマンド集                   |\n| [Network](network/README.md)           | ネットワーク関連のコマンドやツール類 |\n| [CI/CD](cicd/README.md)                | CI/CD 関連のコマンドやツール類       |\n| [Observation](observation/README.md)   | 観測について                         |\n| [Benchmarking](benchmarking/README.md) | ベンチマークついて                   |\n","UpdatedAt":"2021-04-04T12:38:18.021244+09:00"},{"Text":"# Basic Commands\n\n| Link              | Description            |\n| ----------------- | ---------------------- |\n| [apt](apt.md)     | apt                    |\n| [yum](yum.md)     | yum                    |\n| [grep](grep.md)   | grep, grep して sed    |\n| [find](find.md)   | find, find して rename |\n| [rsync](rsync.md) | rsync                  |\n","UpdatedAt":"2021-04-04T12:30:02.1219967+09:00"},{"Text":"# apt\n\n## パッケージ検索\n\n```\n$ apt-cache search libibver\n```\n\n## インストール済みのパッケージ検索\n\n```\n$ dpkg -l\n```\n\n- ii: インストール済み\n- iU: インストール済み\n- rc: 設定ファイルだけ残ってる状態\n  - 以下で設定ファイルも含めてすべて削除できる\n  - sudo apt remove --purge packagename\n\n## History\n\n```\n$ less /var/log/apt/history.log\n/usr/bin/unattended-upgrade\n```\n\n## Disable downloading translations\n\n```\n$ cat \u003c\u003cEOS | dd of=/etc/apt/apt.conf.d/99translations\nAcquire::Languages \"none\";\nEOS\n```\n\n## Auto upgrades\n\n- 自動更新の除外設定\n\n```\n$ vim /etc/apt/apt.conf.d/50unattended-upgrades\n// List of packages to not update (regexp are supported)\nUnattended-Upgrade::Package-Blacklist {\n    \"vim\";\n//\u003e_\"libc6\";\n//\u003e_\"libc6-dev\";\n//\u003e_\"libc6-i686\";\n};\n```\n\n## Add repository\n\n```\n$ cat \u003c\u003cEOS | dd of=/etc/apt/sources.list.d/syunkitada-aptrepo.list\ndeb [trusted=yes] http://hogepiyo/hoge/amd64/ ./\nEOS\n```\n","UpdatedAt":"2021-04-04T14:18:11.2744096+09:00"},{"Text":"# find\n\n## find して rename する\n\n```\n$ find ./ -iname '*hoge*' | xargs rename 's/hoge/piyo/g'\n```\n\n## 全ファイルの tab を space に置換する\n\n```\n$ find ./ -type f | xargs sed -i 's/\\t/        /g'\n```\n","UpdatedAt":"2021-03-15T21:55:34.801795+09:00"},{"Text":"# grep\n\n\n## grepしてsedする\n```\n$ grep -l hoge * -r | xargs sed -i 's/hoge/piyo/g'\n```\n","UpdatedAt":"2021-03-15T21:55:34.8057924+09:00"},{"Text":"# jq\n","UpdatedAt":"2021-03-15T21:55:34.8100236+09:00"},{"Text":"# man/tldr\n\n## man\n\n```\n$ man curl\n```\n\n## tldr\n\n```bash\n$ tldr curl\ncurl\nTransfers data from or to a server.\nSupports most protocols, including HTTP, FTP, and POP3.\nMore information:\nhttps://curl.haxx.se\n.\n\n - Download the contents of an URL to a file:\n    curl {{http://example.com}} -o {{filename}}\n\n - Download a file, saving the output under the filename indicated by the URL:\n    curl -O {{http://example.com/filename}}\n\n - Download a file, following [L]ocation redirects, and automatically [C]ontinuing (resuming) a previous file transfer:\n    curl -O -L -C - {{http://example.com/filename}}\n```\n","UpdatedAt":"2021-03-15T21:55:34.8110261+09:00"},{"Text":"# rsync\n\n\n## How\n\n```\n$ rsync [options] [src] [dest]\n```\n\n* basic options\n  * -n: dryrun\n  * -r: recuresive\n  * -v: verbose\n  * --delete: delete file\n  * --exclude [pattern]: exclude file pattern\n\n* options for file attributes\n  * -t: timestamp\n  * -p: permission\n  * -g: group\n  * -o: owner\n\n\n## Examples\n\n```\n$ rsync -r --delete --exclude *node_modules* hoge/ hoge.com:hoge/\n```\n","UpdatedAt":"2021-03-15T21:55:34.823743+09:00"},{"Text":"# shutdown, reboot\n\n## shutdown\n\n```\n$ shutdown [ -t sec ] [-arkhcfF ] time [ message ] [now]\n\n# システムを停止する\n$ sudo shutdown -h now\n\n# リブートする\n$ sudo shutdown -r now\n\n# 実行中のシャットダウンをキャンセルする\n$ sudo shutdown -c\n```\n\n## reboot\n\n```\n# 通常リブート\n$ sudo reboot\n\n# shutdownを起動せずに、強制的にhaltまたはrebootする\n$ sudo reboot -f\n\n# システムを停止する時に、電源を切る\n$ sudo reboot -p\n```\n","UpdatedAt":"2021-03-15T21:55:34.8269455+09:00"},{"Text":"# yum\n\n\n* versionを固定する\n```\n$ yum versionlock docker*\n```\n","UpdatedAt":"2021-03-15T21:55:34.8281215+09:00"},{"Text":"# Linux Benchmarking\n\n## Benchmarking Tools\n\n| Link                                                         | Target                                                                   | Description                                               |\n| ------------------------------------------------------------ | ------------------------------------------------------------------------ | --------------------------------------------------------- |\n| [wrk](wrk.md): [GitHub](https://github.com/wg/wrk)           | Web server                                                               | マルチコアで利用でき、高い RPS をはじき出せるのでオススメ |\n| [ApacheBench](apachebench.md)                                | Web server                                                               | CPU を使い切れず、正しい RPS を測定できないので微妙       |\n| [Siege](siege.md): [GitHub](https://github.com/JoeDog/siege) | Web server                                                               | CPU を使い切れず、正しい RPS を測定できないので微妙       |\n| [sysbench](sysbench.md)                                      | CPU, Scheduler, File Systems                                             |                                                           |\n| [unixbench](unixbench.md)                                    | CPU, Scheduler                                                           |                                                           |\n| [lmbench](lmbench.md)                                        | CPU, Scheduler, DRAM, MemoryBus, System Call Interface, Sockets, TCP/UDP |\n| [iperf3](iperf3.md)                                          | Netowrk                                                                  | スループットや TCP の再送が起こってるかなどを測定できる   |\n| [mtr](mtr.md)                                                | Network                                                                  |                                                           |\n| [fio](fio.md)                                                | File Systems                                                             | iops の測定                                               |\n| [dd]()                                                       |                                                                          |                                                           |\n| [hdparam]()                                                  |                                                                          |                                                           |\n\n## Tuning\n\n| Link                                | Desctiption               |\n| ----------------------------------- | ------------------------- |\n| [Tuning について](tuning/README.md) | Tuning についてのうんちく |\n| [IO](tuning/io.md)                  | IO                        |\n\n## References\n\n- [クラウドでのネットワーク レイテンシの測定](https://cloudblog.withgoogle.com/ja/products/networking/using-netperf-and-ping-to-measure-network-latency/amp/)\n","UpdatedAt":"2021-04-04T12:45:06.5317168+09:00"},{"Text":"# apache bench(ab)\n\nabは、Apache Benchの略で、Apacheに標準でついてくるベンチマークツールです。\n\n## Install\n``` bash\n# Install centos\n$ yum install httpd\n\n# Install ubuntu\n$ sudo apt-get install apache2-utils\n```\n\n## Run ab\n```\n$ ab -n 1000 -c 100 http://192.168.122.101/\n\n# Options\n$ ab -h\nUsage: ab [options] [http[s]://]hostname[:port]/path\nOptions are:\n    -n requests     Number of requests to perform\n    -c concurrency  Number of multiple requests to make at a time\n    -t timelimit    Seconds to max. to spend on benchmarking\n                    This implies -n 50000\n    -s timeout      Seconds to max. wait for each response\n                    Default is 30 seconds\n    -b windowsize   Size of TCP send/receive buffer, in bytes\n    -B address      Address to bind to when making outgoing connections\n    -p postfile     File containing data to POST. Remember also to set -T\n    -u putfile      File containing data to PUT. Remember also to set -T\n    -T content-type Content-type header to use for POST/PUT data, eg.\n                    'application/x-www-form-urlencoded'\n                    Default is 'text/plain'\n    -v verbosity    How much troubleshooting info to print\n    -w              Print out results in HTML tables\n    -i              Use HEAD instead of GET\n    -x attributes   String to insert as table attributes\n    -y attributes   String to insert as tr attributes\n    -z attributes   String to insert as td or th attributes\n    -C attribute    Add cookie, eg. 'Apache=1234'. (repeatable)\n    -H attribute    Add Arbitrary header line, eg. 'Accept-Encoding: gzip'\n                    Inserted after all normal header lines. (repeatable)\n    -A attribute    Add Basic WWW Authentication, the attributes\n                    are a colon separated username and password.\n    -P attribute    Add Basic Proxy Authentication, the attributes\n                    are a colon separated username and password.\n    -X proxy:port   Proxyserver and port number to use\n    -V              Print version number and exit\n    -k              Use HTTP KeepAlive feature\n    -d              Do not show percentiles served table.\n    -S              Do not show confidence estimators and warnings.\n    -q              Do not show progress when doing more than 150 requests\n    -g filename     Output collected data to gnuplot format file.\n    -e filename     Output CSV file with percentages served\n    -r              Don't exit on socket receive errors.\n    -h              Display usage information (this message)\n    -Z ciphersuite  Specify SSL/TLS cipher suite (See openssl ciphers)\n    -f protocol     Specify SSL/TLS protocol\n                    (SSL2, SSL3, TLS1, TLS1.1, TLS1.2 or ALL)\n```\n\n## Run and output\n``` bash\n$ ab -n 1000 -c 100 http://192.168.122.101/\nThis is ApacheBench, Version 2.3 \u003c$Revision: 1430300 $\u003e\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\nLicensed to The Apache Software Foundation, http://www.apache.org/\n\nBenchmarking 192.168.122.101 (be patient)\nCompleted 100 requests\nCompleted 200 requests\nCompleted 300 requests\nCompleted 400 requests\nCompleted 500 requests\nCompleted 600 requests\nCompleted 700 requests\nCompleted 800 requests\nCompleted 900 requests\nCompleted 1000 requests\nFinished 1000 requests\n\n\nServer Software:        Apache/2.4.6\nServer Hostname:        192.168.122.101\nServer Port:            80\n\nDocument Path:          /\nDocument Length:        4897 bytes\n\nConcurrency Level:      100\nTime taken for tests:   0.273 seconds\nComplete requests:      1000\nFailed requests:        0\nWrite errors:           0\nNon-2xx responses:      1000\nTotal transferred:      5168000 bytes\nHTML transferred:       4897000 bytes\nRequests per second:    3667.19 [#/sec] (mean)\nTime per request:       27.269 [ms] (mean)\nTime per request:       0.273 [ms] (mean, across all concurrent requests)\nTransfer rate:          18507.87 [Kbytes/sec] received\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        0    1   1.8      0       7\nProcessing:     1   25   5.1     25      34\nWaiting:        1   25   5.1     25      34\nTotal:          6   26   4.4     26      35\n\nPercentage of the requests served within a certain time (ms)\n  50%     26\n  66%     28\n  75%     29\n  80%     30\n  90%     32\n  95%     33\n  98%     34\n  99%     34\n 100%     35 (longest request)\n```\n\n## Output\n* Server Software  \n    The value, if any, returned in the server HTTP header of the first successful response. This includes\n    all  characters  in the header from beginning to the point a character with decimal value of 32 (most\n    notably: a space or CR/LF) is detected.\n* Server Hostname  \n    The DNS or IP address given on the command line\n* Server Port  \n    The port to which ab is connecting. If no port is given on the command line, this will default to  80\n    for http and 443 for https.\n* SSL/TLS Protocol  \n    The protocol parameters negotiated between the client and server. This will only be printed if SSL is\n    used.\n* Document Path  \n    The request URI parsed from the command line string.\n* Document Length  \n    This is the size in bytes of the first successfully returned document. If the document length changes\n    during testing, the response is considered an error.\n* Concurrency Level  \n    The number of concurrent clients used during the test\n* Time taken for tests  \n    This  is the time taken from the moment the first socket connection is created to the moment the last\n    response is received\n* __Complete requests__  \n    The number of successful responses received\n* __Failed requests__  \n    The number of requests that were considered a failure. If the number is greater  than  zero,  another\n    line will be printed showing the number of requests that failed due to connecting, reading, incorrect\n    content length, or exceptions.\n* Write errors  \n    The number of errors that failed during write (broken pipe).\n* Non-2xx responses  \n    The number of responses that were not in the 200 series of response codes. If all responses were 200,\n    this field is not printed.\n* Keep-Alive requests  \n    The number of connections that resulted in Keep-Alive requests\n* Total body sent  \n    If  configured  to  send  data as part of the test, this is the total number of bytes sent during the\n    tests. This field is omitted if the test did not include a body to send.\n* Total transferred  \n    The total number of bytes received from the server. This number is essentially the  number  of  bytes\n    sent over the wire.\n* HTML transferred  \n    The  total  number of document bytes received from the server. This number excludes bytes received in\n    HTTP headers\n* __Requests per second__  \n    This is the number of requests per second. This value  is  the  result  of  dividing  the  number  of\n    requests by the total time taken\n* __Time per request__  \n    The  average  time  spent  per  request. The first value is calculated with the formula concurrency *\n    timetaken * 1000 / done while the second value is calculated with the formula timetaken * 1000 / done\n* Transfer rate  \n    The rate of transfer as calculated by the formula totalread / 1024 / timetaken\n\n\n## rpsを最大化するためのoption最適化\n* request数(-n)は一定以上上げないと、rpsの最大値を求められない\n* ただし、やみくもに上げすぎても意味はないので最適値で検証するとよい\n``` bash\n$ ab -n 10000 -c 1 http://127.0.0.1/\nRequests per second:    18387.59 [#/sec] (mean)\n\n$ ab -n 100000 -c 1 http://127.0.0.1/\nRequests per second:    21382.16 [#/sec] (mean)\n\n$ ab -n 500000 -c 1 http://127.0.0.1/\nRequests per second:    21124.96 [#/sec] (mean)\n```\n\n* concurencyは一定以上上げないと、rpsの最大値を求められない\n* ベンチマークの際にmpstatを投げておいて、CPUを使い切ってるか確認するとよい\n``` bash\n$ ab -n 100000 -c 2 http://127.0.0.1/\nRequests per second:    32741.26 [#/sec] (mean)\n\n$ ab -n 100000 -c 4 http://127.0.0.1/\nRequests per second:    34753.32 [#/sec] (mean)\n\n$ ab -n 100000 -c 8 http://127.0.0.1/\nRequests per second:    34433.86 [#/sec] (mean)\n\n$ mpstat 1 -P ALL\nCPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle\nall   18.81    0.00   48.51    0.00    0.00   18.81    0.00    0.00    0.00   13.86\n  0   23.23    0.00   47.47    0.00    0.00    8.08    0.00    0.00    0.00   21.21\n  1   14.85    0.00   50.50    0.00    0.00   28.71    0.00    0.00    0.00    5.94\n\nCPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle\nall   21.13    0.00   46.39    0.00    0.00   24.74    0.00    0.00    0.00    7.73\n  0   30.53    0.00   44.21    0.00    0.00    9.47    0.00    0.00    0.00   15.79\n  1   13.00    0.00   47.00    0.00    0.00   40.00    0.00    0.00    0.00    0.00\n```\n","UpdatedAt":"2021-04-04T12:27:46.949328+09:00"},{"Text":"# fio\n* IOのベンチマークツール\n* flexible I/O testerの略\n* 作者: [Jens Axboe](https://github.com/axboe)\n    * Facebookに在籍してるらしい\n\n\n## Contents\n| Link | Description |\n| --- | --- |\n| [Install](#Install)               | |\n| [Hello World](#Hello World)       | |\n| [パラメータメモ](#パラメータメモ) | |\n| [fio_job.ini](fio_job.ini)        | |\n| [結果の見方](#結果の見方)         | |\n| [参考](#参考)                     | |\n\n\n\n## Install\n``` bash\n# Install centos\n$ yum install epel-release\n$ yum install fio\n\n# Install ubuntu\n$ sudo apt-get install fio\n```\n\n\n## Hello World\n```\n$ cat fio_job.ini\n[global]\nioengine=libaio\niodepth=1\nsize=16g\ndirect=1\nruntime=60\ndirectory=/tmp\nfilename=fio-diskmark\nstonewall\n\n[seq-read-1m]\nbs=1m\nrw=read\n\n# 基本\n$ fio fio_job.ini\n\n# 結果をjsonで出力させる\n$ fio --output=fio_out.json --output-format=json fio_job.ini\n\n# 特定jobのみ実行する場合\n$ fio --output=fio_out.json --output-format=json --section=seq-read-1m fio_job.ini\n```\n\n\n## パラメータメモ\n詳細は、man fioを見ること\n* ioengine=\u003cioengine\u003e\n    * libaio\n        * Linux nativeの非同期I/O（基本的にはこれを選べばOK)\n* direct=\u003c0, 1\u003e\n    * 1で有効にすると、non-buffered I/O (usually O_DIRECT)になる\n    * 基本的なIOはバッファが利用されるが、結果がブレるのでバッファは無効(1で有効)にするのが良い\n    * また、高いIOを必要とするデータベースのようなシステムは、基本的にOSのバッファを使わない\n* rw=\u003cread, write, randread, randwrite\u003e\n    * すべてのパターンで計測すべき\n* iodepth=\u003cint\u003e\n    * ファイルに対するIO書き込みのユニット数\n    * 何パターンかで計測すべき\n* numjobs=\u003cint\u003e\n    * 何パターンかで計測すべき\n* bs=\u003cdefault: 4k\u003e\n    * ブロックサイズ\n    * 何パターンかで計測すべき\n* directory\n    * 測定で利用するディレクトリ\n    * 測定したいデバイスのディレクトリを指定する\n* finename\n    * 測定で利用するファイル(directoryの配下に作られる)\n    * 適当でOK\n* size\n    * 測定で利用するファイルのサイズ\n    * 適当に16g 取っておけばOK\n* runtime\n    * jobの最大実行時間\n* stonewall\n    * jobがエラーで終了すると残りのジョブも終了する\n* clat_percentiles=\u003c0, 1\u003e\n    * 1で有効にすると、clat(リクエスト送信してから終了までのLatency)の99 percentileを取る\n\n\n## fio_job.ini\n```\n[global]\nioengine=libaio\ndirect=1\niodepth=1\nnumjobs=1\nbs=4k\nsize=16g\ndirectory=/opt/sdb/fio\nfilename=fio-diskmark\nruntime=60\nstonewall\nclat_percentiles=1\n\n[seq-read-1m]\nbs=1m\nrw=read\n\n[seq-write-1m]\nbs=1m\nrw=write\n\n[seq-read-1m-qd32]\niodepth=32\nbs=1m\nrw=read\n\n[seq-write-1m-qd32]\niodepth=32\nbs=1m\nrw=write\n\n[rand-read-512]\nbs=512\nrw=randread\n\n[rand-write-512]\nbs=512\nrw=randwrite\n\n[rand-read-4k]\nbs=4k\nrw=randread\n\n[rand-write-4k]\nbs=4k\nrw=randwrite\n\n[rand-read-512k]\nbs=512k\nrw=randread\n\n[rand-write-512k]\nbs=512k\nrw=randwrite\n\n[rand-read-4k-qd8]\niodepth=8\nbs=4k\nrw=randread\n\n[rand-write-4k-qd8]\niodepth=8\nbs=4k\nrw=randwrite\n\n[rand-read-4k-qd32]\niodepth=32\nbs=4k\nrw=randread\n\n[rand-write-4k-qd32]\niodepth=32\nbs=4k\nrw=randwrite\n\n[rand-read-4k-qd32-j8]\niodepth=32\nnumjobs=8\nbs=4k\nrw=randread\n\n[rand-write-4k-qd32-j8]\niodepth=32\nnumjobs=8\nbs=4k\nrw=randwrite\n\n[rand-read-4k-qd32-j32]\niodepth=32\nnumjobs=32\nbs=4k\nrw=randread\n\n[rand-write-4k-qd32-j32]\niodepth=32\nnumjobs=32\nbs=4k\nrw=randwrite\n```\n\n\n## 結果の見方\n* iops\n    * 1秒あたりのアクセス数\n    * 基本的にこれだけ見ればディスクのIO性能がわかる\n        * bw、iopsから逆算できる(bw = bs * iops)\n* clat(msec)\n    * complettion latency(リクエスト送信から終了までのLatency)\n    * 99 percentileを見ておく\n        * 99.99までのLatencyが妙に離れていないか？\n        * もし、離れていればディスク不良などのために、外れ値が多く混ざった可能性がある\n* 上記の参考値をいくつかとっておき、基準を作り妥当性を検証できるようにするとよい\n    * メーカが公表しているデータとも比較すべき\n* もし、数値がおかしければ、disk_utilやcpu, ctxなどの情報も見ておかしいところがないかチェックする\n* また、smartctlなどのdiskチェックツールでエラーが出ないか確認する\n\n\n## 参考\n* [fioコマンド] http://tasuku.hatenablog.jp/entry/2016/02/21/163903\n    * [FIOコマンドで利用できるパラメータ](http://tasuku.hatenablog.jp/entry/2016/02/20/174537)\n","UpdatedAt":"2021-04-04T12:27:46.9423303+09:00"},{"Text":"# fio report\n\n| device                         | seq-read-1m | seq-write-1m | rand-read-4k | rand-write-4k | rand-read-4k-qd32 | rand-write-4k-qd32 |\n| --- | --- | --- | --- | --- | --- | --- |\n| Colorful SL500 320GB(SATA SSD) | 242.26      | 342.47       | 4912.22      | 28827.69      | 33928.65          | 48096.11           |\n","UpdatedAt":"2021-04-04T12:27:46.9113552+09:00"},{"Text":"# iperf3\n\n## Install\n``` bash\n$ sudo yum install iperf3\n```\n\n## Server側\n```\n# -s: サーバモードで起動\n# -V: 詳細なレポートを出す\n$ sudo iperf3 -sV\niperf 3.1.6\nLinux benchmark-2-hostname 3.10.0-327.el7.x86_64 #1 SMP Thu Nov 19 22:10:57 UTC 2015 x86_64\n-----------------------------------------------------------\nServer listening on 5201\n-----------------------------------------------------------\n```\n\n\n## Client側\n``` bash\n# -V: 詳細なレポートを出す\n# -t: 実行時間（秒)\n# -l: パケットサイズ、defaultは128K\n$ iperf3 -c 192.168.122.102 -t 3 -V -l 128K\niperf 3.1.6\nLinux benchmark-1-hostname 3.10.0-327.el7.x86_64 #1 SMP Thu Nov 19 22:10:57 UTC 2015 x86_64\nControl connection MSS 1448\nTime: Sun, 02 Apr 2017 10:40:15 GMT\nConnecting to host 192.168.122.102, port 5201\n      Cookie: benchmark-1-hostname.1491129615.6758\n      TCP MSS: 1448 (default)\n[  4] local 192.168.122.101 port 42374 connected to 192.168.122.102 port 5201\nStarting Test: protocol: TCP, 1 streams, 131072 byte blocks, omitting 0 seconds, 3 second test\n[ ID] Interval           Transfer     Bandwidth       Retr  Cwnd\n[  4]   0.00-1.00   sec  1.70 GBytes  14.6 Gbits/sec    0   3.05 MBytes\n[  4]   1.00-2.00   sec  1.72 GBytes  14.8 Gbits/sec    0   3.05 MBytes\n[  4]   2.00-3.00   sec  1.72 GBytes  14.8 Gbits/sec    0   3.05 MBytes\n- - - - - - - - - - - - - - - - - - - - - - - - -\nTest Complete. Summary Results:\n[ ID] Interval           Transfer     Bandwidth       Retr\n[  4]   0.00-3.00   sec  5.14 GBytes  14.7 Gbits/sec    0             sender\n[  4]   0.00-3.00   sec  5.14 GBytes  14.7 Gbits/sec                  receiver\nCPU Utilization: local/sender 26.0% (1.0%u/25.2%s), remote/receiver 26.8% (4.5%u/22.5%s)\nsnd_tcp_congestion cubic\nrcv_tcp_congestion cubic\n\niperf Done.\n```\n\n\n## パラメータ\n```\n# メモ\niperf\n-length 128k\n-parallel {1,2,4,8,16,32}\n-time 30s\n``\n\n\n## 結果の見方\n* iperfのClient, Serverが性能を出し切れるかによっても結果も異なってくるので注意する\n    * -Z: Zerocopyを有効にする\n    * -A: Affinityを設定する（できればカーネルでisolしたものを使うとよいかも)\n* Transfer（送信パケットサイズ）\n* Bandwidth(スループット)\n    * -l で指定できるパケットサイズによって結果は異なる\n    * ショートパケット有利、ラージパケット有利な環境などあるので、いろいろなパターンで測定すべき\n* Retr(TCPの再送回数)\n    * 多いと問題\n* CPU Utilization\n    * CPUの使用率が高いと、それが原因で結果がサチるので確認する\n","UpdatedAt":"2021-04-04T12:27:46.9163613+09:00"},{"Text":"# lmbench\n\n\nhttp://www.bitmover.com/lmbench/\n\nhttps://www.ibm.com/developerworks/community/wikis/home?lang=en#!/wiki/W51a7ffcf4dfd_4b40_9d82_446ebc23c550/page/Untangling%20memory%20access%20measurements%20-%20memory%20latency\n\n\n$ lat_mem_rd 100m 128 \u003e out.latencies\n","UpdatedAt":"2021-04-04T12:27:46.9023543+09:00"},{"Text":"# siege\n\n## Install\n``` bash\n$ sudo yum install -y epel-release\n$ sudo yum install -y siege\n```\n\n## Run siege\n``` bash\n# Access url, by 1 user, in 10 secconds\n$ siege -v -c 1 -t 2S http://192.168.122.101/\n\n# Benchmark random urls from file, by 300 user, in 10 secconds\n$ siege -c 300 -t 10S -b -i --log=/tmp/siege.log -f urls.txt\n\n$ cat urls.txt\nhttps://sample.jp\nhttps://sample.jp/search/tag\nhttps://sample.jp/id/test\n\n\n# Options\nUsage: siege [options]\n       siege [options] URL\n       siege -g URL\nOptions:\n  -V, --version             VERSION, prints the version number.\n  -h, --help                HELP, prints this section.\n  -C, --config              CONFIGURATION, show the current config.\n  -v, --verbose             VERBOSE, prints notification to screen.\n  -q, --quiet               QUIET turns verbose off and suppresses output.\n  -g, --get                 GET, pull down HTTP headers and display the\n                            transaction. Great for application debugging.\n  -c, --concurrent=NUM      CONCURRENT users, default is 10\n  -r, --reps=NUM            REPS, number of times to run the test.\n  -t, --time=NUMm           TIMED testing where \"m\" is modifier S, M, or H\n                            ex: --time=1H, one hour test.\n  -d, --delay=NUM           Time DELAY, random delay before each requst\n  -b, --benchmark           BENCHMARK: no delays between requests.\n  -i, --internet            INTERNET user simulation, hits URLs randomly.\n  -f, --file=FILE           FILE, select a specific URLS FILE.\n  -R, --rc=FILE             RC, specify an siegerc file\n  -l, --log[=FILE]          LOG to FILE. If FILE is not specified, the\n                            default is used: PREFIX/var/siege.log\n  -m, --mark=\"text\"         MARK, mark the log file with a string.\n                            between .001 and NUM. (NOT COUNTED IN STATS)\n  -H, --header=\"text\"       Add a header to request (can be many)\n  -A, --user-agent=\"text\"   Sets User-Agent in request\n  -T, --content-type=\"text\" Sets Content-Type in request\n```\n\n\n## Run and output\n``` bash\n$ siege -v -c 1 -t 2S http://192.168.122.101/\n** SIEGE 4.0.2\n** Preparing 1 concurrent users for battle.\nThe server is now under siege...\nHTTP/1.1 200     0.01 secs:       6 bytes ==\u003e GET  /\nHTTP/1.1 200     0.00 secs:       6 bytes ==\u003e GET  /\nHTTP/1.1 200     0.01 secs:       6 bytes ==\u003e GET  /\nHTTP/1.1 200     0.00 secs:       6 bytes ==\u003e GET  /\nHTTP/1.1 200     0.00 secs:       6 bytes ==\u003e GET  /\n\nLifting the server siege...\nTransactions:                      5 hits\nAvailability:                 100.00 %\nElapsed time:                   1.30 secs\nData transferred:               0.00 MB\nResponse time:                  0.00 secs\nTransaction rate:               3.85 trans/sec\nThroughput:                     0.00 MB/sec\nConcurrency:                    0.02\nSuccessful transactions:           5\nFailed transactions:               0\nLongest transaction:            0.01\nShortest transaction:           0.00\n```\n\n## Output\n* Transactions  \n    This number represents the total number of HTTP requests. In this\n    example, we ran 25 simulated users [-c25] and each ran ten times\n    [-r10]. Twenty-five times ten equals 250 so why is the transaction\n    total 2000? That's because siege counts every request. This run\n    included a META redirect, a 301 redirect and the page it requested\n    contained several elements that were also downloaded.\n* Availability  \n    This is the percentage of socket connections successfully handled\n    by the server. It is the result of socket failures (including\n    timeouts) divided by the sum of all connection attempts. This\n    number does not include 400 and 500 level server errors which are\n    recorded in \"Failed transactions\" described below.\n* Elapsed time  \n    The duration of the entire siege test. This is measured from the\n    time the user invokes siege until the last simulated user\n    completes its transactions. Shown above, the test took 14.67\n    seconds to complete.\n* Data transferred  \n    The sum of data transferred to every siege simulated user. It\n    includes the header information as well as content. Because it\n    includes header information, the number reported by siege will\n    be larger then the number reported by the server. In internet\n    mode, which hits random URLs in a configuration file, this\n    number is expected to vary from run to run.\n* Response time  \n    The average time it took to respond to each simulated user's requests.\n* Transaction rate  \n    The average number of transactions the server was able to handle\n    per second, in a nutshell: it is the count of all transactions\n    divided by elapsed time.\n* Throughput\n    The average number of bytes transferred every second from the\n    server to all the simulated users.\n* Concurrency  \n    This is the average number of simultaneous connections. The metric\n    is calculated like this: the sum of all transaction times divided\n    by elapsed time (how long siege ran)\n* Successful transactions  \n    The number of times the server responded with a return code \u003c 400.\n* Failed transactions  \n    The number of times the socket transactions failed which includes\n    socket timeouts.\n* Longest transaction  \n    The greatest amount of time that any single transaction took, out\n    of all transactions.\n* Shortest transaction  \n    The smallest amount of time that any single transaction took, out\n    of all transactions.\n","UpdatedAt":"2021-04-04T12:27:46.8943607+09:00"},{"Text":"# sysbench\n* file I/O performance\n* scheduler performance\n* memory allocation and transfer speed\n* POSIX threads implementation performance\n* database server performance\n\n\n\n## CentOS7でのインストール実行方法\n```\n# インストール\n$ sudo yum install epel-release\n$ sudo yum install sysbench\n\n# 実行\n$ sysbench --test=cpu run --num-threads=1\n```\n\n\n## 実行オプション\n* sysbench [options]... [testname] [command]\n    * --threads=N                     number of threads to use [1]\n    * --events=N                      limit for total number of events [0]\n    * --time=N                        limit for total execution time in seconds [10]\n    * --forced-shutdown=STRING        number of seconds to wait after the --time limit before forcing shutdown, or 'off' to disable [off]\n    * --thread-stack-size=SIZE        size of stack per thread [64K]\n    * --rate=N                        average transactions rate. 0 for unlimited rate [0]\n    * --debug[=on|off]                print more debugging info [off]\n\n\n## cpu\n* cpuパフォーマンスのベンチマーク\n* 素数探索を上限値(cpu-max-pime)まで行う\n* 実行オプション\n    * --cpu-max-prime=N upper limit for primes generator [10000]\n```\n$ sysbench --threads={1,2,4,...,max_cpu_core} cpu run --cpu-max-prime=100000\nCPU speed:\n    events per second:    50.10\n\nGeneral statistics:\n    total time:                          10.0186s\n    total number of events:              502\n\nLatency (ms):\n         min:                                 19.55\n         avg:                                 19.96\n         max:                                 39.56\n         95th percentile:                     20.00\n         sum:                              10017.89\n\nThreads fairness:\n    events (avg/stddev):           502.0000/0.00\n    execution time (avg/stddev):   10.0179/0.00\n```\n\n\n## threads\n* スケジューラパフォーマンスのベンチマーク\n* sysbenchは、特定数のスレッド(thread-yields)と特定数のmutex(thread-locks)を作成する\n* 各スレッドはmutexをlockするような要求を実行し、CPUを生成し(yields)、スケジューラによってrunキューに戻るとmutexのロック解除する(unlock)\n* 実行オプション\n    * --thread-yields=N number of yields to do per request [1000]\n    * --thread-locks=N  number of locks per thread [8]\n\n```\n$ sysbench --threads=2 threads run --thread-yields=1000 --thread-locks=8\nsysbench 1.0.9 (using system LuaJIT 2.0.4)\n\nRunning the test with following options:\nNumber of threads: 2\nInitializing random number generator from current time\n\n\nInitializing worker threads...\n\nThreads started!\n\n\nGeneral statistics:\n    total time:                          10.0002s\n    total number of events:              115144\n\nLatency (ms):\n         min:                                  0.14\n         avg:                                  0.17\n         max:                                  9.43\n         95th percentile:                      0.20\n         sum:                              19973.25\n\nThreads fairness:\n    events (avg/stddev):           57572.0000/266.00\n    execution time (avg/stddev):   9.9866/0.00\n```\n\n\n\n## mutex\n* mutex実装のパフォーマンスのベンチマーク\n* すべてのスレッドが同時に実行される状況をエミュレートし、短時間で、(グローバル変数をインクリメントして)mutex lockを取得する\n* 実行オプション\n    * --mutex-num=N   total size of mutex array [4096]\n    * --mutex-locks=N number of mutex locks to do per thread [50000]\n    * --mutex-loops=N number of empty loops to do outside mutex lock [10000]\n\n```\n$ sysbench --threads=2 mutex run\nsysbench 1.0.9 (using system LuaJIT 2.0.4)\n\nRunning the test with following options:\nNumber of threads: 2\nInitializing random number generator from current time\n\n\nInitializing worker threads...\n\nThreads started!\n\n\nGeneral statistics:\n    total time:                          0.1270s\n    total number of events:              2\n\nLatency (ms):\n         min:                                120.75\n         avg:                                122.76\n         max:                                124.77\n         95th percentile:                    125.52\n         sum:                                245.52\n\nThreads fairness:\n    events (avg/stddev):           1.0000/0.00\n    execution time (avg/stddev):   0.1228/0.00\n```\n\n\n## memory\n* メモリのベンチマーク\n    * シーケンシャル、ランダムでread、writeを行う\n* オプションに応じて、各スレッドはすべてのメモリ操作に対してブローバルブロック、またはローカルブロックのいずれかにアクセスできる\n* 実行オプション\n    * --memory-block-size=SIZE    size of memory block for test [1K]\n    * --memory-total-size=SIZE    total size of data to transfer [100G]\n    * --memory-scope=STRING       memory access scope {global,local} [global]\n    * --memory-hugetlb[=on|off]   allocate memory from HugeTLB pool [off]\n    * --memory-oper=STRING        type of memory operations {read, write, none} [write]\n    * --memory-access-mode=STRING memory access mode {seq,rnd} [seq]\n```\n$ sysbench --threads=2 memory run --memory-oper=write --memory-access-mode=seq\n```\n\n\n## fileio\n* さまざまな種類のファイルI/Oワークロードでベンチマーク\n* 準備段階で、指定されたサイズの指定された数のファイルを生成し、実行段階で各スレッドがこのファイルセットに対して指定されたI/O操作を実行する\n* --validationオプションを使用すると、sysbenchはディスクから読み取られたすべてのデータに対してチェックサム検証を行う\n    * 書き込み操作では、ブロックにランダムな値が入力されると、チェックサムが計算され、ファイル内のこのブロックのオフセットとともにブロックに格納される\n    * 読み取り操作では、格納されているオフセットと実際のオフセットを比較し、格納されたチェックサムと実際に計算されたチェックサムを比較することによってブロックが検証される\n* I/Oのテストモード\n    * seqwr: sequential write\n    * seqrewr: sequential rewrite\n    * seqrd: sequential read\n    * rndrd: random read\n    * rndwr: random write\n    * rndrw: combined random read/write\n* I/Oのアクセスモード\n    * sync\n    * async\n    * mmap\n* file-extra-flags\n    * sync\n    * dsync\n    * direct\n* 実行オプション\n    * --file-num=N              number of files to create [128]\n    * --file-block-size=N       block size to use in all IO operations [16384]\n    * --file-total-size=SIZE    total size of files to create [2G]\n    * --file-test-mode=STRING   test mode {seqwr, seqrewr, seqrd, rndrd, rndwr, rndrw}\n    * --file-io-mode=STRING     file operations mode {sync,async,mmap} [sync]\n    * --file-async-backlog=N    number of asynchronous operatons to queue per thread [128]\n    * --file-extra-flags=STRING additional flags to use on opening files {sync,dsync,direct} []\n    * --file-fsync-freq=N       do fsync() after this number of requests (0 - don't use fsync()) [100]\n    * --file-fsync-all[=on|off] do fsync() after each write operation [off]\n    * --file-fsync-end[=on|off] do fsync() at the end of test [on]\n    * --file-fsync-mode=STRING  which method to use for synchronization {fsync, fdatasync} [fsync]\n    * --file-merged-requests=N  merge at most this number of IO requests if possible (0 - don't merge) [0]\n    * --file-rw-ratio=N         reads/writes ratio for combined test [1.5]\n\n```\n$ sysbench --num-threads=2 --test=fileio --file-total-size=3G --file-test-mode=rndrw prepare\n$ sysbench --num-threads=2 --test=fileio --file-total-size=3G --file-test-mode=rndrw run\n$ sysbench --num-threads=2 --test=fileio --file-total-size=3G --file-test-mode=rndrw cleanup\n```\n\n\n## oltp\n* データベースパフォーマンスのベンチマーク\n* testモードにはoltpという項目はなく、スクリプト(/usr/share/sysbench/oltp_*)を指定して実行する\n* prepareで、以下のようなデータベースを作成し、runでベンチマークを行い、cleanupでtableを削除する\n\n```\n$ sudo yum install mariadb-server\n$ sudo systemctl start mariadb\n$ mysql -uroot -e 'create database sysbench'\n$ mysql -uroot -e \"GRANT ALL ON sysbench.* TO 'sysbench'@'%' IDENTIFIED BY 'sysbench'\"\n\n$ sysbench --db-driver=mysql --mysql-user=sysbench --mysql-password=sysbench --mysql-socket=/var/lib/mysql/mysql.sock --mysql-db=sysbench --range_size=100   --table_size=10000000 --tables=2 --threads=1 --events=0 --time=60   --rand-type=uniform /usr/share/sysbench/oltp_read_write.lua prepare\n$ sysbench --db-driver=mysql --mysql-user=sysbench --mysql-password=sysbench --mysql-socket=/var/lib/mysql/mysql.sock --mysql-db=sysbench --range_size=100   --table_size=10000000 --tables=2 --threads=1 --events=0 --time=60   --rand-type=uniform /usr/share/sysbench/oltp_read_write.lua run\n$ sysbench --db-driver=mysql --mysql-user=sysbench --mysql-password=sysbench   --mysql-socket=/var/lib/mysql/mysql.sock --mysql-db=sysbench --range_size=100   --table_size=10000000 --tables=2 --threads=1 --events=0 --time=60   --rand-type=uniform /usr/share/sysbench/oltp_read_write.lua cleanup\n\n# ubuntuだとmysqld.sockは以下\n/var/run/mysqld/mysqld.sock\n```\n\n\n## 参考\n* http://imysql.com/wp-content/uploads/2014/10/sysbench-manual.pdf\n* https://github.com/akopytov/sysbench\n","UpdatedAt":"2021-04-04T12:27:46.8773897+09:00"},{"Text":"# sysbench report\n\n```\n# cpu events/ser\n$ sysbench --threads=N cpu run --cpu-max-prime=100000\n\n# memory seq write\n$ sysbench --threads=N memory run --memory-oper=write --memory-access-mode=seq\n\n# memory seq read\n$ sysbench --threads=N memory run --memory-oper=read --memory-access-mode=seq\n\n# memory rnd write\n$ sysbench --threads=N memory run --memory-oper=write --memory-access-mode=rnd\n\n# memory rnd read\n$ sysbench --threads=N memory run --memory-oper=read --memory-access-mode=rnd\n\n# fileio rnd\n$ sysbench --threads=N fileio run --file-total-size=3G --file-test-mode=rndrw\n\n# fileio seq\n$ sysbench --threads=N fileio run --file-total-size=3G --file-test-mode=rndrw\n\n# oltp\n$ sysbench --db-driver=mysql --mysql-user=sysbench --mysql-password=sysbench --mysql-socket=/var/lib/mysql/mysql.sock --mysql-db=sysbench --range_size=100   --table_size=10000 --tables=2 --threads=1 --events=0 --time=60   --rand-type=uniform /usr/share/sysbench/oltp_read_write.lua prepare\n$ sysbench --db-driver=mysql --mysql-user=sysbench --mysql-password=sysbench --mysql-socket=/var/lib/mysql/mysql.sock --mysql-db=sysbench --range_size=100   --table_size=10000 --tables=2 --threads=1 --events=0 --time=60   --rand-type=uniform /usr/share/sysbench/oltp_read_write.lua run\n$ sysbench --db-driver=mysql --mysql-user=sysbench --mysql-password=sysbench   --mysql-socket=/var/lib/mysql/mysql.sock --mysql-db=sysbench --range_size=100   --table_size=10000 --tables=2 --threads=1 --events=0 --time=60   --rand-type=uniform /usr/share/sysbench/oltp_read_write.lua cleanup\n```\n\n| pc            | cpu events/sec | memory seq write | memory seq read | memory rnd write | memory rnd read | rnd reads/s | rnd writes/s | rnd fsyncs/s | rnd read MiB/s | rnd write MiB/s | sql read | sql write | sql other | sql total | sql transaction/sec | sql query/sec |\n| ---           | ---            | ---              | ---             | ---              | ---             | ---         | ---          | ---          | ---            | ---             | ---      | ---       | ---       | ---       | ---                 | ---           |\n| pc1 1core     | 58.52          | 9379.31          | 8323.74         | 2157.58          | 2177.82         | 1169.83     | 779.89       | 2488.55      | 18.28          | 12.19           | 302372   | 86392     | 43196     | 431960    | 359.96              | 7199.13       |\n| pc1 2core     | 115.13         | 6541.71          | 15319.03        | 1293.89          | 4227.58         | 1421.76     | 947.84       | 3030.68      | 22.21          | 14.81           | 301406   | 86116     | 43058     | 430580    | 358.80              | 7176.07       |\n| pc1_vm1 1core | 50.10          | 4221.00          | 4955.26         | 1846.64          | 1833.36         | 581.83      | 387.89       | 1236.14      | 9.09           | 6.06            | 316092   | 90312     | 45156     | 451560    | 376.28              | 7525.63       |\n| pc1_vm1 2core | 99.57          | 6735.93          | 8626.18         | 1364.52          | 3548.30         | 653.70      | 435.97       | 1384.07      | 10.21          | 6.81            | 317128   | 90608     | 45304     | 453040    | 377.51              | 7550.19       |\n\n* memoryの単位: (MiB/sec)\n","UpdatedAt":"2021-04-04T12:27:46.9083549+09:00"},{"Text":"# Tuningについて\n\n\n## 電力効率\n* BMCで消費電力取りながら、ベンチマークを取るとよい\n* CPUやGPUをぶん回すと、性能は上がるが、同時に消費電力は数倍と大きく変わってくる\n","UpdatedAt":"2021-04-04T12:27:46.9323472+09:00"},{"Text":"# IO\n\n\n## デバイスの確認\n* hw_sector_size, logical_block_size, physical_block_sizeが一致することを確認する\n* ファイルシステムのBlock sizeがsector_sizeの倍数であることを確認する\n```\n$ cat /sys/block/sdb/queue/hw_sector_size\n512\n\n$ cat /sys/block/sdb/queue/logical_block_size\n512\n\n$ cat /sys/block/sdb/queue/physical_block_size\n512\n\n$ cat /sys/block/sdb/queue/minimum_io_size\n512\n\n$ cat /sys/block/sdb/queue/optimal_io_size\n0\n\n$ sudo dumpe2fs /dev/sdb | grep 'Block size'\ndumpe2fs 1.42.13 (17-May-2015)\nBlock size:               4096\n\n$ sudo xf_info /dev/sdb | grep 'bsize'\n\n$ sudo tune2fs -l /dev/vdb | grep 'Block size'\n```\n\n\n## scheduler\n* SSDであればnoopがよい(ワークロードによってはdeadlineがよいかも?)\n\n```\n# schedulerの確認\n$ cat /sys/block/sdb/queue/scheduler\n[noop] deadline cfq\n\n# schedulerの書き換え\n$ sudo sh -c 'echo noop \u003e /sys/block/sdb/queue/scheduler'\n\n# scheduler benchmark\n# Colorful SL500 320GB SATA SSD: http://www.links.co.jp/item/sl500-320g/\n# noop                                deadline                             cfq\n\"jobname\" : \"seq-read-1m\",            \"jobname\" : \"seq-read-1m\",             \"jobname\" : \"seq-read-1m\",           \n\"iops\" : 242.26,                      \"iops\" : 241.53,                       \"iops\" : 243.39,                     \n\"jobname\" : \"seq-write-1m\",           \"jobname\" : \"seq-write-1m\",            \"jobname\" : \"seq-write-1m\",          \n\"iops\" : 342.47,                      \"iops\" : 198.10,                       \"iops\" : 152.71,                     \n\"jobname\" : \"rand-read-512\",          \"jobname\" : \"rand-read-512\",           \"jobname\" : \"rand-read-512\",         \n\"iops\" : 5311.66,                     \"iops\" : 5303.65,                      \"iops\" : 5235.26,                    \n\"jobname\" : \"rand-write-512\",         \"jobname\" : \"rand-write-512\",          \"jobname\" : \"rand-write-512\",        \n\"iops\" : 4301.80,                     \"iops\" : 3652.71,                      \"iops\" : 3647.44,                    \n\"jobname\" : \"rand-read-4k\",           \"jobname\" : \"rand-read-4k\",            \"jobname\" : \"rand-read-4k\",          \n\"iops\" : 4912.22,                     \"iops\" : 4866.39,                      \"iops\" : 4844.02,                    \n\"jobname\" : \"rand-write-4k\",          \"jobname\" : \"rand-write-4k\",           \"jobname\" : \"rand-write-4k\",         \n\"iops\" : 28827.69,                    \"iops\" : 18969.70,                     \"iops\" : 18735.44,                   \n\"jobname\" : \"rand-read-512k\",         \"jobname\" : \"rand-read-512k\",          \"jobname\" : \"rand-read-512k\",        \n\"iops\" : 417.90,                      \"iops\" : 423.42,                       \"iops\" : 407.81,                     \n\"jobname\" : \"rand-write-512k\",        \"jobname\" : \"rand-write-512k\",         \"jobname\" : \"rand-write-512k\",       \n\"iops\" : 615.21,                      \"iops\" : 424.08,                       \"iops\" : 511.02,                     \n\"jobname\" : \"rand-read-4k-qd8\",       \"jobname\" : \"rand-read-4k-qd8\",        \"jobname\" : \"rand-read-4k-qd8\",      \n\"iops\" : 21675.44,                    \"iops\" : 21633.24,                     \"iops\" : 21686.74,                   \n\"jobname\" : \"rand-write-4k-qd8\",      \"jobname\" : \"rand-write-4k-qd8\",       \"jobname\" : \"rand-write-4k-qd8\",     \n\"iops\" : 47848.72,                    \"iops\" : 39233.23,                     \"iops\" : 40285.84,                   \n\"jobname\" : \"rand-read-4k-qd32\",      \"jobname\" : \"rand-read-4k-qd32\",       \"jobname\" : \"rand-read-4k-qd32\",     \n\"iops\" : 33928.65,                    \"iops\" : 34082.21,                     \"iops\" : 33977.25,                   \n\"jobname\" : \"rand-write-4k-qd32\",     \"jobname\" : \"rand-write-4k-qd32\",      \"jobname\" : \"rand-write-4k-qd32\",    \n\"iops\" : 48096.11,                    \"iops\" : 40375.18,                     \"iops\" : 32274.46,                   \n\"jobname\" : \"rand-read-4k-qd32-j8\",   \"jobname\" : \"rand-read-4k-qd32-j8\",    \"jobname\" : \"rand-read-4k-qd32-j8\",  \n\"iops\" : 34080.27,                    \"iops\" : 33544.06,                     \"iops\" : 20992.58,                   \n\"jobname\" : \"rand-write-4k-qd32-j8\",  \"jobname\" : \"rand-write-4k-qd32-j8\",   \"jobname\" : \"rand-write-4k-qd32-j8\", \n\"iops\" : 48009.63,                    \"iops\" : 32423.39,                     \"iops\" : 38668.88,                   \n\"jobname\" : \"rand-read-4k-qd32-j32\",  \"jobname\" : \"rand-read-4k-qd32-j32\",   \"jobname\" : \"rand-read-4k-qd32-j32\", \n\"iops\" : 34299.64,                    \"iops\" : 34120.98,                     \"iops\" : 22145.21,                   \n\"jobname\" : \"rand-write-4k-qd32-j32\", \"jobname\" : \"rand-write-4k-qd32-j32\",  \"jobname\" : \"rand-write-4k-qd32-j32\",\n\"iops\" : 39592.68,                    \"iops\" : 40807.77,                     \"iops\" : 31353.79,                   \n```\n","UpdatedAt":"2021-04-04T12:27:46.927342+09:00"},{"Text":"# memory\n\n\n## enable THP\n```\n$ sudo sh -c 'echo always \u003e /sys/kernel/mm/transparent_hugepage/enabled'\n$ cat /sys/kernel/mm/transparent_hugepage/enabled\n[always] madvise never\n\n$ sudo sh -c 'echo always \u003e /sys/kernel/mm/transparent_hugepage/defrag'\n$ cat /sys/kernel/mm/transparent_hugepage/defrag\n[always] madvise never\n\n$ sudo sh -c 'echo 1 \u003e /sys/kernel/mm/transparent_hugepage/khugepaged/defrag'\n$ cat /sys/kernel/mm/transparent_hugepage/khugepaged/defrag\n1\n```\n\n\n## disable THP\n```\n$ sudo sh -c 'echo never \u003e /sys/kernel/mm/transparent_hugepage/enabled'\n$ cat /sys/kernel/mm/transparent_hugepage/enabled\nalways madvise [never]\n\n$ sudo sh -c 'echo never \u003e /sys/kernel/mm/transparent_hugepage/defrag'\n$ cat /sys/kernel/mm/transparent_hugepage/defrag\nalways madvise [never]\n\n$ sudo sh -c 'echo 0 \u003e /sys/kernel/mm/transparent_hugepage/khugepaged/defrag'\n$ cat /sys/kernel/mm/transparent_hugepage/khugepaged/defrag\n0\n```\n","UpdatedAt":"2021-04-04T12:27:46.925341+09:00"},{"Text":"# unixbench\n\n\n## CentOS7でのインストール実行方法\n```\n# インストール\n$ yum -y install perl perl-Time-HiRes make gcc git\n$ git clone https://github.com/kdlucas/byte-unixbench\n$ cd byte-unixbench/UnixBench\n\n# 実行\n$ ./Run\n```\n\n\n## 実行オプション\n* -q  不要な出力を抑止します\n* -v  実行コマンドなどの詳細情報を出力します\n* -i \u003cn\u003e  \u003cn\u003eに繰り返し回数を指定します(指定が無い場合は、10回繰り返されます)\n* -c \u003cn\u003e  \u003cn\u003eに計測時のCPUの数を指定します(指定が無い場合は、1コアの場合と、全てのコアの場合が実行されます)\n\n\n## 16コア以上の測定でははパッチが必要\n```\n$ wget http://storage.googleapis.com/google-code-attachments/byte-unixbench/issue-4/comment-1/fix-limitation.patch\n$ patch Run fix-limitation.patch\n```\n\n\n## 結果の見方\n```\n$ ./Run\n[fabric@benchmark-1 UnixBench]$ ./Run\ngcc -o pgms/arithoh -Wall -pedantic -O3 -ffast-math -march=native -mtune=native -I ./src -DTIME -Darithoh src/arith.c\ngcc -o pgms/register -Wall -pedantic -O3 -ffast-math -march=native -mtune=native -I ./src -DTIME -Ddatum='register int' src/arith.c\ngcc -o pgms/short -Wall -pedantic -O3 -ffast-math -march=native -mtune=native -I ./src -DTIME -Ddatum=short src/arith.c\ngcc -o pgms/int -Wall -pedantic -O3 -ffast-math -march=native -mtune=native -I ./src -DTIME -Ddatum=int src/arith.c\ngcc -o pgms/long -Wall -pedantic -O3 -ffast-math -march=native -mtune=native -I ./src -DTIME -Ddatum=long src/arith.c\ngcc -o pgms/float -Wall -pedantic -O3 -ffast-math -march=native -mtune=native -I ./src -DTIME -Ddatum=float src/arith.c\ngcc -o pgms/double -Wall -pedantic -O3 -ffast-math -march=native -mtune=native -I ./src -DTIME -Ddatum=double src/arith.c\ngcc -o pgms/hanoi -Wall -pedantic -O3 -ffast-math -march=native -mtune=native -I ./src -DTIME src/hanoi.c\ngcc -o pgms/syscall -Wall -pedantic -O3 -ffast-math -march=native -mtune=native -I ./src -DTIME src/syscall.c\ngcc -o pgms/context1 -Wall -pedantic -O3 -ffast-math -march=native -mtune=native -I ./src -DTIME src/context1.c\ngcc -o pgms/pipe -Wall -pedantic -O3 -ffast-math -march=native -mtune=native -I ./src -DTIME src/pipe.c\ngcc -o pgms/spawn -Wall -pedantic -O3 -ffast-math -march=native -mtune=native -I ./src -DTIME src/spawn.c\ngcc -o pgms/execl -Wall -pedantic -O3 -ffast-math -march=native -mtune=native -I ./src -DTIME src/execl.c\ngcc -o pgms/dhry2 -Wall -pedantic -O3 -ffast-math -march=native -mtune=native -I ./src -DTIME -DHZ= ./src/dhry_1.c ./src/dhry_2.c\ngcc -o pgms/dhry2reg -Wall -pedantic -O3 -ffast-math -march=native -mtune=native -I ./src -DTIME -DHZ= -DREG=register ./src/dhry_1.c ./src/dhry_2.c\ngcc -o pgms/looper -Wall -pedantic -O3 -ffast-math -march=native -mtune=native -I ./src -DTIME src/looper.c\ngcc -o pgms/fstime -Wall -pedantic -O3 -ffast-math -march=native -mtune=native -I ./src -DTIME src/fstime.c\ngcc -o pgms/whetstone-double -Wall -pedantic -O3 -ffast-math -march=native -mtune=native -I ./src -DTIME -DDP -DGTODay -DUNIXBENCH src/whets.c -lm\nmake all\nmake[1]: Entering directory `/home/fabric/byte-unixbench/UnixBench'\nmake distr\nmake[2]: Entering directory `/home/fabric/byte-unixbench/UnixBench'\nChecking distribution of files\n./pgms  exists\n./src  exists\n./testdir  exists\n./tmp  exists\n./results  exists\nmake[2]: Leaving directory `/home/fabric/byte-unixbench/UnixBench'\nmake programs\nmake[2]: Entering directory `/home/fabric/byte-unixbench/UnixBench'\nmake[2]: Nothing to be done for `programs'.\nmake[2]: Leaving directory `/home/fabric/byte-unixbench/UnixBench'\nmake[1]: Leaving directory `/home/fabric/byte-unixbench/UnixBench'\nsh: 3dinfo: command not found\n\n   #    #  #    #  #  #    #          #####   ######  #    #   ####   #    #\n   #    #  ##   #  #   #  #           #    #  #       ##   #  #    #  #    #\n   #    #  # #  #  #    ##            #####   #####   # #  #  #       ######\n   #    #  #  # #  #    ##            #    #  #       #  # #  #       #    #\n   #    #  #   ##  #   #  #           #    #  #       #   ##  #    #  #    #\n    ####   #    #  #  #    #          #####   ######  #    #   ####   #    #\n\n   Version 5.1.3                      Based on the Byte Magazine Unix Benchmark\n\n   Multi-CPU version                  Version 5 revisions by Ian Smith,\n                                      Sunnyvale, CA, USA\n   January 13, 2011                   johantheghost at yahoo period com\n\n------------------------------------------------------------------------------\n   Use directories for:\n      * File I/O tests (named fs***) = /home/fabric/byte-unixbench/UnixBench/tmp\n      * Results                      = /home/fabric/byte-unixbench/UnixBench/results\n------------------------------------------------------------------------------\n\n\n1 x Dhrystone 2 using register variables  1 2 3 4 5 6 7 8 9 10\n\n1 x Double-Precision Whetstone  1 2 3 4 5 6 7 8 9 10\n\n1 x Execl Throughput  1 2 3\n\n1 x File Copy 1024 bufsize 2000 maxblocks  1 2 3\n\n1 x File Copy 256 bufsize 500 maxblocks  1 2 3\n\n1 x File Copy 4096 bufsize 8000 maxblocks  1 2 3\n\n1 x Pipe Throughput  1 2 3 4 5 6 7 8 9 10\n\n1 x Pipe-based Context Switching  1 2 3 4 5 6 7 8 9 10\n\n1 x Process Creation  1 2 3\n\n1 x System Call Overhead  1 2 3 4 5 6 7 8 9 10\n\n1 x Shell Scripts (1 concurrent)  1 2 3\n\n1 x Shell Scripts (8 concurrent)  1 2 3\n\n2 x Dhrystone 2 using register variables  1 2 3 4 5 6 7 8 9 10\n\n2 x Double-Precision Whetstone  1 2 3 4 5 6 7 8 9 10\n\n2 x Execl Throughput  1 2 3\n\n2 x File Copy 1024 bufsize 2000 maxblocks  1 2 3\n\n2 x File Copy 256 bufsize 500 maxblocks  1 2 3\n\n2 x File Copy 4096 bufsize 8000 maxblocks  1 2 3\n\n2 x Pipe Throughput  1 2 3 4 5 6 7 8 9 10\n\n2 x Pipe-based Context Switching  1 2 3 4 5 6 7 8 9 10\n\n2 x Process Creation  1 2 3\n\n2 x System Call Overhead  1 2 3 4 5 6 7 8 9 10\n\n2 x Shell Scripts (1 concurrent)  1 2 3\n\n2 x Shell Scripts (8 concurrent)  1 2 3\n\n========================================================================\n   BYTE UNIX Benchmarks (Version 5.1.3)\n\n   System: benchmark-1.example.com: GNU/Linux\n   OS: GNU/Linux -- 3.10.0-514.10.2.el7.x86_64 -- #1 SMP Fri Mar 3 00:04:05 UTC 2017\n   Machine: x86_64 (x86_64)\n   Language: en_US.utf8 (charmap=\"UTF-8\", collate=\"UTF-8\")\n   CPU 0: Intel Core i7 9xx (Nehalem Class Core i7) (6399.8 bogomips)\n          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization\n   CPU 1: Intel Core i7 9xx (Nehalem Class Core i7) (6399.8 bogomips)\n          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization\n   12:15:04 up 10 min,  1 user,  load average: 0.08, 0.05, 0.04; runlevel 2018-01-27\n\n------------------------------------------------------------------------\nBenchmark Run: 27 2018 12:15:04 - 12:44:41\n2 CPUs in system; running 1 parallel copy of tests\n\nDhrystone 2 using register variables       52485119.8 lps   (10.0 s, 7 samples)\nDouble-Precision Whetstone                     3217.7 MWIPS (19.6 s, 7 samples)\nExecl Throughput                               6145.8 lps   (30.0 s, 2 samples)\nFile Copy 1024 bufsize 2000 maxblocks       1462454.7 KBps  (30.0 s, 2 samples)\nFile Copy 256 bufsize 500 maxblocks          438128.6 KBps  (30.0 s, 2 samples)\nFile Copy 4096 bufsize 8000 maxblocks       3236341.0 KBps  (30.0 s, 2 samples)\nPipe Throughput                             2376139.6 lps   (10.0 s, 7 samples)\nPipe-based Context Switching                 536867.2 lps   (10.0 s, 7 samples)\nProcess Creation                              19975.5 lps   (30.0 s, 2 samples)\nShell Scripts (1 concurrent)                  10413.1 lpm   (60.0 s, 2 samples)\nShell Scripts (8 concurrent)                   1984.7 lpm   (60.0 s, 2 samples)\nSystem Call Overhead                        3983241.1 lps   (10.0 s, 7 samples)\n\nSystem Benchmarks Index Values               BASELINE       RESULT    INDEX\nDhrystone 2 using register variables         116700.0   52485119.8   4497.4\nDouble-Precision Whetstone                       55.0       3217.7    585.0\nExecl Throughput                                 43.0       6145.8   1429.3\nFile Copy 1024 bufsize 2000 maxblocks          3960.0    1462454.7   3693.1\nFile Copy 256 bufsize 500 maxblocks            1655.0     438128.6   2647.3\nFile Copy 4096 bufsize 8000 maxblocks          5800.0    3236341.0   5579.9\nPipe Throughput                               12440.0    2376139.6   1910.1\nPipe-based Context Switching                   4000.0     536867.2   1342.2\nProcess Creation                                126.0      19975.5   1585.4\nShell Scripts (1 concurrent)                     42.4      10413.1   2455.9\nShell Scripts (8 concurrent)                      6.0       1984.7   3307.9\nSystem Call Overhead                          15000.0    3983241.1   2655.5\n                                                                   ========\nSystem Benchmarks Index Score                                        2262.5\n\n------------------------------------------------------------------------\nBenchmark Run: 27 2018 12:44:41 - 13:14:17\n2 CPUs in system; running 2 parallel copies of tests\n\nDhrystone 2 using register variables      102666882.6 lps   (10.0 s, 7 samples)\nDouble-Precision Whetstone                     6467.4 MWIPS (19.4 s, 7 samples)\nExecl Throughput                              13332.0 lps   (30.0 s, 2 samples)\nFile Copy 1024 bufsize 2000 maxblocks       2200282.6 KBps  (30.0 s, 2 samples)\nFile Copy 256 bufsize 500 maxblocks          670620.0 KBps  (30.0 s, 2 samples)\nFile Copy 4096 bufsize 8000 maxblocks       5159536.4 KBps  (30.0 s, 2 samples)\nPipe Throughput                             4698253.8 lps   (10.0 s, 7 samples)\nPipe-based Context Switching                1049749.4 lps   (10.0 s, 7 samples)\nProcess Creation                              44415.0 lps   (30.0 s, 2 samples)\nShell Scripts (1 concurrent)                  15299.7 lpm   (60.0 s, 2 samples)\nShell Scripts (8 concurrent)                   2004.3 lpm   (60.0 s, 2 samples)\nSystem Call Overhead                        6274239.3 lps   (10.0 s, 7 samples)\n\nSystem Benchmarks Index Values               BASELINE       RESULT    INDEX\nDhrystone 2 using register variables         116700.0  102666882.6   8797.5\nDouble-Precision Whetstone                       55.0       6467.4   1175.9\nExecl Throughput                                 43.0      13332.0   3100.5\nFile Copy 1024 bufsize 2000 maxblocks          3960.0    2200282.6   5556.3\nFile Copy 256 bufsize 500 maxblocks            1655.0     670620.0   4052.1\nFile Copy 4096 bufsize 8000 maxblocks          5800.0    5159536.4   8895.8\nPipe Throughput                               12440.0    4698253.8   3776.7\nPipe-based Context Switching                   4000.0    1049749.4   2624.4\nProcess Creation                                126.0      44415.0   3525.0\nShell Scripts (1 concurrent)                     42.4      15299.7   3608.4\nShell Scripts (8 concurrent)                      6.0       2004.3   3340.6\nSystem Call Overhead                          15000.0    6274239.3   4182.8\n                                                                   ========\nSystem Benchmarks Index Score                                        3870.9\n\n```\n\n| 項目 | 説明 |\n| --- | ---|\n| Dhrystone 2 using register variables(dhry2reg) | 整数演算処理の性能をベンチマークする(Dhystoneというベンチマークツールを利用している) |\n| Double-Precision Whetstone(whetstone-double)   | 浮動小数演算処理の性能をベンチマークする(Whetstonというベンチマークツールを利用している) |\n| Execl Throughput(execl)                        | システムコール処理性能をベンチマークする(execl()というプロセスイメージを書き換えるシステムコールを繰り返す) |\n| File Copy 1024 bufsize 2000 maxblocks(fstime)  | ファイルのコピーをくる返すテストで、2MByteのファイルを1024Byteごとに処理する(元々はディスク処理性能を図るものだったが、メモリやCPUのキャッシュの増大により、ディスク処理性能ではなくOSとCPUの処理性能を見るものになっている) |\n| File Copy 256 bufsize 500 maxblocks(fsbuffer)  | fstimeと同様のテスト内容で、500KByteのファイルを256Byteごとに処理する |\n| File Copy 4096 bufsize 8000 maxblocks(fsdisk)  | fstimeと同様のテスト内容で、8MByteのファイルを4096Byteごとに処理する  |\n| Pipe Throughput(pipe)                          | 512Byteのデータのパイプ処理を繰り返しスループットテストする(元々はメモリ処理を図るものだったが、CPUのキャッシュ増大により、メモリ処理性能ではなく、OSとCPUの処理性能を見るためのモノになっている |\n| Pipe-based Context Switching(context1)         | OSとCPUの処理性能を見る(2つのプロセス間で更新される値をパイプで渡すことで、プロセスのコンテキストスイッチを実行させます) |\n| Process Creation(spawn)                        | OSとCPUの処理を見る(プロセスのフォークを繰り返します) |\n| Shell Scripts (1 concurrent)(shell1)           | CPUの処理性能を見る(sort、grepなどのテキスト処理を繰り返す) |\n| Shell Scripts (8 concurrent)(shell8)           | shell1と同じ処理を、8並列に実施する |\n| System Call Overhead(syscall)                  | OSとCPUの処理性能を見る、getpid()というシステムコールを繰り返し実行します |\n\n\n結果の見方\n* System Benchmarks Index Scoreは、前テストケースの総合点なので単純な比較する場合はこの数値を比較すればよい\n* 各テストケースごとに比較する場合は、各テストケースのINDEXを数値を比較すればよい\n","UpdatedAt":"2021-04-04T12:27:46.8733711+09:00"},{"Text":"# unixbench report\n\n\n## 環境情報\n* pc1\n    * OS: Ubuntu: 16.04.2 LTS (Xenial Xerus), Kernel 4.4.0-59-generic\n    * CPU: [Intel(R) Pentium(R) CPU G3258:  Haswel, 2 core, 2 thread, 3.20GHz](https://ark.intel.com/products/82723/Intel-Pentium-Processor-G3258-3M-Cache-3_20-GHz)\n    * Memory: W3U1600HQ-8G * 2: 8192MB, Type: DDR3, Speed: 1333 MHz, Rank: 2, Minimum Voltage: 1.5 V, Maximum Voltage: 1.5 V, Configured Voltage: 1.5 V)\n    * Storage: CSSD-S6T256NHG6Q 256 GB: Sector Size: 512 bytes logical/physical, SATA Version:  SATA 3.1, 6.0 Gb/s (current: 6.0 Gb/s)\n\n| pc            | score  | dhry2reg | whetstone-double | execl  | fstime | fsbuffer | fsdisk | pipe   | context1 | spawn  | shell1 | shell8 | syscal |\n| pc1 1core     | 2601.0 | 4430.4   | 659.4            | 1728.4 | 3947.3 | 2894.5   | 5576.8 | 2934.6 | 733.9    | 1703.6 | 4084.6 | 5181.9 | 3836.3 |\n| pc1 2core     | 4367.9 | 8749.1   | 1321.1           | 3641.3 | 4366.9 | 3055.0   | 7836.3 | 5800.9 | 2910.5   | 3460.4 | 6216.2 | 5524.8 | 5463.0 |\n| pc1_vm1 1core | 2262.5 | 4497.4   | 585.0            | 1429.3 | 3693.1 | 2647.3   | 5579.9 | 1910.1 | 1342.2   | 1585.4 | 2455.9 | 3307.9 | 2655.5 |\n| pc1_vm1 2core | 3870.9 | 8797.5   | 1175.9           | 3100.5 | 5556.3 | 4052.1   | 8895.8 | 3776.7 | 2624.4   | 3525.0 | 3608.4 | 3340.6 | 4182.8 |\n","UpdatedAt":"2021-04-04T12:27:46.9393354+09:00"},{"Text":"# wrk\n\n使用感はabに似ている。\nまた、abよりも高い(倍以上の）rpsを叩き出せ、cpuもいい感じに使い切れる。\n\n\n## Install\n```\nwget https://github.com/wg/wrk/archive/4.0.2.tar.gz \u0026\u0026 \\\ntar xf 4.0.2.tar.gz \u0026\u0026 \\\ncd wrk-4.0.2 \u0026\u0026 \\\nmake \u0026\u0026 \\\nsudo mv wrk /usr/local/bin/\n```\n\n## Run wrk\n```\n./wrk -c 1 -t 1 --latency -d 10 http://127.0.0.1/\n\n./wrk -h\n./wrk: invalid option -- 'h'\nUsage: wrk \u003coptions\u003e \u003curl\u003e\n  Options:\n    -c, --connections \u003cN\u003e  Connections to keep open\n    -d, --duration    \u003cT\u003e  Duration of test\n    -t, --threads     \u003cN\u003e  Number of threads to use\n\n    -s, --script      \u003cS\u003e  Load Lua script file\n    -H, --header      \u003cH\u003e  Add header to request\n        --latency          Print latency statistics\n        --timeout     \u003cT\u003e  Socket/request timeout\n    -v, --version          Print version details\n\n  Numeric arguments may include a SI unit (1k, 1M, 1G)\n  Time arguments may include a time unit (2s, 2m, 2h)\n```\n\n\n## Run wrk\n```\n./wrk -c 1 -t 1 --latency -d 10 http://127.0.0.1:1323\nRunning 10s test @ http://127.0.0.1:1323\n  1 threads and 1 connections\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency    23.54us   43.66us   3.05ms   97.79%\n    Req/Sec    49.94k     4.58k   51.66k    96.00%\n  Latency Distribution\n     50%   18.00us\n     75%   21.00us\n     90%   25.00us\n     99%  184.00us\n  497098 requests in 10.00s, 61.63MB read\nRequests/sec:  49700.22\nTransfer/sec:      6.16MB\n```\n\n## 測定時の注意事項\n* -c, -t はある程度上げるとよい(上げすぎてもだめ)\n* ベンチマークの際にmpstatで、CPUを使い切ってるか確認するとよい\n    * 基本的にはCPU性能でサチることが多い\n    * $ mpstat -P ALL 1\n* 99% Latencyが大きなったらパフォーマンスが劣化してる(サーバ側 or クライアント側でCPUがサチるなど原因があるはず)\n\n```\n# 1スレッドでwrkを実行\n./wrk -c 1 -t 1 --latency -d 10 http://127.0.0.1:1323\nRunning 10s test @ http://127.0.0.1:1323\n  1 threads and 1 connections\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency    23.54us   43.66us   3.05ms   97.79%\n    Req/Sec    49.94k     4.58k   51.66k    96.00%\n  Latency Distribution\n     50%   18.00us\n     75%   21.00us\n     90%   25.00us\n     99%  184.00us\n  497098 requests in 10.00s, 61.63MB read\nRequests/sec:  49700.22\nTransfer/sec:      6.16MB\n\n\n# 2スレッドでwrkを実行\n# 2CPUなのでここでCPUがサチる\n# 99%のLatencyが大きめに出てるが、この辺が妥当\n$ ./wrk -c 2 -t 2 --latency -d 10 http://127.0.0.1:1323\nRunning 10s test @ http://127.0.0.1:1323\n  2 threads and 2 connections\n\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency    69.34us  322.05us   7.59ms   97.53%\n    Req/Sec    41.03k     4.29k   44.90k    92.50%\n  Latency Distribution\n     50%   21.00us\n     75%   23.00us\n     90%   28.00us\n     99%    1.85ms\n  816289 requests in 10.00s, 101.20MB read\nRequests/sec:  81620.81\nTransfer/sec:     10.12MB\n\n\n# 4スレッドでwrkを実行\n# 2CPUなのでここでCPUがサチり、Latencyも明らかに劣化している\n# Request/secは、2スレッド時よりも出て入るが、Latencyも跳ねているのでSLA的にアウト\n$ ./wrk -c 4 -t 4 --latency -d 10 http://127.0.0.1:1323\nRunning 10s test @ http://127.0.0.1:1323\n  4 threads and 4 connections\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency     2.32ms    5.82ms  58.35ms   88.41%\n    Req/Sec    21.73k     9.27k   49.12k    69.83%\n  Latency Distribution\n     50%   29.00us\n     75%   94.00us\n     90%    9.67ms\n     99%   28.25ms\n  867198 requests in 10.10s, 107.51MB read\nRequests/sec:  85894.12\nTransfer/sec:     10.65MB\n```\n\n* このサーバの最大性能としては以下が妥当\n    * 実際のRPSとしてはlocalhostからのデータではなく、別サーバからの測定データを利用する\n\n```\n$ ./wrk -c 2 -t 2 --latency -d 10 http://127.0.0.1:1323\nRunning 10s test @ http://127.0.0.1:1323\n  2 threads and 2 connections\n\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency    69.34us  322.05us   7.59ms   97.53%\n    Req/Sec    41.03k     4.29k   44.90k    92.50%\n  Latency Distribution\n     50%   21.00us\n     75%   23.00us\n     90%   28.00us\n     99%    1.85ms\n  816289 requests in 10.00s, 101.20MB read\nRequests/sec:  81620.81\nTransfer/sec:     10.12MB\n```\n","UpdatedAt":"2021-04-04T12:27:46.9443314+09:00"},{"Text":"# wrk report\n\n\n## Environments\n* pc1\n    * OS: Ubuntu: 16.04.2 LTS (Xenial Xerus), Kernel 4.4.0-59-generic\n    * CPU: [Intel(R) Pentium(R) CPU G3258:  Haswel, 2 core, 2 thread, 3.20GHz](https://ark.intel.com/products/82723/Intel-Pentium-Processor-G3258-3M-Cache-3_20-GHz)\n    * Memory: W3U1600HQ-8G * 2: 8192MB, Type: DDR3, Speed: 1333 MHz, Rank: 2, Minimum Voltage: 1.5 V, Maximum Voltage: 1.5 V, Configured Voltage: 1.5 V)\n    * Storage: CSSD-S6T256NHG6Q 256 GB: Sector Size: 512 bytes logical/physical, SATA Version:  SATA 3.1, 6.0 Gb/s (current: 6.0 Gb/s)\n\n\n## Simple Benchmark\n* ローカルホストからwrk 1threadでベンチマーク\n* コンテンツは、\"Hello World!\"を返すだけ\n\n``` sh\n$ ./wrk -c 1 -t 1 --latency -d 10 [target]\n```\n\n| Target                           | RPS   | 50% Latency[us] | 99% Latency[us] |\n| --- | --- | --- | --- |\n| nginx                            | 47356 | 20              | 104             |\n| go:net/http                      | 50031 | 18              | 188             |\n| go:chi                           | 50780 | 18              | 198             |\n| go:echo                          | 49700 | 18              | 184             |\n| go:gin                           | 27901 | 34              | 173             |\n| uwsgi + python:raw-wsgi          | 2820  | 61              | 193             |\n| nginx + uwsgi + python:raw-wsgi  | 23988 | 39              | 188             |\n| nginx + uwsgi + python:django2.0 | 3960  | 236             | 614             |\n| nginx + uwsgi + python:flask     | 5475  | 170             | 526             |\n","UpdatedAt":"2021-04-04T12:27:46.9403336+09:00"},{"Text":"# CI/CD\n\n## Contents\n\n| Link              | Description                                                             |\n| ----------------- | ----------------------------------------------------------------------- |\n| [git](git.md)     | Git                                                                     |\n| [patch](patch.md) | テキストファイルに patch ファイル(差分ファイル)を適用するためのコマンド |\n","UpdatedAt":"2021-04-04T12:40:11.6833772+09:00"},{"Text":"# git\n\n## あるリポジトリの修正を別のリポジトリに適用する\n\n- リポジトリ A とリポジトリ B を並行運用するときに、リポジトリ A に適用したコミットをリポジトリ B にも適用する場合を想定\n\n```\n# patchを作成する\n$ cd ~/repository1\n\n$ mkdir /tmp/patches\n# 特定コミットからパッチを作成する\n$ git format-patch -o /tmp/patches 34ece0dbc9bca5b028e677bfe17e157359047b30\n/tmp/patches/0001-update.patch\n/tmp/patches/0002-update.patch\n\n\n# 別のリポジトリに適用する\n$ cd ~/repository2\n$ git am -3 patches/*.patch\n```\n","UpdatedAt":"2021-04-03T22:12:08.8784788+09:00"},{"Text":"# patch\n\n- テキストファイルに patch ファイル(差分ファイル)を適用するためのコマンド\n- patch ファイルは diff, git diff, git format-patch などで出力したものをそのまま利用できる\n\n```\n# dir配下全て対象にpatchを適用する\n$ cd [dir]\n$ patch -p 1 \u003c [patchfile]\n\n\n# 特定のファイルにpatchを適用する\n$ patch [targetfile] [patchfile]\n```\n","UpdatedAt":"2021-04-04T12:40:17.1185798+09:00"},{"Text":"# Linux Commands\n\n## Contents\n\n| Link                                          | Description                              |\n| --------------------------------------------- | ---------------------------------------- |\n| [network tools](tools.md)                     | ネットワーク観測ツールについて           |\n| [network tcpdump \u0026 tshark](tcpdump_tshark.md) | ネットワークパケットの観測ツールについて |\n","UpdatedAt":"2021-04-04T13:54:45.6335427+09:00"},{"Text":"# ip\n\n## ip addr add\n\n```\n$ sudo ip addr add 192.168.10.2/24 dev eth0\n```\n\n## ip link set\n\n```\n$ sudo ip link set eth0 up\n\n# if following error occured, you should flush ip address\n$ sudo ip link set eth0 up\nRTNETLINK answers: File exists\n\n$ sudo ip addr flush dev eth0\n```\n","UpdatedAt":"2021-04-11T14:17:59.4643996+09:00"},{"Text":"# tcpdump \u0026 tshark\n\n## tcpdump\n\n- L2 レイヤでパケットを取得するためのツール\n- 基本的に L2 や L3 のレイヤでの問題を切り分けや、ネットワークの挙動の確認に利用される\n- ある程度目的のパケットが分ってる場合は、オプションを付けて特定のプロトコルや宛先やポートを指定して、標準出力にキャプチャ結果を出力するとよい\n\n```\n# 利用可能なインターフェイス一覧を表示\n$ tcpdump -D\n\n# デバイスでフィルタリング\n$ sudo tcpdump -i [device]\n\n# ホスト名でフィルタリング\n$ sudo tcpdump host [hostname]\n\n# SrcIP, DstIP, Portを指定してのフィルタリング\n$ sudo tcpdump -i [device] src [ip1] and dst [ip2] and dst port [port]\n\n# ネットワークアドレスでフィルタリング\n$ sudo tcpdump net [network addres: eg.192.168.1.0/24]\n\n# 特定のPortを含まないフィルタリング\n$ sudo tcpdump not port [port]\n\n# プロトコルでフィルタリング\n$ sudo tcpdump [protocol]\n# ex.\n# $ sudo tcpdump icmp\n# tcpdump: verbose output suppressed, use -v or -vv for full protocol decode\n# listening on enp31s0, link-type EN10MB (Ethernet), capture size 262144 bytes\n# 14:51:31.521513 IP 192.168.10.101 \u003e owner-desktop: ICMP echo request, id 4809, seq 122, length 64\n# 14:51:31.521563 IP owner-desktop \u003e 192.168.10.101: ICMP echo reply, id 4809, seq 122, length 64\n```\n\n### tcpdump の表示形式を変更する\n\n```\n# キャプチャ結果のVerbose表示\n$ sudo tcpdump -v port 80\n\n# キャプチャ結果のAscii表示\n# HTMLなどの中身を見たい場合はこれが便利\n$ sudo tcpdump -A port 80\n\n# キャプチャ結果のHexとAscii表示\n$ sudo tcpdump -X port 80\n\n# キャプチャ結果をL2モードで表示\n$ sudo tcpdump -e port 80\n```\n\n### tcpdump をファイルに保存して後で解析する\n\n- ネットワークでなんらかの問題がある場合に、問題をの切り分けを行いたい場合には、ファイルにパケットをキャプチャしておいて後で解析することがよくある\n- 簡単な解析であれば tcpdump でやる場合が多いが、後述する tshark を使うとより解析がしやすい\n\n```\n# 愚直にやるなら以下だが、ある程度目的のパケットが絞れてる場合は、-iなどでフィルタリングするとよい\n$ sudo tcpdump -w [filepath]\n\n# 本番環境で実行する場合はcountを指定してディスク容量を使いつぶさないように気を付ける\n# パケット数で制限を掛ける\n$ sudo tcpdump -w /tmp/testdump -c 10\n# ファイルサイズ(MB)で制限を掛ける\n$ sudo tcpdump -w /tmp/testdump -C 1\n# 時間で制限を掛ける\n$ sudo tcpdump -w /tmp/testdump -G 1\n\n# tcpdumpで読み込んで、解析する\n$ sudo tcpdump -r [filepath]\n```\n\n## tshark\n\n```\n$ sudo apt-get install tshark\n```\n\n```\n# パケットをファイルキャプチャする\n$ sudo tcpdump -i enp31s0 -w /tmp/tcpdump.out\n```\n\n```\n# 基本的な使い方はフィルタリングして目的の(不正な、怪しい)パケットを見つける\n# -n を付けると名前解決してくれる\n$ tshark -nr /tmp/tcpdump.out 'tcp.srcport==80'\n4   3.976424 192.168.10.121 → 192.168.10.101 TCP 66 80 → 50627 [SYN, ACK] Seq=0 Ack=1 Win=64240 Len=0 MSS=1460 SACK_PERM=1 WS=128\n7   3.983913 192.168.10.121 → 192.168.10.101 TCP 54 80 → 50627 [ACK] Seq=1 Ack=79 Win=64256 Len=0\n8   3.984941 192.168.10.121 → 192.168.10.101 TCP 208 HTTP/1.0 200 OK  [TCP segment of a reassembled PDU]\n9   3.985013 192.168.10.121 → 192.168.10.101 HTTP 938 HTTP/1.0 200 OK  (text/html)\n```\n\n### TCP 関連の絞り込み\n\n```\n# srcportで絞り込む\n$ tshark -r /tmp/tcpdump.out 'tcp.srcport==80'\n\n# dstportで絞り込む\n$ tshark -r /tmp/tcpdump.out 'tcp.dstport==80'\n\n\n# synパケットで絞り込む\n$ tshark -r /tmp/tcpdump.out 'tcp.flags.syn==1'\n\n# TCPZeroWindowで絞り込む\n# ZeroWindowは、受信側のTCPバッファが詰まっていている場合に、送信側にこれ以上送らないように教えるために、このフラグを立てて送信側に送信される\n$ tshark -r /tmp/tcpdump.out 'tcp.window_size==0'\n\n# resetフラグが出てる場合は、以下のパターンがある\n# 受信側が受信できないポートへ通信を受信したときに送信側にこのフラグを立てて返す\n# 受信側に自身のIPアドレス宛でないパケットを受信したときに送信側にこのフラグを立てて返す\n# 送信側が受信側からTCPZeroWindowを何度か受け取って、これ以上送信できないと判断したときにこのフラグを立てて受信側に送信する\n$ tshark -r /tmp/tcpdump.out 'tcp.flags.reset==1'\n```\n\n### IP 関連の絞り込み\n\n```\n# srcipで絞り込む\n$ tshark -r /tmp/tcpdump.out 'ip.srcip=192.168.1.1'\n\n# dstipで絞り込む\n$ tshark -r /tmp/tcpdump.out 'ip.srcip=192.168.1.2'\n\n# パケットサイズで絞り込む\n$ tshark -r /tmp/tcpdump.out 'ip.len\u003e100'\n\n# パケットサイズで絞り込む\n$ tshark -r /tmp/tcpdump.out 'ip.len==1500'\n```\n\n### ARP 関連の絞り込み\n\n```\n# arp要求\n$ tshark -r /tmp/tcpdump.out 'arp.opcode==1'\n\n# arp応答\n$ tshark -r /tmp/tcpdump.out 'arp.opcode==2'\n```\n\n### ICMP\n\n```\n# icmp request\n$ tshark -r /tmp/tcpdump.out 'icmp.type==8'\n\n# icmp reply\n$ tshark -r /tmp/tcpdump.out 'icmp.type==0'\n\n# icmp host unreachable\n$ tshark -r /tmp/tcpdump.out 'icmp.type==3' and 'icmp.code==1'\n\n# icmp port unreachable\n$ tshark -r /tmp/tcpdump.out 'icmp.type==3' and 'icmp.code==3'\n```\n\n### Frame\n\n```\n# frameの時間で絞り込む\n$ tshark -r /tmp/tcpdump.out 'frame.time \u003e= \"2020-09-22 12:00:00\"'\n\n# frameの番号で絞り込む\n$ tshark -r /tmp/tcpdump.out 'frame.number \u003e= 10 and frame.number \u003c 20'\n```\n\n```\n# 時間の表示\n$ tshark -r /tmp/tcpdump.out -ta [options]\n\n# Frame間の時間を差分にして表示\n$ tshark -r /tmp/tcpdump.out -td\n\n# 表示するフィールドを指定する\n$ tshark -r /tmp/tcpdump.out -td -T fields -e frame.number -e ip.src -e tcp.flags.syn -e tcp.flags.ack\n```\n\n### 統計情報\n\n```\n# 全プロトコルの統計情報を表示\n$ tshark -qr /tmp/tcpdump.out -z io,phs\n\n===================================================================\nProtocol Hierarchy Statistics\nFilter:\n\neth                                      frames:26 bytes:4062\n  ip                                     frames:26 bytes:4062\n    tcp                                  frames:26 bytes:4062\n      ssh                                frames:3 bytes:486\n      http                               frames:4 bytes:2140\n        data-text-lines                  frames:2 bytes:1876\n          tcp.segments                   frames:2 bytes:1876\n===================================================================\n\n\n# httpのみに限定して統計情報を表示\n$ tshark -qr /tmp/tcpdump.out -z io,phs,http\n\n===================================================================\nProtocol Hierarchy Statistics\nFilter: http\n\neth                                      frames:4 bytes:2140\n  ip                                     frames:4 bytes:2140\n    tcp                                  frames:4 bytes:2140\n      http                               frames:4 bytes:2140\n        data-text-lines                  frames:2 bytes:1876\n          tcp.segments                   frames:2 bytes:1876\n===================================================================\n\n\n# IPアドレスのconversionの表示\n$ tshark -qr /tmp/tcpdump.out -z conv,ip\n================================================================================\nIPv4 Conversations\nFilter:\u003cNo Filter\u003e\n                                               |       \u003c-      | |       -\u003e      | |     Total     |    Relative    |   Duration   |\n                                               | Frames  Bytes | | Frames  Bytes | | Frames  Bytes |      Start     |              |\n192.168.10.101       \u003c-\u003e 192.168.10.121            13      3126      13       936      26      4062     0.000000000         6.8361\n================================================================================\n\n\n# TCPのconversion表示\n$ tshark -qr /tmp/tcpdump.out -z conv,tcp\n================================================================================\nTCP Conversations\nFilter:\u003cNo Filter\u003e\n                                                           |       \u003c-      | |       -\u003e      | |     Total     |    Relative    |   Duration   |\n                                                           | Frames  Bytes | | Frames  Bytes | | Frames  Bytes |      Start     |              |\n192.168.10.101:50627       \u003c-\u003e 192.168.10.121:80                5      1320       5       378      10      1698     3.976361000         0.0231\n192.168.10.101:50628       \u003c-\u003e 192.168.10.121:80                5      1320       5       378      10      1698     6.789281000         0.0111\n192.168.10.101:49254       \u003c-\u003e 192.168.10.121:22                2       308       2       120       4       428     3.985103000         2.8510\n192.168.10.101:49249       \u003c-\u003e 192.168.10.121:22                1       178       1        60       2       238     0.000000000         0.0417\n================================================================================\n\n\n# TCPのconcersion表示(portでフィルタリング, ipなどでもフィルタリングできる)\n$ tshark -qr /tmp/tcpdump.out -z conv,tcp,tcp.port==80\n================================================================================\nTCP Conversations\nFilter:tcp.port==80\n                                                           |       \u003c-      | |       -\u003e      | |     Total     |    Relative    |   Duration   |\n                                                           | Frames  Bytes | | Frames  Bytes | | Frames  Bytes |      Start     |              |\n192.168.10.101:50627       \u003c-\u003e 192.168.10.121:80                5      1320       5       378      10      1698     3.976361000         0.0231\n192.168.10.101:50628       \u003c-\u003e 192.168.10.121:80                5      1320       5       378      10      1698     6.789281000         0.0111\n================================================================================\n\n\n# HTTPの統計表示\n$ tshark -qr /tmp/tcpdump.out -z http,stat\n===================================================================\nHTTP Statistics\n* HTTP Status Codes in reply packets\n    HTTP 200 OK\n* List of HTTP Request methods\n          GET 2\n===================================================================\n\n\n# ICMPの統計情報表示\n$ tshark -qr /tmp/tcpdump.out -z icmp,srt\n==========================================================================\nICMP Service Response Time (SRT) Statistics (all times in ms):\nFilter: \u003cnone\u003e\n\nRequests  Replies   Lost      % Loss\n0         0         0           0.0%\n\nMinimum   Maximum   Mean      Median    SDeviation     Min Frame Max Frame\n0.000     0.000     0.000     0.000     0.000          0         0\n==========================================================================\n```\n\n### tshark を tcpdump のように使う\n\n```\n# リアルタイムにフィルタリングして表示する\n$ sudo tshark -i enp31s0 -Y 'tcp.dstport==80'\nRunning as user \"root\" and group \"root\". This could be dangerous.\nCapturing on 'enp31s0'\n\n\n# ファイルに書き込む\n$ sudo tshark -i enp31s0 -w /tmp/tshark.cap\n```\n","UpdatedAt":"2021-03-15T21:55:34.8120257+09:00"},{"Text":"# Network tools\n\n## ping\n\n- レイテンシを確認する\n\n```\n$ ping google.co.jp\nPING google.co.jp (216.58.197.195) 56(84) bytes of data.\n64 bytes from nrt13s48-in-f195.1e100.net (216.58.197.195): icmp_seq=1 ttl=54 time=3.73 ms\n64 bytes from nrt13s48-in-f195.1e100.net (216.58.197.195): icmp_seq=2 ttl=54 time=4.13 ms\n```\n\n## traceroute\n\n- 通信経路を確認する\n- レイテンシを確認する\n\n```\n$ traceroute google.co.jp\n```\n\n## mtr\n\n- mtr は連続で traceroute し、その結果を描画し続けます\n- 通信経路のレイテンシや Loss 率を見たい場合に利用します\n\n```\n# loss率などがわかる\n$ mtr  192.168.122.102\n                                                                                                                                                                                                    Packets               Pings\n Host                                                                                                                                                                                             Loss%   Snt   Last   Avg  Best  Wrst StDev\n 1. 192.168.122.102                                                                                                                                                                                0.0%     2    0.6   0.5   0.4   0.6   0.0\n```\n\n## netstat\n\n```\n# ネットワークコネクションをすべて表示する\n$ netstat -an\n\n# Webサーバなどのコネクションが詰まると、大きめの数値として出てくる\n$ netstat -an | wc\n    1143\n\n# 特定のコネクションステータスだけ抽出\n$ netstat -an | grep ESTABLISHED | wc\n    1028\n\n# 各ネットワークプロトコルのstatisticsを表示する\n$ netstat -s\n...\nTcp:\n    210 active connections openings\n    31 passive connection openings\n    0 failed connection attempts\n    1 connection resets received\n    2 connections established\n    30741 segments received\n    27367 segments send out\n    17 segments retransmited\n    0 bad segments received.\n    2 resets sent\n...\n\n# インターフェイスのエラーやドロップを確認する\n$ netstat -i\nKernel Interface table\nIface      MTU    RX-OK RX-ERR RX-DRP RX-OVR    TX-OK TX-ERR TX-DRP TX-OVR Flg\neth0      1500   149313      0  11707 0        118987      0      0      0 BMRU\nlo       65536        6      0      0 0             6      0      0      0 LRU\n\n# 各プロトコルの詳細を表示する\n$ netstat -p\n```\n\n## ss\n\n- socket statistics\n\n```\n# -m: show socket memory usage\n# -o: show timer information\n# -p: show process using socket\n$ sudo ss -mop\nNetid State      Recv-Q Send-Q                                                                     Local Address:Port                                                                                      Peer Address:Port\n...\ntcp   CLOSE-WAIT 272    0                                                                              127.0.0.1:50595                                                                                        127.0.0.1:http\n         skmem:(r2304,rb1061296,t0,tb2626560,f1792,w0,o0,bl0)\ntcp   ESTAB      0      4432                                                                     192.168.122.101:ssh                                                                                      192.168.122.1:57568                 timer:(on,009ms,0)\n         skmem:(r0,rb369280,t0,tb87040,f15200,w5280,o0,bl0)\ntcp   FIN-WAIT-1 0      1                                                                       ::ffff:127.0.0.1:http                                                                                  ::ffff:127.0.0.1:50594                 timer:(on,198ms,0)\n         skmem:(r0,rb1061488,t0,tb2626560,f2816,w1280,o0,bl0)\ntcp   FIN-WAIT-1 0      1                                                                       ::ffff:127.0.0.1:http                                                                                  ::ffff:127.0.0.1:50595                 timer:(on,198ms,0)\n         skmem:(r0,rb1061488,t0,tb2626560,f2816,w1280,o0,bl0)\n\n# socketのサマリを表示\n$ ss -s\nTotal: 178 (kernel 0)\nTCP:   9 (estab 2, closed 1, orphaned 0, synrecv 0, timewait 0/0), ports 0\n\nTransport Total     IP        IPv6\n*         0         -         -\nRAW       0         0         0\nUDP       2         1         1\nTCP       8         5         3\nINET      10        6         4\nFRAG      0         0         0\n```\n\n## ip -a\n\n```bash\n$ ip a show dev enp31s0\n2: enp31s0: \u003cBROADCAST,MULTICAST,UP,LOWER_UP\u003e mtu 1500 qdisc fq_codel state UP group default qlen 1000\n    link/ether 70:85:c2:b7:a2:b6 brd ff:ff:ff:ff:ff:ff\n    inet 192.168.10.121/24 brd 192.168.10.255 scope global noprefixroute enp31s0\n     valid_lft forever preferred_lft forever\n```\n\n- mtu 1500\n  - 最大の IP パケットサイズ\n  - これにフレームヘッダ(14 bytes)と FCS(4 byte)が加算されてフレームが完成\n- qdisc fq_codel\n  - qdisc は Queueing Discipline の略\n  - fq_codel は、スケジューリング方式の一つ\n    - Fair/Flow Queueing + Codel の略\n    - https://www.bufferbloat.net/projects/codel/wiki/\n  - tc コマンドで変更可能\n- qlen 1000\n  - 送信キューの長さ\n  - 大きくしすぎる bufferbloat などの問題が発生するので注意\n    - bufferbloat とは送信パケットを過剰にバッファリングするとその分パケットが遅延しやすくなる問題\n    - 優先度の高い通信は送信バッファを小さくするという対策もある\n\n## ip -s link\n\n```bash\n$ ip -s link\n1: lo: \u003cLOOPBACK,UP,LOWER_UP\u003e mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000\nlink/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\nRX: bytes  packets  errors  dropped overrun mcast\n1866314030 4034006  0       0       0       0\nTX: bytes  packets  errors  dropped carrier collsns\n1866314030 4034006  0       0       0       0\n2: enp31s0: \u003cBROADCAST,MULTICAST,UP,LOWER_UP\u003e mtu 1500 qdisc fq_codel state UP mode DEFAULT group default qlen 1000\nlink/ether 70:85:c2:b7:a2:b6 brd ff:ff:ff:ff:ff:ff\nRX: bytes  packets  errors  dropped overrun mcast\n2457569    6821     0       0       0       2186\nTX: bytes  packets  errors  dropped carrier collsns\n1049875    4730     0       0       0       0\n```\n\n- errors\n  - Ethernet の CRC エラーなど、NIC 上で処理できなかったパケット数\n  - ケーブルの破損等\n- dropped\n  - 意図的なドロップ\n  - サポートしてないフレーム(IPv6 をを無効化している状態でやってきた IPv6 パケットなど)\n- overrun\n  - RX ring buffer の容量が足りずに破棄されたパケット数\n- mcast\n  - マルチキャスト通信を正常に受信した数\n- carrier\n  - NIC 毎で何らかの問題（ケーブルの接触不良）が生じて送信できなかったパケット数\n- collsns\n  - コリジョンを検知した（ジャム信号を送った）回数\n\n## ip rule\n\n- ポリシールール\n  - RPDB(routing policy database)によって管理され、ルーティングに利用される\n  - ポリシールールは、セレクタとアクションからなる\n    - セレクタ: アクションを実施したいパケットの条件を記述する\n    - アクション: 実行したいことを記述する\n      - 特定の table から経路情報御を lookup したり、NAT を実施することもできる\n  - ルーティングの流れ\n    - 優先度(priority)の小さい順で、RPDB 内のポリシールールを一つづつ見ていく\n    - ルールのセレクタにパケットが合致する場合、アクションを実施する\n    - アクションの実行に成功(例えば経路情報を取得）できれば、RPDB の lookup は終了\n    - セレクタに合致しないか、アクションの実行に失敗すれば、次のポリシールールを見る\n\n```\n$ ip rule\n0:      from all lookup local\n32766:  from all lookup main\n32767:  from all lookup default\n\n```\n\n## ip route\n\n```\n# routingテーブルの確認\n$ ip route show\ndefault via 192.168.10.1 dev enp31s0 proto static metric 100\n169.254.0.0/16 dev enp31s0 scope link metric 1000\n169.254.32.1 dev com-0-ex scope link\n169.254.32.2 dev com-1-ex scope link\n\n\n# 特定ポリシールールのrouteの確認\n$ ip route show table 0\ndefault via 192.168.10.1 dev enp31s0 proto static metric 100\n169.254.0.0/16 dev enp31s0 scope link metric 1000\n\n\n# 全ポリシーのroute を確認\n$ ip route show table 0\ndefault via 192.168.10.1 dev enp31s0 proto static metric 100\n169.254.0.0/16 dev enp31s0 scope link metric 1000\n\n\n# 特定IP宛てのルートを取得する\n$ ip route get 192.168.101.4\n192.168.101.4 dev com-3-ex src 192.168.10.121 uid 1000\n    cache\n\n```\n\n## ip neigh\n\n```\n$ ip neigh\n192.168.10.1 dev enp31s0 lladdr c0:25:a2:dd:db:b8 STALE\n192.168.101.4 dev com-3-ex lladdr 0e:3f:7a:f1:ef:9d STALE\n169.254.32.4 dev com-3-ex lladdr 0e:3f:7a:f1:ef:9d STALE\n192.168.100.2 dev com-0-ex lladdr b6:b6:3e:42:b2:0e STALE\n169.254.32.5 dev com-4-ex lladdr 9a:34:89:fe:f2:03 STALE\n169.254.32.3 dev com-2-ex lladdr 46:b4:3b:3e:d0:f7 STALE\n169.254.32.1 dev com-0-ex lladdr b6:b6:3e:42:b2:0e STALE\n192.168.10.101 dev enp31s0 lladdr 94:65:9c:6e:fd:39 DELAY\n192.168.101.3 dev com-4-ex lladdr 9a:34:89:fe:f2:03 STALE\n192.168.101.2 dev com-2-ex lladdr 46:b4:3b:3e:d0:f7 STALE\nfe80::10ff:fe02:208b dev enp31s0 lladdr 02:00:10:02:20:8b router STALE\n\n```\n\n## arp\n\n- arp テーブルの確認に利用します\n- L2 の通信ができない場合や、L2 に他 IP が存在しないことを確認するために利用します\n\n```\n# arpテーブルのキャッシュ確認\n$ arp\nAddress                  HWtype  HWaddress           Flags Mask            Iface\n192.168.122.101          ether   00:16:3e:09:6e:0d   C                     eth0\ngateway                  ether   fe:16:3e:09:6e:0d   C                     eth0\n\n# 特定IPのキャッシュを確認\n$ arp 192.168.122.101\nAddress                  HWtype  HWaddress           Flags Mask            Iface\n192.168.122.101          ether   00:16:3e:09:6e:0d   C                     eth0\n\n# キャッシュにない場合はno entryが表示される\n$ arp 192.168.122.103\n192.168.122.103 (192.168.122.103) -- no entry\n\n# pingを飛ばすと、arp解決してキャッシュに乗る\n$ ping 192.168.122.103\nPING 192.168.122.103 (192.168.122.103) 56(84) bytes of data.\n64 bytes from 192.168.122.103: icmp_seq=1 ttl=64 time=0.644 ms\n64 bytes from 192.168.122.103: icmp_seq=2 ttl=64 time=0.325 ms\n^C\n--- 192.168.122.103 ping statistics ---\n2 packets transmitted, 2 received, 0% packet loss, time 1000ms\nrtt min/avg/max/mdev = 0.325/0.484/0.644/0.161 ms\n\n$ arp 192.168.122.103\nAddress                  HWtype  HWaddress           Flags Mask            Iface\n192.168.122.103          ether   00:16:3e:25:a0:c6   C                     eth0\n```\n\n## iptraf\n\n- コマンドライン上で GUI みたいなインターフェイスで統計が見れる\n\n```bash\n$ iptraf-ng\n iptraf-ng 1.1.4\nl TCP Connections (Source Host:Port) qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq Packets qqqqqqqqqqqqqqqqqqqqqqqqqq Bytes qqqqqqqqqqq Flag qqqqqqqqq Iface qqqqqqqqqqqqqqqqqqqqqqk\nxl192.168.122.101:22                                                                                                                      \u003e    1751                           377324             -PA-           eth0                        x\nxm192.168.122.1:57568                                                                                                                     \u003e    1751                            91232             --A-           eth0                        x\nxl192.168.122.1:53068                                                                                                                     \u003e      62                             4100             --A-           eth0                        x\n...\n```\n\n## ethtool\n\n- Mostly interface tuning; som stats\n\n```\n$ sudo ethtool eth0\nSettings for eth0:\n        Supported ports: [ TP ]\n        Supported link modes:   10baseT/Half 10baseT/Full\n                                100baseT/Half 100baseT/Full\n                                1000baseT/Full\n        Supported pause frame use: No\n        Supports auto-negotiation: Yes\n        Advertised link modes:  10baseT/Half 10baseT/Full\n                                100baseT/Half 100baseT/Full\n                                1000baseT/Full\n        Advertised pause frame use: No\n        Advertised auto-negotiation: Yes\n        Speed: 1000Mb/s\n        Duplex: Full\n        Port: Twisted Pair\n        PHYAD: 1\n        Transceiver: internal\n        Auto-negotiation: on\n        MDI-X: on (auto)\n        Supports Wake-on: pumbg\n        Wake-on: g\n        Current message level: 0x00000007 (7)\n                               drv probe link\n        Link detected: yes\n```\n\n## lsof -i\n\n- lsof 自体はプロセスが開いているファイル情報を収集するためのツール\n- -i オプションでソケットの情報を表示することができる\n\n```\n$ sudo lsof -i\n[sudo] password for owner:\nCOMMAND     PID            USER   FD   TYPE  DEVICE SIZE/OFF NODE NAME\nsystemd-r   490 systemd-resolve   12u  IPv4   18977      0t0  UDP localhost:domain\nsystemd-r   490 systemd-resolve   13u  IPv4   18978      0t0  TCP localhost:domain (LISTEN)\ncupsd       740            root    6u  IPv6   27913      0t0  TCP ip6-localhost:ipp (LISTEN)\ncupsd       740            root    7u  IPv4   27914      0t0  TCP localhost:ipp (LISTEN)\n```\n","UpdatedAt":"2021-04-03T22:13:16.7282131+09:00"},{"Text":"# Observation\n\n## Contents\n\n| Link                                                                  | Description                              |\n| --------------------------------------------------------------------- | ---------------------------------------- |\n| [observation](observation.md)                                         | パフォーマンスの観測について             |\n| [latency](observation_latency.md)                                     | Latency の参考                           |\n| [observation tools](observation_tools_basic.md)                       | 観測ツールについて                       |\n| [observation tools (intermediate)](observation_tools_intermediate.md) | 観測ツールについて(中級)                 |\n| [network tools](network_tools.md)                                     | ネットワーク観測ツールについて           |\n| [network tcpdump \u0026 tshark](network_tcpdump_tshark.md)                 | ネットワークパケットの観測ツールについて |\n\n## Problem Statement Method\n\n- パフォーマンスに問題があると思うか？\n- このシステムはこれまでうまく機能していたか？\n- 最近の変更は何か？（ソフトウェア? ハードウェア?)\n- パフォーマンスの低下をレイテンシや実行時間で表現できるか？\n- 問題が他の人やアプリケーションに影響するか？（またはあたただけか？）\n- 環境は？ソフトウェア、ハードウェア、インスタンスタイプは？バージョンは？設定は？\n\n## Workload Characterizaon Method\n\n- 誰がその負荷を引き起こしているか？PID、UID、IP アドレス、etc\n- なぜその負荷が呼び出されたか？コードパス、スタックトレース、etc\n- その負荷は何か？IOPS、tput、type、r/w\n- その負荷は時間とともにどのように変化するか？\n\n## The USE Method\n\n- 参考 1: [The USE Method](http://www.brendangregg.com/usemethod.html)\n- 参考 2: [USE Method: Linux Performance Checklist](http://www.brendangregg.com/USEmethod/use-linux.html)\n  各リソース(CPU, disks, busses, ...)の以下の項目についてチェックする\n- utilization: リソースがビジー状態になった平均時間\n- saturation(さちる、飽和): キューに積まれてる長さ、キューイングされてる時間\n- errors: エラーイベントの数\n\n## Hardware\n\n```\n-- CPU Interconnect -- |CPU| -- Memory Bus -- |DRAM|\n\n-- I/O Bus -- |I/O Bridge| -- |I/O Controller| -- |Disk|\n                                               -- |Disk|\n                                               -- |Swap|\n                           -- |Network Controller|| -- |Port|\n                                                    -- |Port|\n```\n\nUSE Method: Checklist\n\n## Off-CPU Analysis\n\n- 参考 1: [Off-CPU Analysis](http://www.brendangregg.com/offcpuanalysis.html)\n- Off-CPU の状態にフォーカスして解析を行うこと\n- スレッドは、ファイルシステム、ネットワーク IO、同期ロック、ページング/スワッピング、明示的なタイマーやシグナル、などを理由に CPU を離れる(Off-CPU)\n\n```\n(Runnable) -- schedule                                -\u003e (Executing) -- anon. major fault -\u003e (Anon. Paging)\n           \u003c- preempted or time quantum expired       --             \u003c- page in           --\n           \u003c- wakeup -- (Sleep) \u003c- I/O wait           --\n           \u003c- acquire -- (Lock) \u003c- block              --\n           \u003c- work arrives -- (Idle) \u003c- wait for work --\n\nCPU Sampling -----------------------------------------------\u003e\n     |  |  |  |  |  |  |                      |  |  |  |  |\n     A  A  A  A  B  B  B                      B  A  A  A  A\n    A(---------.                                .----------)\n               |                                |\n               B(--------.                   .--)\n                         |                   |         user-land\n   - - - - - - - - - - syscall - - - - - - - - - - - - - - - - -\n                         |                   |         kernel\n                         X     Off-CPU       |\n                       block . . . . . interrupt\n```\n\n## CPU Profile Method\n\n- 参考: [Flame Graphs](http://www.brendangregg.com/flamegraphs.html)\n- CPU のプロファイルを取得する\n- すべてのソフトウェアの CPU 使用率から 1%以上のものを把握する\n- それらの CPU 使用率からパフォーマンス問題が広いものを発見する\n\n```\nOS\n| Applications            |\n|      | System libraries |\n -------------------------\n| System Call Interface   |\n -------------------------\n| Linux Kernel                                       |\n| VFS                    | Sockets  | Scheduler      |\n| File Systems           | TCP/UDP  | Virtual Memory |\n| Volume Manager         | IP       |                |\n| Block Device Interface | Ethernet |                |\n| ------------------------\n| Device Drivvers         |\n -------------------------\n| Firmware                |\n -------------------------\n\nHardware\n|CPU| -- Memory Bus -- |DRAM|\n|   | -- I/O Bus -- |I/O Bridge| -- |I/O Controller| -- |Disk|\n                    |          |                     -- |Disk|\n                    |          |                     -- |Swap|\n                    |          | -- |Network Controller|| -- |Port|\n                    |          |                          -- |Port|\n```\n\n- http://cdn.oreillystatic.com/en/assets/1/event/122/Linux%20perf%20tools%20Presentation.pdf\n","UpdatedAt":"2021-04-04T12:30:50.3850786+09:00"},{"Text":"# Observability tools basic\n\nPC のリソースの利用状況や正常性、エラーをチェックするためのコマンド集です。\n\n## sysstat のインストール\n\n```bash\n$ sudo yum install sysstat\n```\n\n## uptime\n\n```bash\n# 現在の時刻 up 起動時間, ログインユーザ数 user, load avelage: 1分, 5分, 30分\n$ uptime\n23:51:26 up 21:31,  1 user,  load average: 30.02, 26.43, 19.02\n```\n\n- 現在の時刻がずれている場合\n  date でタイムゾーンをチェック\n\n```bash\n$ date\n2016年  2月 28日 日曜日 11:55:54 JST\n```\n\nntp で時刻同期をチェック\n\n```bash\n$ ntpq -p\n     remote           refid      st t when poll reach   delay   offset  jitter\n==============================================================================\n ntp.kiba.net    189.130.221.188  2 u   31   64    1   24.292   -0.229   0.000\n ec2-54-64-6-78. 133.243.238.164  2 u   31   64    1   17.889    0.627   0.000\n```\n\nntp の設定をチェック\n\n```bash\n$ vim -R /etc/ntp.conf\n```\n\n- 起動時間が短い場合\n  リブートした覚えがないのに、これが短い場合 PC が何かの原因でリブートした可能性がある\n\n- load avelage\n  load avelage とは、現在 CPU が実行しているタスク数のこと。\n  つまり、CPU のスレッド数よりも大きい場合は、処理が間に合っていないことになる。\n\nこれには、割り込み不可能な IO でブロックされているプロセスも含まれているので、ディスク IO が間に合っていない場合などによくこの値が高くなる。\n\nまた、load avelage が、1 分間、5 分間、15 分間の指数移動平均で表示されるので、負荷が時間経過とともにどのように変化したかがわかる。\n\n15 分間の load average より、5, 1 分間の load average が非常に大きい場合、今現在なにかが起きている可能性がある。\nまた、5, 1 分間の load average が非常に少ない場合、今現在はなにも起きていないが、5 ～ 15 分前になにか起きていた可能性がある。\n\n## dmesg | less\n\n```bash\n$ dmesg | less\n\n[1880957.563150] perl invoked oom-killer: gfp_mask=0x280da, order=0, oom_score_adj=0\n[...]\n[1880957.563400] Out of memory: Kill process 18694 (perl) score 246 or sacrifice child\n[1880957.563408] Killed process 18694 (perl) total-vm:1972392kB, anon-rss:1953348kB, file-rss:0kB\n[2320864.954447] TCP: Possible SYN flooding on port 7001. Dropping request.  Check SNMP counters.\n```\n\noom-killer と TCP のリクエストのドロップなど、エラーを含むシステムの情報を得ることができます。\nなにか起きてると思ったらすぐにチェックすべき項目です。\n\n## vmstat 1 -t\n\n```bash\n$ vmstat 1 -t\nprocs -----------memory---------- ---swap-- -----io---- -system-- ------cpu----- -----timestamp-----\n r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st                 UTC\n 2  0      0 259516    888 1476192    0    0    84  1514 1191 2660 10  4 83  1  2 2017-03-04 03:35:53\n 5  0      0 259032    888 1476224    0    0     0    19 1015 2444  7  3 90  0  0 2017-03-04 03:35:54\n 0  0      0 259268    888 1476228    0    0     0    25 1253 2774 16  8 69  0  6 2017-03-04 03:35:55\n 0  0      0 259236    888 1476236    0    0     0    46  993 2469  6  1 93  0  0 2017-03-04 03:35:56\n 0  0      0 259004    888 1476252    0    0     0    27 1168 2941  5  5 88  0  2 2017-03-04 03:35:57\n^C\n```\n\n1 秒間ごとに仮想メモリの統計を表示します。\n一行目はシステム起動時からの平均。\n\nr : CPU で実行中および順番を待っているプロセスの数。これは I/O を含んでいないので、CPU の飽和状態を見るのに、ロードアベレージよりも良いシグナルになります。言い換えると、\"r\"の値が CPU 数よりも多ければ飽和状態ということです。\n\nfree : キロバイトでの空きメモリー量。数えられないぐらいの桁数が表示されていたら、十分なメモリーがあります。7 番目に出てくる free -m コマンドは、空きメモリのより詳しい説明を表示してくれます。\n\nsi, so : スワップインとスワップアウト。ゼロでない値があれば、メモリ不足。\n\nus, sy, id, wa, st : CPU 時間の内訳で、すべての CPU に対する平均値。それぞれ、ユーザ時間、システム(カーネル)時間、アイドル時間、I/O 待ち時間、steal された時間(他のゲストマシンや、Xen の場合ゲストの分離されたドライバードメインによる steal)。\n\nCPU 時間の内訳で、user と system 時間を足すことで CPU がビジーかどうか確認できるでしょう。I/O 待ちが一定の数値を示しているならディスクがボトルネックです。この時、タスクはディスク I/O 待ちでブロックされてしまうため、CPU はアイドル状態になってしまっています。従って、I/O 待ちは CPU アイドル時間の別の形と考えられ、なぜアイドルなのかを調べる手がかりになり得ます。\n\nシステム時間は、I/O 処理に必要です。20%を超えるような高いシステム時間は、詳しく調べる必要があると言えるでしょう。おそらくカーネルが I/O を効率よく処理できていない状態です。\n\n上の例では、CPU 時間はほとんどユーザレベルになっており、つまりアプリケーションレベルが使用していることを示しています。CPU は平均 90%以上使用されています。これは必ずしも問題とは言えず、「r」列で飽和状態の程度を調べましょう。\n\n## mpstat -P ALL 1\n\n```bash\n$ mpstat -P ALL 1\nLinux 3.13.0-49-generic (titanclusters-xxxxx)  07/14/2015  _x86_64_ (32 CPU)\n\n07:38:49 PM  CPU   %usr  %nice   %sys %iowait   %irq  %soft  %steal  %guest  %gnice  %idle\n07:38:50 PM  all  98.47   0.00   0.75    0.00   0.00   0.00    0.00    0.00    0.00   0.78\n07:38:50 PM    0  96.04   0.00   2.97    0.00   0.00   0.00    0.00    0.00    0.00   0.99\n07:38:50 PM    1  97.00   0.00   1.00    0.00   0.00   0.00    0.00    0.00    0.00   2.00\n07:38:50 PM    2  98.00   0.00   1.00    0.00   0.00   0.00    0.00    0.00    0.00   1.00\n07:38:50 PM    3  96.97   0.00   0.00    0.00   0.00   0.00    0.00    0.00    0.00   3.03\n[...]\n```\n\nCPU ごとの CPU 時間の内訳を表示します。\n\ntop 中に 1 でも見れる。\n\n## pidstat 1\n\n```bash\n$ pidstat 1\nLinux 3.13.0-49-generic (titanclusters-xxxxx)  07/14/2015    _x86_64_    (32 CPU)\n\n07:41:02 PM   UID       PID    %usr %system  %guest    %CPU   CPU  Command\n07:41:03 PM     0         9    0.00    0.94    0.00    0.94     1  rcuos/0\n07:41:03 PM     0      4214    5.66    5.66    0.00   11.32    15  mesos-slave\n07:41:03 PM     0      4354    0.94    0.94    0.00    1.89     8  java\n07:41:03 PM     0      6521 1596.23    1.89    0.00 1598.11    27  java\n07:41:03 PM     0      6564 1571.70    7.55    0.00 1579.25    28  java\n07:41:03 PM 60004     60154    0.94    4.72    0.00    5.66     9  pidstat\n\n07:41:03 PM   UID       PID    %usr %system  %guest    %CPU   CPU  Command\n07:41:04 PM     0      4214    6.00    2.00    0.00    8.00    15  mesos-slave\n07:41:04 PM     0      6521 1590.00    1.00    0.00 1591.00    27  java\n07:41:04 PM     0      6564 1573.00   10.00    0.00 1583.00    28  java\n07:41:04 PM   108      6718    1.00    0.00    0.00    1.00     0  snmp-pass\n07:41:04 PM 60004     60154    1.00    4.00    0.00    5.00     9  pidstat\n^C\n```\n\npidstat は、top のプロセスごとの概要とも言えるものですが、スクリーンをクリアする代わりに連続して概要を表示します。これは、時系列でのパターンを見るのに便利で、見たものを調査の記録にとっておく(コピペ)のにもよいでしょう。\n\n上の例では、2 つの java プロセスが CPU を消費している原因だとわかります。%CPU 列は全 CPU に対する使用率ですが、1591%という表示から java プロセスがほぼ 16CPU 分を使用していると分かります。\n\n## iostat -xz 1\n\n```bash\n$ iostat -xz 1\nLinux 3.13.0-49-generic (titanclusters-xxxxx)  07/14/2015  _x86_64_ (32 CPU)\n\navg-cpu:  %user   %nice %system %iowait  %steal   %idle\n          73.96    0.00    3.73    0.03    0.06   22.21\n\nDevice:   rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util\nxvda        0.00     0.23    0.21    0.18     4.52     2.08    34.37     0.00    9.98   13.80    5.42   2.44   0.09\nxvdb        0.01     0.00    1.02    8.94   127.97   598.53   145.79     0.00    0.43    1.78    0.28   0.25   0.25\nxvdc        0.01     0.00    1.02    8.86   127.79   595.94   146.50     0.00    0.45    1.82    0.30   0.27   0.26\ndm-0        0.00     0.00    0.69    2.32    10.47    31.69    28.01     0.01    3.23    0.71    3.98   0.13   0.04\ndm-1        0.00     0.00    0.00    0.94     0.01     3.78     8.00     0.33  345.84    0.04  346.81   0.01   0.00\ndm-2        0.00     0.00    0.09    0.07     1.35     0.36    22.50     0.00    2.55    0.23    5.62   1.78   0.03\n[...]\n^C\n```\n\nブロックデバイス(ディスク)に適用されるワークロードと、その結果のパフォーマンスの両方を理解出来る素晴らしいツールです。見方は以下の通り。\n\nr/s, w/s, rkB/s, wkB/s : 秒間にデバイスに送られた読み出し回数、書き込み回数、読み出しキロバイト、書き込みキロバイトを表します。ワークロードの特徴をつかむのに使いましょう。パフォーマンスの問題はたいていの場合、単に過剰な負荷がかけられていることが原因です。\nawait : I/O の平均時間のミリ秒表示。これは、アプリケーションが待たされた時間で、キューに入っていた時間と実際のサービス時間の両方を含んでいます。期待した平均時間より長い場合、デバイスが飽和状態か、デバイス自体に問題がある可能性があります。\n\navgqu-sz : デバイスに対して発行されたリクエストの平均数。(複数のバックエンドディスクの前に立つ仮想デバイスは特に、デバイスはリクエストを通常は並行に処理しますが)1 より大きい値は、飽和状態を表します。\n\n%util : デバイスの使用率。これは、実際にはビジーな割合で、デバイスが仕事をした時間を秒ごとに出したものです。デバイスにもよりますが、一般的に 60%より大きい値はパフォーマンスの劣化(await にも表れます)につながります。100％に近い値は通常、飽和状態を意味します。\n\nストレージデバイスがたくさんのバックエンドディスクを持つ論理ディスクデバイスの場合、使用率が 100%ということは、なんらかの I/O が 100%の時間処理され続けているということである一方で、バックエンドディスクは飽和状態からは程遠い可能性が高く、もっと多くの処理が可能なはずです。\n\n頭にとどめておきたいのは、ディスク I/O のパフォーマンスが悪いことは、必ずしもアプリケーションの問題になるわけではないということです。I/O を非同期に実行するために、多くのテクニックがよく使われるので、アプリケーションはブロックされず、レイテンシも直接は影響してこないのです(例、読み出しには先読み、書き込みにはバッファリング)。\n\n## sar -n DEV 1\n\n```bash\n$ sar -n DEV 1\nLinux 3.13.0-49-generic (titanclusters-xxxxx)  07/14/2015     _x86_64_    (32 CPU)\n\n12:16:48 AM     IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s   %ifutil\n12:16:49 AM      eth0  18763.00   5032.00  20686.42    478.30      0.00      0.00      0.00      0.00\n12:16:49 AM        lo     14.00     14.00      1.36      1.36      0.00      0.00      0.00      0.00\n12:16:49 AM   docker0      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\n\n12:16:49 AM     IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s   %ifutil\n12:16:50 AM      eth0  19763.00   5101.00  21999.10    482.56      0.00      0.00      0.00      0.00\n12:16:50 AM        lo     20.00     20.00      3.25      3.25      0.00      0.00      0.00      0.00\n12:16:50 AM   docker0      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\n^C\n```\n\nこのツールで、ワークロードの目安になるネットワークインターフェースのスループットである rxkB/s と txkB/s を調べましょう。また、なんらかの制限に達していないかどうかも確認しましょう。上の例では、eth0 が 22Mbytes/s、つまり 176Mbits/sec を受信しています(つまり 1Gbit/sec の制限にひっかかっています)。\n\nこのバージョンでは、デバイスの使用率(全二重での上り下り両方での最大値)として%ifutil も表示されていて、これは Brendan の nicstat ツールでの計測のためにも使います。ただし、nicstat と同じく、なかなか正しい値を示してはくれず、上の例(0.00)のようにちゃんと動いていないように見える場合が多いようです。\n\n## sar -n TCP,ETCP 1\n\n```bash\n$ sar -n TCP,ETCP 1\nLinux 3.13.0-49-generic (titanclusters-xxxxx)  07/14/2015    _x86_64_    (32 CPU)\n\n12:17:19 AM  active/s passive/s    iseg/s    oseg/s\n12:17:20 AM      1.00      0.00  10233.00  18846.00\n\n12:17:19 AM  atmptf/s  estres/s retrans/s isegerr/s   orsts/s\n12:17:20 AM      0.00      0.00      0.00      0.00      0.00\n\n12:17:20 AM  active/s passive/s    iseg/s    oseg/s\n12:17:21 AM      1.00      0.00   8359.00   6039.00\n\n12:17:20 AM  atmptf/s  estres/s retrans/s isegerr/s   orsts/s\n12:17:21 AM      0.00      0.00      0.00      0.00      0.00\n^C\n```\n\nこれは、いくつかの重要な TCP 関連メトリクスの概要です。以下を含んでいます。\n\nactive/s : 1 秒あたりのローカルから接続を開始した TCP コネクション数(例、connect()による接続)\npassive/s : 1 秒あたりのリモートから接続を開始した TCP コネクション数(例、accept()による接続)\nretrans/s : 1 秒あたりの TCP 再送数\nactive/s と passive/s の数は、それぞれ新しく受け入れたコネクション数と新しく下流に向けて張ったコネクション数で、サーバーの負荷をおおまかに把握するのに便利です。active を外向き、passive を内向きと考えるのに便利ですが、厳密に正しいとは言えません(ローカルホストからローカルホストへのコネクションなどを考慮する必要があるなど)。\n\n再送はネットワークあるいはサーバーの問題のサインです。ネットワークの信頼性が低い(例、パブリックなインターネット)か、サーバーが過負荷でパケットをドロップしているかでしょう。上の例では、1 秒に 1 TCP コネクションしか生成されていません。\n\n## top\n\n```bash\n$ top\ntop - 00:15:40 up 21:56,  1 user,  load average: 31.09, 29.87, 29.92\nTasks: 871 total,   1 running, 868 sleeping,   0 stopped,   2 zombie\n%Cpu(s): 96.8 us,  0.4 sy,  0.0 ni,  2.7 id,  0.1 wa,  0.0 hi,  0.0 si,  0.0 st\nKiB Mem:  25190241+total, 24921688 used, 22698073+free,    60448 buffers\nKiB Swap:        0 total,        0 used,        0 free.   554208 cached Mem\n\n   PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\n 20248 root      20   0  0.227t 0.012t  18748 S  3090  5.2  29812:58 java\n  4213 root      20   0 2722544  64640  44232 S  23.5  0.0 233:35.37 mesos-slave\n 66128 titancl+  20   0   24344   2332   1172 R   1.0  0.0   0:00.07 top\n  5235 root      20   0 38.227g 547004  49996 S   0.7  0.2   2:02.74 java\n  4299 root      20   0 20.015g 2.682g  16836 S   0.3  1.1  33:14.42 java\n     1 root      20   0   33620   2920   1496 S   0.0  0.0   0:03.82 init\n     2 root      20   0       0      0      0 S   0.0  0.0   0:00.02 kthreadd\n     3 root      20   0       0      0      0 S   0.0  0.0   0:05.35 ksoftirqd/0\n     5 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 kworker/0:0H\n     6 root      20   0       0      0      0 S   0.0  0.0   0:06.94 kworker/u256:0\n     8 root      20   0       0      0      0 S   0.0  0.0   2:38.05 rcu_sched\n\n```\n\ntop コマンドには、これより前に見てきたメトリクスの多くが含まれています。負荷が変わりやすいことを示してくれるここまで見てきたコマンドと違って、ざっくりと確認したいときには便利でしょう。\n\ntop の良くないところとしては、時間を追って表れるパターンをつかみにくいことで、これらは連続して出力を出してくれる vmstat や pidstat などの方がよりはっきりと分かります。間欠的に現れる現象についても、出力を素早く停止(Ctrl-S で一時停止、Ctrl-S で再開)できないとスクリーンがクリアされて消えてしまいます。\n\n## ps\n\n### ps -eF f\n\n```bash\n$ ps -eF f\nUID        PID  PPID  C    SZ   RSS PSR STIME TTY      STAT   TIME CMD\nroot         2     0  0     0     0   0 08:46 ?        S      0:00 [kthreadd]\nroot         3     2  0     0     0   0 08:46 ?        S      0:00  \\_ [ksoftirqd/0]\nroot         6     2  0     0     0   0 08:46 ?        S      0:00  \\_ [kworker/u2:0]\nroot         7     2  0     0     0   0 08:46 ?        S      0:00  \\_ [migration/0]\nroot         8     2  0     0     0   0 08:46 ?        S      0:00  \\_ [rcu_bh]\n...\nroot     12009     1  0 56550  5152   0 08:48 ?        Ss     0:00 /usr/sbin/httpd -DFOREGROUND\napache   12010 12009  0 56550  3000   0 08:48 ?        S      0:00  \\_ /usr/sbin/httpd -DFOREGROUND\napache   12011 12009  0 56550  3000   0 08:48 ?        S      0:00  \\_ /usr/sbin/httpd -DFOREGROUND\napache   12012 12009  0 56550  3000   0 08:48 ?        S      0:00  \\_ /usr/sbin/httpd -DFOREGROUND\napache   12013 12009  0 56550  3000   0 08:48 ?        S      0:00  \\_ /usr/sbin/httpd -DFOREGROUND\n```\n\n### watch -n 1 -d \"ps auxw | grep ' R' | grep -v grep\"\n\n```bash\n$ watch -n 1 -d \"ps auxw | grep ' R' | grep -v grep\"\nroot        10  0.0  0.0      0     0 ?        R    01:56   0:02 [rcu_sched]\nroot       276  0.0  0.0      0     0 ?        R    01:56   0:01 [xfsaild/sda1]\n...\n\n$ watch -n 1 -d \"ps auxw | grep ' D' | grep -v grep\"\n...\n```\n\ntop コマンドでもある程度のプロセス状態を見ることは可能であるが、より正確にプロセスの状態を見たい場合は ps を利用するとよい。\n例えば、実行キューが詰まっている場合は R で grep したり、IO が詰まっている場合は D で grep したりすると、どのプロセスが悪さをしているかがわかる。\n\nステータス\n\n- R Run TASK_RUNNING 実行可能な状態。CPU が空きさえすれば、いつでも実行可能な状態。\n- S Sleep TASK_INTERRUPTIBLE 割り込み可能な待ち状態。おもに復帰時間が予測不能な長時間の待ち状態。スリープやユーザからの入力待ちなど。\n- D Disk Sleep TASK_UNINTERRUPTIBLE 割り込み不可能な待ち状態。おもに短時間で復帰する場合の待ち状態。ディスクの入出力待ち。\n- T Stopped TASK_STOPPED サスペンドシグナルを送られて実行中断になった状態。リジュームされるまでスケジューリングされない。\n- Z Zombie TASK_ZOMBIE ゾンビ状態。子プロセスが exit して親プロセスにリープされるまでの状態。\n\n### ps -eo [fields]\n\n- 表示フィールドをカスタマイズする\n\n```bash\n$ ps -eo user,sz,rss,minflt,majflt,pcpu,args\n```\n\n## /proc/interrupts\n\n```\n$ cat /proc/interrupts\n\n$ watch -n 1 -d \"cat /proc/interrupts | egrep 'RES|CAL|TLB'\"\n```\n\n- /proc/interrupts で割り込みを表示できる\n- 割り込みを少なくするようにチューニングすることはパフォーマンス向上につながる\n- 逆に、割り込みが多すぎるとパケットや、プロセスのつまりの原因になる\n\n## 参考\n\n- [6 万ミリ秒でできる Linux パフォーマンス分析]: https://yakst.com/ja/posts/3601?platform=hootsuite\n  [原文]: http://techblog.netflix.com/2015/11/linux-performance-analysis-in-60s.html\n- [Linux Performance Tools]: http://techblog.netflix.com/2015/08/netflix-at-velocity-2015-linux.html\n","UpdatedAt":"2021-03-15T21:55:34.8175027+09:00"},{"Text":"# Observability tools intermediate\n\n## strace\n\n- システムコールをトレースする\n\n```\n$ sudo strace -tttT -p 12010\nProcess 12010 attached\n1490533750.045816 accept4(4, {sa_family=AF_INET6, sin6_port=htons(37074), inet_pton(AF_INET6, \"::1\", \u0026sin6_addr), sin6_flowinfo=0, sin6_scope_id=0}, [28], SOCK_CLOEXEC) = 9 \u003c5.685130\u003e\n1490533755.731239 getsockname(9, {sa_family=AF_INET6, sin6_port=htons(80), inet_pton(AF_INET6, \"::1\", \u0026sin6_addr), sin6_flowinfo=0, sin6_scope_id=0}, [28]) = 0 \u003c0.000075\u003e\n1490533755.731445 fcntl(9, F_GETFL)     = 0x2 (flags O_RDWR) \u003c0.000059\u003e\n1490533755.731619 fcntl(9, F_SETFL, O_RDWR|O_NONBLOCK) = 0 \u003c0.000098\u003e\n1490533755.731898 read(9, \"GET / HTTP/1.1\\r\\nUser-Agent: curl\"..., 8000) = 73 \u003c0.000061\u003e\n1490533755.732162 stat(\"/var/www/html/\", {st_mode=S_IFDIR|0755, st_size=23, ...}) = 0 \u003c0.000068\u003e\n1490533755.732467 stat(\"/var/www/html/index.html\", {st_mode=S_IFREG|0644, st_size=12, ...}) = 0 \u003c0.000059\u003e\n1490533755.732663 open(\"/var/www/html/index.html\", O_RDONLY|O_CLOEXEC) = 10 \u003c0.000084\u003e\n1490533755.732874 read(9, 0x7fa371536278, 8000) = -1 EAGAIN (Resource temporarily unavailable) \u003c0.000053\u003e\n1490533755.733033 mmap(NULL, 12, PROT_READ, MAP_SHARED, 10, 0) = 0x7fa36f7a4000 \u003c0.000052\u003e\n1490533755.733168 writev(9, [{\"HTTP/1.1 200 OK\\r\\nDate: Sun, 26 M\"..., 240}, {\"hello world\\n\", 12}], 2) = 252 \u003c0.001855\u003e\n1490533755.735228 munmap(0x7fa36f7a4000, 12) = 0 \u003c0.000064\u003e\n1490533755.735395 write(7, \"::1 - - [26/Mar/2017:13:09:15 +0\"..., 79) = 79 \u003c0.000075\u003e\n1490533755.735559 times({tms_utime=0, tms_stime=0, tms_cutime=0, tms_cstime=0}) = 431041330 \u003c0.000058\u003e\n1490533755.735809 close(10)             = 0 \u003c0.000056\u003e\n1490533755.735956 poll([{fd=9, events=POLLIN}], 1, 5000) = 1 ([{fd=9, revents=POLLIN}]) \u003c0.000051\u003e\n1490533755.736094 read(9, \"\", 8000)     = 0 \u003c0.000048\u003e\n1490533755.736223 shutdown(9, SHUT_WR)  = 0 \u003c0.000118\u003e\n1490533755.736412 poll([{fd=9, events=POLLIN}], 1, 2000) = 1 ([{fd=9, revents=POLLIN|POLLHUP}]) \u003c0.000049\u003e\n1490533755.736557 read(9, \"\", 512)      = 0 \u003c0.000045\u003e\n1490533755.736664 close(9)              = 0 \u003c0.000155\u003e\n1490533755.736885 read(5, 0x7ffc8fdf43ff, 1) = -1 EAGAIN (Resource temporarily unavailable) \u003c0.000040\u003e\n1490533755.736998 accept4(4,\n\n\n# ファイルに出力する\n$ sudo strace -tttT -p 12010 -o test.log\n\n# 統計情報を表示する\n$ sudo strace -p 21479 -c\nstrace: Process 21479 attached\n^Cstrace: Process 21479 detached\n% time     seconds  usecs/call     calls    errors syscall\n------ ----------- ----------- --------- --------- ----------------\n  0.00    0.000000           0         8           futex\n  0.00    0.000000           0         1           epoll_wait\n------ ----------- ----------- --------- --------- ----------------\n100.00    0.000000                     9           total\n```\n\nプロセスが呼び出すシステムコールをトレースする。\nこのときシステムコールがエラーになる箇所を探すと、不具合の手掛かりになる。\n\n## ltrace\n\n- 共有ライブラリの関数呼び出しをトレースする\n- 仕組み\n  - 環境変数 PATH をたどって実行バイナリの絶対パスを調べる\n  - バイナリと依存しているすべての共有ライブラリを elfutils を用いて読み込み、関数のシンボル名とその PLT 内のアドレスのリストを取得する\n  - fork して子プロセス内で ptrace(PTRACE_TRACEME, ...) をセットし、それからバイナリを実行する\n    - ptrace は、実行中のプロセスに対して、レジスタの書き換えやメモリ上のデータの書き換えといった操作ができるシステムコール\n  - wait() で待っている親プロセスに SIGTRAP が伝わる\n  - 親プロセスでは先ほど作っておいたリストを元に、各関数の PLT の該当アドレスにブレークポイント命令 (i386 では 0xcc) を書き込む 。このとき、書き換える前の値を保存しておく\n  - これにより子プロセスが共有ライブラリの関数を呼び出すたびに SIGTRAP が発生するので、親プロセスはループ内で wait で SIGTRAP を待って適宜ブレークポイントしつつ、子プロセスが終了するまでループを回す\n  - PLT (Procedure Linkage Table) には ELF の共有ライブラリの関数を呼び出すときに必ず経由するコードが各関数ごとに用意されています。\n    - ltrace はこの PLT にブレークポイントを書き込むことによって、共有ライブラリの関数呼び出しをフックしています。\n\n```bash\n# コマンドをトレースする\n$ sudo ltrace wget http://127.0.0.1/\n\n# ファイルに出力する\n$ sudo ltrace -o log.txt wget http://127.0.0.1/\n```\n\n## lsof\n\nファイルディスクリプタを使っているプロセスを調べる\n\n```\n$ sudo lsof -i:80\nCOMMAND   PID   USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\nhttpd   12009   root    4u  IPv6  31227      0t0  TCP *:http (LISTEN)\nhttpd   12010 apache    4u  IPv6  31227      0t0  TCP *:http (LISTEN)\nhttpd   12011 apache    4u  IPv6  31227      0t0  TCP *:http (LISTEN)\nhttpd   12012 apache    4u  IPv6  31227      0t0  TCP *:http (LISTEN)\nhttpd   12013 apache    4u  IPv6  31227      0t0  TCP *:http (LISTEN)\nhttpd   12014 apache    4u  IPv6  31227      0t0  TCP *:http (LISTEN)\n\n```\n\n## sar\n\nSystem Activity Reporter\n\n```bash\n$ sar -n TCP,ETCP,DEV 1\n```\n\n## iotop\n\n```bash\n$ sudo iotop\nTotal DISK READ :       0.00 B/s | Total DISK WRITE :       0.00 B/s\nActual DISK READ:       0.00 B/s | Actual DISK WRITE:       0.00 B/s\n  TID  PRIO  USER     DISK READ  DISK WRITE  SWAPIN     IO\u003e    COMMAND\n24094 be/4 root        0.00 B/s    0.00 B/s  0.00 %  0.03 % [kworker/0:2]\n23552 be/4 apache      0.00 B/s    0.00 B/s  0.00 %  0.00 % httpd -DFOREGROUND\n    1 be/4 root        0.00 B/s    0.00 B/s  0.00 %  0.00 % systemd --system --deserialize 41\n    2 be/4 root        0.00 B/s    0.00 B/s  0.00 %  0.00 % [kthreadd]\n    3 be/4 root        0.00 B/s    0.00 B/s  0.00 %  0.00 % [ksoftirqd/0]\n```\n\n## slabtop\n\n- スラブアロケータのメモリ利用量\n- https://www.ibm.com/developerworks/jp/linux/library/l-linux-slab-allocator/\n\n```bash\n$ slabtop\nActive / Total Objects (% used)    : 772062 / 781600 (98.8%)\n Active / Total Slabs (% used)      : 15524 / 15524 (100.0%)\n Active / Total Caches (% used)     : 65 / 97 (67.0%)\n Active / Total Size (% used)       : 83137.34K / 84572.69K (98.3%)\n Minimum / Average / Maximum Object : 0.01K / 0.11K / 15.88K\n\n  OBJS ACTIVE  USE OBJ SIZE  SLABS OBJ/SLAB CACHE SIZE NAME\n128860 127969  99%    0.02K    758      170      3032K fsnotify_event_holder\n125440 124298  99%    0.03K    980      128      3920K kmalloc-32\n 98304  97251  98%    0.01K    192      512       768K kmalloc-8\n 86751  86751 100%    0.19K   4131       21     16524K dentry\n 75387  75387 100%    0.10K   1933       39      7732K buffer_head\n 73984  72910  98%    0.06K   1156       64      4624K kmalloc-64\n 57856  56381  97%    0.02K    226      256       904K kmalloc-16\n 31977  31977 100%    0.08K    627       51      2508K selinux_inode_security\n 16980  16980 100%    1.06K   1132       15     18112K xfs_inode\n 13962  13962 100%    0.15K    537       26      2148K xfs_ili\n 12077  11813  97%    0.58K    929       13      7432K inode_cache\n 11700  11700 100%    0.11K    325       36      1300K sysfs_dir_cache\n  8892   8650  97%    0.21K    494       18      1976K vm_area_struct\n  7462   7462 100%    0.57K    533       14      4264K radix_tree_node\n```\n\n## pcstat\n\n- https://github.com/tobert/pcstat\n- ページキャッシュ統計を表示する\n- データベースなどのパフォーマンス分析で使える\n\n```bash\ncurl -L -o pcstat https://github.com/tobert/pcstat/raw/2014-05-02-01/pcstat.x86_64\nchmod 755 pcstat\n$ ~/pcstat data*\n|-----------+----------------+------------+-----------+---------|\n| Name      | Size           | Pages      | Cached    | Percent |\n|-----------+----------------+------------+-----------+---------|\n| data00    | 6682           | 2          | 2         | 100.000 |\n| data01    | 12127          | 3          | 3         | 100.000 |\n| data02    | 11876          | 3          | 3         | 100.000 |\n|-----------+----------------+------------+-----------+---------|\n```\n\n## tiptop\n\n- VM では利用できない（PMCs が enabled である必要がある)\n- Mcycle: CPU cycles\n- Minst: Instructions\n- IPC(Instructions Per Clock cycle): Executed instructions per cycle\n- %MISS: Cache miss per instructions (in %)\n- %BMIS: Branch misprediction per instruction (in %)\n\n```\n$ tiptop\ntiptop -                                                        [root]\nTasks: 241 total,   2 displayed                                                                     screen  0: default\n\n  PID [ %CPU] %SYS    P   Mcycle   Minstr   IPC  %MISS  %BMIS  %BUS COMMAND\n 3092+   0.5   0.0    0     1.84     1.35  0.73   0.97   0.95   0.1 beam.smp\n 2386+   0.5   0.0    0     0.24     0.09  0.38   8.95   1.11   0.3 mysqld\n```\n\n## atop\n\n- top ライクなツールだが、top よりも細かいシステム情報がわかる\n- cpu の irq や memory, disk, network の利用量まで見れる\n\n```\n$ atop\nATOP - benchmark-1-hostname                                                        2017/03/27  03:32:38                                                        -----------                                                        10s elapsed\nPRC | sys    0.01s |  user   0.01s |              |               | #proc     82 |  #trun      2 |              | #tslpi    98  | #tslpu     0 |               | #zombie    0 | clones     0  |              |               | no  procacct |\nCPU | sys       0% |  user      0% |              |  irq       0% |              |  idle    100% |              | wait      0%  |              |               | steal     0% | guest     0%  | curf 3.20GHz |               | curscal   ?% |\nCPL | avg1    0.00 |               | avg5    0.02 |               | avg15   0.05 |               |              | csw      139  |              | intr      96  |              |               |              | numcpu     1  |              |\nMEM | tot     3.5G |  free    2.9G | cache 478.9M |  dirty   0.0M | buff    0.9M |  slab   87.3M | slrec  60.1M | shmem  16.4M  | shrss   0.0M | shswp   0.0M  |              | vmbal   0.0M  |              | hptot   0.0M  | hpuse   0.0M |\nSWP | tot     0.0M |  free    0.0M |              |               |              |               |              |               |              |               |              |               | vmcom 244.9M | vmlim   1.8G  |              |\nNET | transport    |  tcpi       1 | tcpo       1 |               | udpi       0 |  udpo       0 | tcpao      0 | tcppo      0  |              | tcprs      0  | tcpie      0 | tcpor      0  | udpnp      0 |               | udpie      0 |\nNET | network      |  ipi        1 |              |  ipo        1 | ipfrw      0 |               | deliv      1 |               |              |               |              |               | icmpi      0 | icmpo      0  |              |\nNET | eth0    ---- |  pcki       6 |              |  pcko       1 | si    0 Kbps |  so    1 Kbps |              | coll       0  | mlti       0 |               | erri       0 | erro       0  | drpi       5 |               | drpo       0 |\n\n  PID              TID            SYSCPU            USRCPU             VGROW              RGROW            RUID                EUID                 THR             ST            EXC            S             CPU            CMD         1/1\n  817                -             0.00s             0.01s                0K                 0K            root                root                   5             --              -            S              0%            tuned\n22222                -             0.01s             0.00s                0K                 4K            fabric              fabric                 1             --              -            R              0%            atop\n    1                -             0.00s             0.00s                0K                 0K            root                root                   1             --              -            S              0%            systemd\n```\n\n## dstat\n\n- dstat は python で書かれており、python でプラグインも組み込むことができる\n\n```\n# 表示オプション\n# -t: タイムスタンプ\n# -a: よく使う基本オプション詰め合わせ(cdngy)\n# -c: CPU使用率を表示する\n# -d: DiskIOを表示する\n# -g: ページIN/OUTを表示する(sと一緒に使用する）\n# -s: swapのused/freeを表示する\n# -m: メモリ使用量を表示する\n# -i: 割り込みを表示\n# -p: run, blk, new のプロセス数を表示する\n# -y: 割り込み回数とコンテキストスイッチの回数を表示する\n\n# フィルタリングオプション\n# -C: 特定のコアだけ見る(e.g. -C 0,1,total)\n# -D: 特定のディスクデバイスだけ見る(e.g. -D sda)\n# -N: 特定のネットワークインターフェイスだけ見る(e.g. -N eth0)\n# -I: 特定の割り込みだけ見る(e.g. -I 25)\n\n# その他オプション\n# --output dstat.csv: csvでファイルに書き込む\n\n$ sudo dstat -tai\n\n# -f: 各CPU、インターフェースごとにすべて表示\n$ sudo dstat -taf\n\n# cpuを使ってるプロセスを見る\n$ sudo dstat -ta --top-cpu\n# プロセスのpid, read, writeも表示する\n$ sudo dstat -ta --top-cpu-adv\n\n# ioを使ってるプロセスを見る\n$ sudo dstat -ta --top-io --top-bio\n# プロセスのpid, cpu使用率も表示する\n$ sudo dstat -ta --top-io-adv --top-bio-adv\n\n# vmstat like\n$ sudo dstat -tv\n\n# システム情報や、プラグイン情報を表示\n$ dstat -V\nDstat 0.7.2\nWritten by Dag Wieers \u003cdag@wieers.com\u003e\nHomepage at http://dag.wieers.com/home-made/dstat/\n\nPlatform posix/linux2\nKernel 3.10.0-327.el7.x86_64\nPython 2.7.5 (default, Nov 20 2015, 02:00:19)\n[GCC 4.8.5 20150623 (Red Hat 4.8.5-4)]\n\nTerminal type: xterm-256color (color support)\nTerminal size: 32 lines, 237 columns\n\nProcessors: 1\nPagesize: 4096\nClock ticks per secs: 100\n\ninternal:\n        aio, cpu, cpu24, disk, disk24, disk24old, epoch, fs, int, int24, io, ipc, load, lock, mem, net, page, page24, proc, raw, socket, swap, swapold, sys, tcp, time, udp, unix, vm\n/usr/share/dstat:\n        battery, battery-remain, cpufreq, dbus, disk-tps, disk-util, dstat, dstat-cpu, dstat-ctxt, dstat-mem, fan, freespace, gpfs, gpfs-ops, helloworld, innodb-buffer, innodb-io, innodb-ops, lustre, memcache-hits, mysql-io,\n        mysql-keys, mysql5-cmds, mysql5-conn, mysql5-io, mysql5-keys, net-packets, nfs3, nfs3-ops, nfsd3, nfsd3-ops, ntp, postfix, power, proc-count, qmail, rpc, rpcd, sendmail, snooze, squid, test, thermal, top-bio, top-bio-adv,\n        top-childwait, top-cpu, top-cpu-adv, top-cputime, top-cputime-avg, top-int, top-io, top-io-adv, top-latency, top-latency-avg, top-mem, top-oom, utmp, vm-memctl, vmk-hba, vmk-int, vmk-nic, vz-cpu, vz-io, vz-ubc, wifi\n```\n\n## blktrace\n\n- blktrace はブロック I/O レイヤの入口と出口, そして内部での I/O リクエストの状態をトレースすることができる\n- I/O リクエストは以下のようなパスを通りデバイスへたどり着きます\n  - アプリケーション -\u003e [ファイルシステム -\u003e ページキャッシュ -\u003e ブロック I/O レイヤ -\u003e デバイスドライバ] -\u003e デバイス\n- I/O スケジューラにより I/O リクエストの並び換えや連接ブロックへの I/O リクエストのマージ等が行われているため、ブロック I/O レイヤの入口と出口では I/O リクエストの順番が異なります\n\n```bash\n# デバイスをトレースする\n$ sudo blktrace -d /dev/sda -o test\n\n# トレースした結果を見る\n$ blkparse -i test.blktrace.0\n```\n\n## /proc\n\nMany raw kernel counters\n\n```bash\n\n```\n\n## perf\n\n- 参考: [perf Examples](http://www.brendangregg.com/perf.html)\n- 様々なイベントをトレースできる\n\n```\n# システムのプロファイル\n$ perf top\nSamples: 544  of event 'cpu-clock', Event count (approx.): 39421099\nOverhead  Shared Object                       Symbol\n   9.44%  [kernel]                            [k] _raw_spin_unlock_irqrestore\n   4.81%  perf                                [.] perf_evsel__parse_sample\n   4.50%  libslang.so.2.2.4                   [.] SLsmg_write_chars\n   3.30%  perf                                [.] symbols__insert\n   3.24%  [kernel]                            [k] __do_softirq\n   3.00%  [kernel]                            [k] finish_task_switch\n\n# トレースできるイベント一覧を表示\n$ perf list\n\n# イベントを記録する(ローカルにperf.dataというバイナリで保存される)\n$ perf record -e block:block_rq_issue -ag\n$ ls -l perf.data\n-rw-------. 1 root root 316332  4譛・ 2 12:50 perf.data\n\n# 記録した結果を表示する\n$ perf report\n\n# パフォーマンスカウンタを記録し、表示する\n$ sudo perf stat -a\n^C\n Performance counter stats for 'system wide':\n\n       2277.468427      task-clock (msec)         #    1.000 CPUs utilized\n               119      context-switches          #    0.052 K/sec\n                 0      cpu-migrations            #    0.000 K/sec\n                 4      page-faults               #    0.002 K/sec\n   \u003cnot supported\u003e      cycles\n   \u003cnot supported\u003e      instructions\n   \u003cnot supported\u003e      branches\n   \u003cnot supported\u003e      branch-misses\n\n       2.277409566 seconds time elapsed\n```\n\n## numastat\n\n- 参考: [numastat](https://access.redhat.com/documentation/ja-JP/Red_Hat_Enterprise_Linux/7/html/Performance_Tuning_Guide/sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference-numastat.html)\n- NUMA ノードベースでオペレーティングシステムとプロセッサーのメモリー統計情報 (割り当てヒットとミスなど) を表示する\n- numactl で管理者は指定したスケジュールまたはメモリー配置ポリシーでプロセスを実行することができる。\n- numactl は共有メモリーセグメントやファイルに永続的なポリシーを設定したり、プロセスのプロセッサー親和性やメモリー親和性を設定することもできる。\n\n## CPU の周波数を確認\n\n```\n$ cat /proc/cpuinfo | egrep \"processor|cpu MHz\"\nprocessor       : 0\ncpu MHz         : 1375.675\nprocessor       : 1\ncpu MHz         : 1379.284\nprocessor       : 2\ncpu MHz         : 1443.587\nprocessor       : 3\ncpu MHz         : 1454.012\nprocessor       : 4\ncpu MHz         : 1545.231\nprocessor       : 5\ncpu MHz         : 1438.988\nprocessor       : 6\ncpu MHz         : 1546.319\nprocessor       : 7\ncpu MHz         : 1450.727\nprocessor       : 8\ncpu MHz         : 1544.963\nprocessor       : 9\ncpu MHz         : 1523.568\nprocessor       : 10\ncpu MHz         : 1545.989\nprocessor       : 11\ncpu MHz         : 1546.597\n```\n\n## SystemTap\n\n- SystemTap は、実行している Linux カーネルで簡易情報を取得できるようにするツール\n- パフォーマンスまたは機能（バグ）の問題に関する情報を取得するために使用する\n","UpdatedAt":"2021-03-15T21:55:34.8215066+09:00"},{"Text":"# iostat\n\n- iostat は、指定されたインターバルごとに/proc/diskstats を読んで、 統計情報の計算を行って出力する\n- https://www.kernel.org/doc/Documentation/iostats.txt\n- ソースコード\n  - https://github.com/sysstat/sysstat/blob/master/iostat.c\n\n```\n752 void read_diskstats_stat_work(int curr, char *diskstats)\n753 {\n...\n772         /* major minor name rio rmerge rsect ruse wio wmerge wsect wuse running use aveq dcio dcmerge dcsect dcuse flio fltm */\n773         i = sscanf(line, \"%u %u %s %lu %lu %lu %lu %lu %lu %lu %u %u %u %u %lu %lu %lu %u %lu %u\",\n774                \u0026major, \u0026minor, dev_name,\n775                \u0026rd_ios, \u0026rd_merges_or_rd_sec, \u0026rd_sec_or_wr_ios, \u0026rd_ticks_or_wr_sec,\n776                \u0026wr_ios, \u0026wr_merges, \u0026wr_sec, \u0026wr_ticks, \u0026ios_pgr, \u0026tot_ticks, \u0026rq_ticks,\n777                \u0026dc_ios, \u0026dc_merges, \u0026dc_sec, \u0026dc_ticks,\n778                \u0026fl_ios, \u0026fl_ticks);\n779\n780         if (i \u003e= 14) {\n781             sdev.rd_ios     = rd_ios;\n782             sdev.rd_merges  = rd_merges_or_rd_sec;\n783             sdev.rd_sectors = rd_sec_or_wr_ios;\n784             sdev.rd_ticks   = (unsigned int) rd_ticks_or_wr_sec;\n785             sdev.wr_ios     = wr_ios;\n786             sdev.wr_merges  = wr_merges;\n787             sdev.wr_sectors = wr_sec;\n788             sdev.wr_ticks   = wr_ticks;\n789             sdev.ios_pgr    = ios_pgr;\n790             sdev.tot_ticks  = tot_ticks;\n791             sdev.rq_ticks   = rq_ticks;\n792\n793             if (i \u003e= 18) {\n794                 /* Discard I/O */\n795                 sdev.dc_ios     = dc_ios;\n796                 sdev.dc_merges  = dc_merges;\n797                 sdev.dc_sectors = dc_sec;\n798                 sdev.dc_ticks   = dc_ticks;\n799             }\n800\n801             if (i \u003e= 20) {\n802                 /* Flush I/O */\n803                 sdev.fl_ios     = fl_ios;\n804                 sdev.fl_ticks   = fl_ticks;\n805             }\n806         }\n```\n\n## References\n\n- [iostat -x の出力を Linux Kernel ソースコードから理解する](https://blog.etsukata.com/2013/10/iostat-x-linux-kernel.html)\n- [iostat の値はどこから来るのか](https://qiita.com/sato4557/items/b2e966d0777796778dfe)\n","UpdatedAt":"2021-03-15T21:55:34.8077936+09:00"},{"Text":"# Latency\n\n## Operation Costs in CPU Clock Cycles\n\n- 参考: [Infographics: Operation Costs in CPU Clock Cycles - IT Hare on Soft.ware](http://ithare.com/infographics-operation-costs-in-cpu-clock-cycles/)\n\n| Operation                                                         | Cycles         | Memo                                                                                                                                                         |\n| ----------------------------------------------------------------- | -------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| \"Simple\" register-register op (ADD,OR,etc)                        | \u003c1             |                                                                                                                                                              |\n| Memory write                                                      | -1             | メモリの書き込みは完了する前に次の命令へすすめるので 1 クロックで済む                                                                                        |\n| Bypass delay: switch between integer and floating-point units     | 0-3            |                                                                                                                                                              |\n| \"Right\" branch of \"if\"                                            | 1-2            |                                                                                                                                                              |\n| Floating-point/vector addition                                    | 1-3            |                                                                                                                                                              |\n| Multiplication (integer/float/vector)                             | 1-7            |                                                                                                                                                              |\n| L1 read                                                           | 4              |                                                                                                                                                              |\n| L2 read                                                           | 10-12          |                                                                                                                                                              |\n| \"Wrong\" branch of \"if\" (branch misprediction)                     | 10-20          | 分岐予測失敗のペナルティは意外と少ない                                                                                                                       |\n| Integer division                                                  | 15-40          | 整数の割り算は遅い                                                                                                                                           |\n| 128-bit vector division                                           | 10-70          |                                                                                                                                                              |\n| C function direct call                                            | 25-70          |                                                                                                                                                              |\n| Floating-point division                                           | 30-40          |                                                                                                                                                              |\n| L3 read                                                           | 30-70          |                                                                                                                                                              |\n| C function indirect call                                          | 30-100         |                                                                                                                                                              |\n| C++ virtual function call                                         | 50-120         |                                                                                                                                                              |\n| Main RAM read                                                     | 100-150        | キャッシュに比べやはり遅い、cache の hit は重要                                                                                                              |\n| NUNA: different-socket L3 read                                    | 100-300        |                                                                                                                                                              |\n| Allocation + deallocation pair (small objects)                    | 200-500        |                                                                                                                                                              |\n| NUMA: different-socket main RAM read                              | 300-500        |                                                                                                                                                              |\n| Kernel call                                                       | 1000-1500      | システムコールは、CPU を kernel モードに切り替えての処理になるなので、コストが高い                                                                           |\n| Thread context switch (direct costs)                              | 2000           | コンテキストスイッチは、CPU のレジスタ切り替えるのでコストが大きい                                                                                           |\n| C++ Exception thrown+caught                                       | 5000-10000     | C++に限らず例外のコストは大きい、しかし例外が発生しなければ(try を書いてる分には)コストはない。また、if 文でチェックを大量にするほうがコストが高い場合もある |\n| Thread context switch (total costs, including cache invalidation) | 10000-1million |                                                                                                                                                              |\n\n## Latency\n\n- 参考: [Latency Numbers Every Programmer Should Know](https://gist.github.com/jboner/2841832)\n\n| Operation                          | Latency(ns) | Latency(us) | Latency(ms) | Latency(relative)           |\n| ---------------------------------- | ----------- | ----------- | ----------- | --------------------------- |\n| L1 cache reference                 | 0.5         |             |             |                             |\n| Branch mispredict                  | 5           |             |             |                             |\n| L2 cache reference                 | 7           |             |             | 14x L1 cache                |\n| Mutex lock/unlock                  | 25          |             |             |                             |\n| Main memory reference              | 100         |             |             | 20x L2 cache, 200x L1 cache |\n| Compress 1K bytes with Zippy       | 3,000       | 3           |             |                             |\n| Send 1K bytes over 1 Gbps network  | 10,000      | 10          |             |                             |\n| Read 4K randomly from SSD\\*        | 150,000     | 150         |             | ~1GB/sec SSD                |\n| Read 1 MB sequentially from memory | 250,000     | 250         |             |                             |\n| Round trip within same datacenter  | 500,000     | 500         |             |                             |\n| Read 1 MB sequentially from SSD\\*  | 1,000,000   | 1,000       | 1           | ~1GB/sec SSD, 4X memory     |\n| Disk seek                          | 10,000,000  | 10,000      | 10          | 20x datacenter roundtrip    |\n| Read 1 MB sequentially from disk   | 20,000,000  | 20,000      | 20          | 80x memory, 20X SSD         |\n| Send packet CA-\u003eNetherlands-\u003eCA    | 150,000,000 | 150,000     | 150         |                             |\n","UpdatedAt":"2021-03-15T21:55:34.8156799+09:00"},{"Text":"# sar\n\n## sar のデータ収集\n\n```\n# sar -o [file] [収集間隔]\n$ sar -o /tmp/sar.data 1\nLinux 5.3.0-59-generic (owner-desktop)  06/27/20        _x86_64_        (12 CPU)\n\n18:04:36        CPU     %user     %nice   %system   %iowait    %steal     %idle\n18:04:37        all      0.58      0.00      0.17      0.08      0.00     99.17\n18:04:38        all      0.08      0.00      0.08      0.08      0.00     99.75\n^C\n\nAverage:        all      0.33      0.00      0.13      0.08      0.00     99.46\n```\n\n## Processor の統計を表示\n\n```\n$ sar -P ALL -f /tmp/sar.data\n18:04:37        CPU     %user     %nice   %system   %iowait    %steal     %idle\n18:04:38        all      0.08      0.00      0.08      0.08      0.00     99.75\n18:04:38          0      1.01      0.00      0.00      0.00      0.00     98.99\n18:04:38          1      0.00      0.00      0.00      0.00      0.00    100.00\n18:04:38          2      0.00      0.00      0.00      0.00      0.00    100.00\n18:04:38          3      0.00      0.00      0.00      0.00      0.00    100.00\n18:04:38          4      0.00      0.00      0.00      0.00      0.00    100.00\n18:04:38          5      0.00      0.00      0.00      0.00      0.00    100.00\n18:04:38          6      0.00      0.00      0.00      0.00      0.00    100.00\n18:04:38          7      0.00      0.00      0.00      0.00      0.00     99.01\n18:04:38          8      0.00      0.00      0.00      0.00      0.00    100.00\n18:04:38          9      0.00      0.00      0.00      0.00      0.00    100.00\n18:04:38         10      0.00      0.00      0.00      0.00      0.00    100.00\n18:04:38         11      0.00      0.00      0.00      0.00      0.00    100.00\n\nAverage:        CPU     %user     %nice   %system   %iowait    %steal     %idle\nAverage:        all      1.34      0.00      1.09      0.06      0.00     97.52\nAverage:          0      1.54      0.00      1.48      0.07      0.00     96.91\nAverage:          1      1.03      0.00      1.16      0.02      0.00     97.79\nAverage:          2      1.41      0.00      1.16      0.08      0.00     97.35\nAverage:          3      0.98      0.00      1.01      0.02      0.00     97.99\nAverage:          4      1.42      0.00      1.11      0.08      0.00     97.39\nAverage:          5      1.10      0.00      1.08      0.02      0.00     97.80\nAverage:          6      1.86      0.00      1.19      0.09      0.00     96.86\nAverage:          7      1.06      0.00      0.93      0.03      0.00     97.99\nAverage:          8      1.69      0.00      1.06      0.09      0.00     97.16\nAverage:          9      1.26      0.00      0.94      0.04      0.00     97.77\nAverage:         10      1.64      0.00      1.09      0.10      0.00     97.16\nAverage:         11      1.03      0.00      0.87      0.03      0.00     98.06\n\n\n$ sar -P 1 -f /tmp/sar.data\nLinux 5.3.0-59-generic (owner-desktop)  06/27/20        _x86_64_        (12 CPU)\n\n17:49:59        CPU     %user     %nice   %system   %iowait    %steal     %idle\n17:50:00          1      0.00      0.00      0.00      0.00      0.00    100.00\n17:50:01          1      0.00      0.00      3.96      0.00      0.00     96.04\n17:50:02          1      0.00      0.00      1.01      0.00      0.00     98.99\n17:50:03          1      0.00      0.00      0.00      0.00      0.00    100.00\n17:50:04          1      0.99      0.00      0.99      0.00      0.00     98.02\n18:02:54          1      1.04      0.00      1.18      0.02      0.00     97.76\n18:02:55          1      1.00      0.00      1.00      0.00      0.00     98.00\n18:02:56          1      0.00      0.00      0.99      0.00      0.00     99.01\n18:02:57          1      0.00      0.00      0.00      0.00      0.00    100.00\n18:04:12          1      1.14      0.00      1.10      0.04      0.00     97.72\n18:04:13          1      0.99      0.00      0.99      0.00      0.00     98.02\n18:04:14          1      0.00      0.00      0.00      0.00      0.00    100.00\n18:04:36          1      0.49      0.00      1.12      0.00      0.00     98.39\n18:04:37          1      0.00      0.00      1.00      0.00      0.00     99.00\n18:04:38          1      0.00      0.00      0.00      0.00      0.00    100.00\nAverage:          1      1.03      0.00      1.16      0.02      0.00     97.79\n```\n\n```\n# CPU utilization の統計表示\n# 各CPUごとの統計は表示できない\n$ sar -u ALL -f /tmp/sar.data\n17:49:59        CPU      %usr     %nice      %sys   %iowait    %steal      %irq     %soft    %guest    %gnice     %idle\n17:50:00        all      0.50      0.00      0.42      0.08      0.00      0.00      0.00      0.00      0.00     99.00\n17:50:01        all      3.36      0.00      3.02      0.08      0.00      0.00      0.50      0.00      0.00     93.04\n17:50:02        all      1.50      0.00      1.83      0.00      0.00      0.00      0.33      0.08      0.00     96.25\n17:50:03        all      0.08      0.00      0.08      0.08      0.00      0.00      0.00      0.00      0.00     99.75\n17:50:04        all      0.75      0.00      0.34      0.00      0.00      0.00      0.00      0.00      0.00     98.91\n```\n\n```\n# run queue, load, blockedの表示\n$ sar -q -f /tmp/sar.data\nLinux 5.3.0-59-generic (owner-desktop)  06/27/20        _x86_64_        (12 CPU)\n\n17:49:59      runq-sz  plist-sz   ldavg-1   ldavg-5  ldavg-15   blocked\n17:50:00            0      1208      0.69      0.90      0.85         0\n17:50:01            1      1211      0.69      0.90      0.85         0\n17:50:02            0      1208      0.69      0.90      0.85         0\n17:50:03            0      1207      0.69      0.90      0.85         0\n```\n\n```\n# 新規プロセス、コンテキストスイッチ数の統計\n$ sar -w -f /tmp/sar.data\nLinux 5.3.0-59-generic (owner-desktop)  06/27/20        _x86_64_        (12 CPU)\n\n17:49:59       proc/s   cswch/s\n17:50:00         0.00   4185.00\n17:50:01        80.00  14469.00\n17:50:02        42.00   5804.00\n17:50:03         0.00   2970.00\n17:50:04         0.00   4581.00\n18:02:54        22.54   5556.08\n```\n\n## Intterupt の統計を表示\n\n```\n$ sar -I SUM -f /tmp/sar.data\nLinux 5.3.0-59-generic (owner-desktop)  06/27/20        _x86_64_        (12 CPU)\n\n17:49:59         INTR    intr/s\n18:04:36          sum   2835.24\n18:04:37          sum   2142.57\n18:04:38          sum   1267.00\nAverage:          sum   2786.64\n```\n\n## Ram の統計を表示\n\n```\n$ sar -r -f /tmp/sar.data\nLinux 5.3.0-59-generic (owner-desktop)  06/27/20        _x86_64_        (12 CPU)\n\n17:49:59    kbmemfree   kbavail kbmemused  %memused kbbuffers  kbcached  kbcommit   %commit  kbactive   kbinact   kbdirty\n17:50:00      6272068  13265084  26611600     80.93   1569972   4888756  15236556     43.56   4948240   3887872      1292\n17:50:01      6269248  13262356  26614420     80.94   1569992   4889024  15228380     43.53   4949268   3888120      1424\n17:50:02      6268852  13262132  26614816     80.94   1569996   4888980  15226268     43.53   4948312   3888112      1508\n17:50:03      6268852  13262132  26614816     80.94   1570004   4888972  15226268     43.53   4948312   3888112      1528\n17:50:04      6268820  13262160  26614848     80.94   1570008   4889068  15226268     43.53   4948324   3888160       596\n18:02:54      6250076  13278444  26633592     80.99   1575604   4917732  15216468     43.50   4939084   3916632       880\n18:02:55      6251572  13280080  26632096     80.99   1575604   4917900  15215952     43.50   4937044   3916764       784\n18:02:56      6251472  13279988  26632196     80.99   1575624   4917940  15215952     43.50   4936844   3916768       980\n18:02:57      6251472  13280048  26632196     80.99   1575624   4917976  15215952     43.50   4936844   3916828      1188\n18:04:12      6247672  13280116  26635996     81.00   1576124   4921188  15225500     43.53   4938660   3918024      1196\n18:04:13      6248200  13280660  26635468     81.00   1576136   4921212  15225500     43.53   4939004   3918032      1236\n18:04:14      6248160  13280728  26635508     81.00   1576140   4921340  15225500     43.53   4939724   3918124      1364\n18:04:36      6248076  13281644  26635592     81.00   1576288   4922088  15224396     43.52   4939700   3918932       788\n18:04:37      6247816  13281440  26635852     81.00   1576300   4922148  15224396     43.52   4939836   3918984       832\n18:04:38      6247816  13281508  26635852     81.00   1576300   4922236  15224396     43.52   4939840   3919052       912\nAverage:      6256011  13274568  26627657     80.98   1573981   4909771  15223850     43.52   4941936   3907901      1101\n\n$ sar -r ALL -f /tmp/sar.data\nLinux 5.3.0-59-generic (owner-desktop)  06/27/20        _x86_64_        (12 CPU)\n\n17:49:59    kbmemfree   kbavail kbmemused  %memused kbbuffers  kbcached  kbcommit   %commit  kbactive   kbinact   kbdirty  kbanonpg    kbslab  kbkstack   kbpgtbl  kbvmused\n17:50:00      6272068  13265084  26611600     80.93   1569972   4888756  15236556     43.56   4948240   3887872      1292   2377444    786148     19568     41176     41236\n17:50:01      6269248  13262356  26614420     80.94   1569992   4889024  15228380     43.53   4949268   3888120      1424   2378452    786112     19568     41576     41364\n```\n\n```\n$ sar -B -f /tmp/sar.data\nLinux 5.3.0-59-generic (owner-desktop)  06/27/20        _x86_64_        (12 CPU)\n\n17:49:59     pgpgin/s pgpgout/s   fault/s  majflt/s  pgfree/s pgscank/s pgscand/s pgsteal/s    %vmeff\n17:50:00         0.00    988.00      3.00      0.00     12.00      0.00      0.00      0.00      0.00\n17:50:01         0.00   2080.00  24595.00      0.00  19305.00      0.00      0.00      0.00      0.00\n17:50:02         0.00    776.00  13042.00      0.00  11286.00      0.00      0.00      0.00      0.00\n17:50:03         0.00   3160.00      0.00      0.00      7.00      0.00      0.00      0.00      0.00\n```\n\n```\n# Swapの統計\n$ sar -S -f /tmp/sar.data\n17:49:59    kbswpfree kbswpused  %swpused  kbswpcad   %swpcad\n17:50:00      2097148         0      0.00         0      0.00\n17:50:01      2097148         0      0.00         0      0.00\n17:50:02      2097148         0      0.00         0      0.00\n```\n\n```\n# Hugepageの使用量を表示\n$ sar -H -f /tmp/sar.data\nLinux 5.3.0-59-generic (owner-desktop)  06/27/20        _x86_64_        (12 CPU)\n\n17:49:59    kbhugfree kbhugused  %hugused\n17:50:00      9437184   7340032     43.75\n17:50:01      9437184   7340032     43.75\n17:50:02      9437184   7340032     43.75\n```\n\n## Device の統計を表示\n\n```\n# deviceのIO統計\n$ sar -d -f /tmp/sar.data\n18:04:37          DEV       tps     rkB/s     wkB/s   areq-sz    aqu-sz     await     svctm     %util\n18:04:38       dev7-0      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\n18:04:38       dev7-1      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\n```\n\n```\n# blockのIO統計\n$ sar -b -f /tmp/sar.data\nLinux 5.3.0-59-generic (owner-desktop)  06/27/20        _x86_64_        (12 CPU)\n\n17:49:59          tps      rtps      wtps   bread/s   bwrtn/s\n17:50:00        86.00      0.00     86.00      0.00   1976.00\n17:50:01        71.00      0.00     71.00      0.00   4160.00\n17:50:02        20.00      0.00     20.00      0.00   1552.00\n```\n\n```\n# FileSystemの使用量\n$ sar -F -f /tmp/sar.data\n18:04:37     MBfsfree  MBfsused   %fsused  %ufsused     Ifree     Iused    %Iused FILESYSTEM\n18:04:38       133273     73879     35.66     40.78  12187951   1353425      9.99 /dev/nvme0n1p1\n18:04:38            0         0    100.00    100.00         0       230    100.00 /dev/loop0\n\nSummary:       133273     73879     35.66     40.78  12187951   1353425      9.99 /dev/nvme0n1p1\nSummary:            0         0    100.00    100.00         0       230    100.00 /dev/loop0\nSummary:            0       162    100.00    100.00         0     27798    100.00 /dev/loop2\n```\n\n## Network の統計を表示\n\n```\n# -n { \u003ckeyword\u003e [,...] | ALL }\n#  DEV     Network interfaces\n#  EDEV    Network interfaces (errors)\n#  NFS     NFS client\n#  NFSD    NFS server\n#  SOCK    Sockets (v4)\n#  IP      IP traffic      (v4)\n#  EIP     IP traffic      (v4) (errors)\n#  ICMP    ICMP traffic    (v4)\n#  EICMP   ICMP traffic    (v4) (errors)\n#  TCP     TCP traffic     (v4)\n#  ETCP    TCP traffic     (v4) (errors)\n#  UDP     UDP traffic     (v4)\n#  SOCK6   Sockets (v6)\n#  IP6     IP traffic      (v6)\n#  EIP6    IP traffic      (v6) (errors)\n#  ICMP6   ICMP traffic    (v6)\n#  EICMP6  ICMP traffic    (v6) (errors)\n#  UDP6    UDP traffic     (v6)\n#  FC      Fibre channel HBAs\n#  SOFT    Software-based network processing\n\n# Deviceの統計\n$ sar -n DEV -f /tmp/sar.data\n18:04:12        IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s   %ifutil\n18:04:13      enp31s0      2.00      3.00      0.12      0.37      0.00      0.00      0.00      0.00\n18:04:13     com-1-ex      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\n18:04:13     com-2-ex      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\n18:04:13           lo     93.00     93.00    208.85    208.85      0.00      0.00      0.00      0.00\n18:04:13     com-4-ex      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\n18:04:13      docker0      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\n18:04:13     com-0-ex      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\n\nAverage:        IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s   %ifutil\nAverage:      enp31s0      2.14      4.01      0.15      1.61      0.00      0.00      0.06      0.00\nAverage:     com-1-ex      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\nAverage:     com-2-ex      0.01      0.01      0.00      0.00      0.00      0.00      0.00      0.00\nAverage:           lo    187.55    187.55     73.62     73.62      0.00      0.00      0.00      0.00\nAverage:     com-4-ex      0.01      0.01      0.00      0.00      0.00      0.00      0.00      0.00\nAverage:      docker0      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\nAverage:     com-0-ex      0.02      0.02      0.00      0.00      0.00      0.00      0.00      0.00\n\n# DeviceのError統計\n$ sar -n EDEV -f /tmp/sar.data\n18:04:38      enp31s0      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\n18:04:38     com-1-ex      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\n18:04:38     com-2-ex      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\n18:04:38           lo      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\n18:04:38     com-4-ex      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\n18:04:38      docker0      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\n18:04:38     com-0-ex      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\n\nAverage:        IFACE   rxerr/s   txerr/s    coll/s  rxdrop/s  txdrop/s  txcarr/s  rxfram/s  rxfifo/s  txfifo/s\nAverage:      enp31s0      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\nAverage:     com-1-ex      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\nAverage:     com-2-ex      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\nAverage:           lo      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\nAverage:     com-4-ex      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\nAverage:      docker0      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\nAverage:     com-0-ex      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00\n\n\n# TCPの統計\n$ sar -n TCP,ETCP -f /tmp/sar.data\nLinux 5.3.0-59-generic (owner-desktop)  06/27/20        _x86_64_        (12 CPU)\n\n17:49:59     active/s passive/s    iseg/s    oseg/s\n18:04:12         0.40      0.40    191.28    191.70\n18:04:13         0.00      0.00     95.00     96.00\n18:04:14         1.00      1.00    155.00    178.00\n18:04:36         0.45      0.45    193.76    194.83\n18:04:37         0.00      0.00    251.49    250.50\n18:04:38         0.00      0.00    107.00    107.00\nAverage:         0.41      0.41    189.54    191.48\n\n17:49:59     atmptf/s  estres/s retrans/s isegerr/s   orsts/s\n18:04:12         0.00      0.40      0.00      0.00      0.40\n18:04:13         0.00      0.00      0.00      0.00      0.00\n18:04:14         0.00      0.00      0.00      0.00      0.00\n18:04:36         0.00      0.45      0.00      0.00      0.45\n18:04:37         0.00      0.00      0.00      0.00      0.00\n18:04:38         0.00      0.00      0.00      0.00      0.00\nAverage:         0.00      0.40      0.01      0.00      0.40\n\n\n# SOCKの統計\n$ sar -n SOCK -f /tmp/sar.data\nLinux 5.3.0-59-generic (owner-desktop)  06/27/20        _x86_64_        (12 CPU)\n\n17:49:59       totsck    tcpsck    udpsck    rawsck   ip-frag    tcp-tw\n17:50:00         1101       274         4         0         0         0\n17:50:01         1103       274         4         0         0         0\n17:50:02         1101       274         4         0         0         0\n17:50:03         1101       274         4         0         0         0\n```\n\n## Power Management の統計\n\n```\n# -m { \u003ckeyword\u003e [,...] | ALL }\n#                 Power management statistics\n#                 Keywords are:\n#                 CPU     CPU instantaneous clock frequency\n#                 FAN     Fans speed\n#                 FREQ    CPU average clock frequency\n#                 IN      Voltage inputs\n#                 TEMP    Devices temperature\n#                 USB     USB devices plugged into the system\n```\n\n```\n# CPUの周波数\n$ sar -m CPU -f /tmp/sar.data\n17:49:59        CPU       MHz\n17:50:00        all   1509.11\n17:50:01        all   1788.33\n17:50:02        all   1882.69\n17:50:03        all   1475.06\n```\n\n```\n# FANの速度\n$ sar -m FAN -f /tmp/sar.data\n17:49:59          FAN       rpm      drpm DEVICE\n17:50:00            1    603.00    603.00 nouveau-pci-2300\n17:50:01            1    573.00    573.00 nouveau-pci-2300\n17:50:02            1    554.00    554.00 nouveau-pci-2300\n17:50:03            1    530.00    530.00 nouveau-pci-2300\n```\n\n```\n# Deviceの温度\n$ sar -m TEMP -f /tmp/sar.data\n17:49:59         TEMP      degC     %temp DEVICE\n17:50:00            1     35.75     51.07 k10temp-pci-00c3\n17:50:00            2     35.75      0.00 k10temp-pci-00c3\n17:50:00            3     44.00     46.32 nouveau-pci-2300\n17:50:01            1     44.75     63.93 k10temp-pci-00c3\n17:50:01            2     44.75      0.00 k10temp-pci-00c3\n17:50:01            3     44.00     46.32 nouveau-pci-2300\n\nAverage:            1     38.46     54.94 k10temp-pci-00c3\nAverage:            2     38.46      0.00 k10temp-pci-00c3\nAverage:            3     44.00     46.32 nouveau-pci-2300\n```\n\n## sar の定期実行\n\n- sa1 というワンショットのコマンドを cron によって実行する\n\n```\n# 設定ファイルを有効化しておく\n$ sudo sed -i 's/ENABLED=\"false\"/ENABLED=\"true\"/g' /etc/default/sysstat\n```\n\n```\n# sarのログファイルは以下に保存される\n$ ls /var/log/sysstat\nsa27\n```\n\n```\n# devian用のsa1みると、上記の設定ファイルをenableにしない限り、devian-sa1を実行してもなにも起こらない\n$ cat /usr/lib/sysstat/debian-sa1\n#!/bin/sh\n# vim:ts=2:et\n# Debian sa1 helper which is run from cron.d job, not to needlessly\n# fill logs (see Bug#499461).\n\nset -e\n\n# Global variables:\n#\n#  our configuration file\nDEFAULT=/etc/default/sysstat\n#  default setting, overriden in the above file\nENABLED=false\n\n# Read defaults file\nif [ -r \"$DEFAULT\" ]; then\n  . \"$DEFAULT\"\nfi\n\nif [ \"true\" = \"$ENABLED\" ]; then\n  exec /usr/lib/sysstat/sa1 \"$@\"\nfi\n\nexit 0\n```\n\n- sysstat をインストールすると cron によって定期的に debian-sa1 を実行するよう設定される\n\n```\n$ cat /etc/cron.d/sysstat\n# The first element of the path is a directory where the debian-sa1\n# script is located\nPATH=/usr/lib/sysstat:/usr/sbin:/usr/sbin:/usr/bin:/sbin:/bin\n\n# Activity reports every 10 minutes everyday\n5-55/10 * * * * root command -v debian-sa1 \u003e /dev/null \u0026\u0026 debian-sa1 1 1\n\n# Additional run at 23:59 to rotate the statistics file\n59 23 * * * root command -v debian-sa1 \u003e /dev/null \u0026\u0026 debian-sa1 60 2\n```\n\n- 起動時に sysstat が実行されるように設定する\n- これは、起動時の統計を集計するためのワンショット\n\n```\n$ sudo systemctl enable sysstat\n\n# これをrestartすると、sysstatとしてはサーバがリスタートしたと記録するため、むやみに実行してはいけない\n# $ sudo systemctl restart sysstat\n```\n\n```\n$ sudo cat /lib/systemd/system/sysstat.service\n# /lib/systemd/system/sysstat.service\n# (C) 2012 Peter Schiffer (pschiffe \u003cat\u003e redhat.com)\n# (C) 2017 Robert Luberda \u003crobert@debian.org\u003e\n#\n# sysstat systemd unit file:\n#        Insert a dummy record in current daily data file.\n#        This indicates that the counters have restarted from 0.\n\n[Unit]\nDescription=Resets System Activity Data Collector\nDocumentation=man:sa1(8) man:sadc(8) man:sar(1)\n\n[Service]\nType=oneshot\nRemainAfterExit=yes\nUser=root\nExecStart=/usr/lib/sysstat/debian-sa1 --boot\n\n[Install]\nWantedBy=multi-user.target\n```\n\n## Json で出力する\n\n```\n$ sadf -t -s 19:00 -e 20:00 -j -- -A 2\u003e\u00261\n\n# ファイルを指定する\n$ sadf /tmp/sar.data -t -j -- -A 2\u003e\u00261\n```\n","UpdatedAt":"2021-03-15T21:55:34.8249429+09:00"}],"IdPathMap":["README.md","basic/README.md","basic/apt.md","basic/find.md","basic/grep.md","basic/jq.md","basic/man_tldr.md","basic/rsync.md","basic/shutdown_reboot.md","basic/yum.md","benchmarking/README.md","benchmarking/apachebench.md","benchmarking/fio.md","benchmarking/fio_report.md","benchmarking/iperf3.md","benchmarking/lmbench.md","benchmarking/siege.md","benchmarking/sysbench.md","benchmarking/sysbench_report.md","benchmarking/tuning/README.md","benchmarking/tuning/io.md","benchmarking/tuning/memory.md","benchmarking/unixbench.md","benchmarking/unixbench_report.md","benchmarking/wrk.md","benchmarking/wrk_report.md","cicd/README.md","cicd/git.md","cicd/patch.md","network/README.md","network/ip.md","network/tcpdump_tshark.md","network/tools.md","observation/README.md","observation/basic.md","observation/intermediate.md","observation/iostat.md","observation/latency.md","observation/sar.md"],"PathMap":{"README.md":0,"basic/README.md":1,"basic/apt.md":2,"basic/find.md":3,"basic/grep.md":4,"basic/jq.md":5,"basic/man_tldr.md":6,"basic/rsync.md":7,"basic/shutdown_reboot.md":8,"basic/yum.md":9,"benchmarking/README.md":10,"benchmarking/apachebench.md":11,"benchmarking/fio.md":12,"benchmarking/fio_report.md":13,"benchmarking/iperf3.md":14,"benchmarking/lmbench.md":15,"benchmarking/siege.md":16,"benchmarking/sysbench.md":17,"benchmarking/sysbench_report.md":18,"benchmarking/tuning/README.md":19,"benchmarking/tuning/io.md":20,"benchmarking/tuning/memory.md":21,"benchmarking/unixbench.md":22,"benchmarking/unixbench_report.md":23,"benchmarking/wrk.md":24,"benchmarking/wrk_report.md":25,"cicd/README.md":26,"cicd/git.md":27,"cicd/patch.md":28,"network/README.md":29,"network/ip.md":30,"network/tcpdump_tshark.md":31,"network/tools.md":32,"observation/README.md":33,"observation/basic.md":34,"observation/intermediate.md":35,"observation/iostat.md":36,"observation/latency.md":37,"observation/sar.md":38}}